Перем глПользователь Экспорт, ВремяЗавершения Экспорт, ПериодЗапускаРеглЗаданий;
Перем тзСтатистики, тзЗаданий, Хендл, Планировщик, КоэффМодификацииПериода;

Перем ВыполняемыйМодуль Экспорт;

Перем глмУправлениеДоступом Экспорт, глмМетаданные Экспорт, 
	глмКорректировкаЗаписейРегистров Экспорт, глмЛогСистемы Экспорт, 
	глмOLEDBQuery Экспорт, глмОбщиеФункции Экспорт, 
	глмТаблицыЗначений Экспорт, глмХМЛ Экспорт, глмСобытия Экспорт, 
	глмБлокировка Экспорт, глмТаблицаЗаданий Экспорт, 
	глмПланЗаданий Экспорт, глмРИБ Экспорт, глмРИБ002 Экспорт,
	глмРИБ003 Экспорт, глмХеш Экспорт, глмФильтр Экспорт,
	глмМодули Экспорт;

Функция глВзятьКонтекст(Конт) Экспорт

	Возврат Конт;

КонецФункции

Функция глУстЗначВспомФункцияШаблона(А, Б) Экспорт
	
	А = Б;
	
КонецФункции

Процедура глУстановПараметр(Параметр, Значение) Экспорт
	
	Шаблон("[глУстЗначВспомФункцияШаблона(" + СокрЛП(Параметр) + "," + Значение + ")]");
	
КонецПроцедуры

Функция глИницВнешМодуля(ТекстМодуля, КонтекстМодуля, ВыполняемыйМодуль) Экспорт
	
	ВыполняемыйМодуль = СоздатьОбъект("ВыполняемыйМодуль");	
	ВыполняемыйМодуль.УстановитьМодуль(ТекстМодуля);
	ВыполняемыйМодуль.ПрисоединитьТекущийМодуль();
	ВыполняемыйМодуль.НазначитьКонтекст(КонтекстМодуля);
	
	Если ВыполняемыйМодуль.КомпилироватьМодуль() = 0 Тогда
		Возврат 0;
	КонецЕсли;	
	
    Возврат ВыполняемыйМодуль.ВыполнитьМодуль();
	
КонецФункции

Процедура глИницГлобМодуля(ИмяФайла, ВыполняемыйМодуль) Экспорт
	
	ПутьКФайлу = КаталогИБ() 
		+ "ExtForms\UniReps\Modules\" 
			+ ИмяФайла + ".txt";
	
	ГлобМодуль = СоздатьОбъект("Текст");
	ГлобМодуль.Открыть(ПутьКФайлу);
    
	ТекстМодуля = "";
	
	Для Индекс = 1 по ГлобМодуль.КоличествоСтрок() Цикл
		ТекстМодуля = ТекстМодуля 
			+ ГлобМодуль.ПолучитьСтроку(Индекс) 
				+ РазделительСтрок;
	КонецЦикла;
	
	Если глИницВнешМодуля(ТекстМодуля, 
		Контекст, ВыполняемыйМодуль) = 0 Тогда
			Сообщить("Не удалось загрузить глобальный модуль """ 
				+ ИмяФайла + """", "!");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПерезагрузитьКлассы()
	
	МетаИнфо = СоздатьОбъект("MetaInfoClasses");
	МетаИнфо.ОчиститьДанныеОптимизацииКлассов();
	
КонецПроцедуры	

Функция глПодклКлассОП(Имя, Модуль = "") Экспорт

	// каталог хранения модулей информационной базы
	Каталог = КаталогИБ() 
		+ "ExtForms\UniReps\Modules\";

	Текст = СоздатьОбъект("Текст");
	Если Модуль <> "" Тогда	
		//	модуль:
		ФайлМодуля = Каталог + Имя + ".txt";
		Текст.Очистить();
		Текст.ДобавитьСтроку(Модуль);
		Текст.Записать(ФайлМодуля);
	КонецЕсли;
	
	ПерезагрузитьКлассы();
	
	Попытка
		// возможно, класс, определенный пользователем уже объявлен 
		// в системе и теперь, нужно его проинстанцировать
		Класс = СоздатьОбъект(Имя);

	Исключение

		// класс не объявлен в системе, но, возможно в
		// каталоге ИБ уже есть файлы его определения
		ФайлОписания = Каталог + Имя + "Описание.txt";
	    Если ФС.СуществуетФайл(ФайлОписания) = 0 Тогда
			// если нет - записываем их
			//	описание:
			Текст.ДобавитьСтроку("class " + Имя + " = " 
				+ Имя + ".txt {}");
			Текст.Записать(ФайлОписания);

		КонецЕсли;

		// подключения класса ОП динамически
		МетаИнфо = СоздатьОбъект("MetaInfoClasses");
		МетаИнфо.ЗагрузитьОписаниеКлассов(ФайлОписания);
		// инстанцирование...
		Класс = СоздатьОбъект(Имя);


	КонецПопытки;
	// экземпляр пользовательского класса
	Возврат Класс;
	
КонецФункции	

Процедура глПодклГлобМодуль(ИдОбработки) Экспорт
	
	// каталог хранения модулей информационной базы
	Каталог = КаталогИБ() 
		+ "ExtForms\UniReps\Modules\";
		
	ОткрОбрГлМодуля = глПодклКлассОП("ОткрОбрГлМодуля", 
		"Функция СобытиеГМ_ПриОткрытии(КонтФормы,ФлагЧтенияНастройки) Экспорт
		|	ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
		|	Попытка
		|		ФормаРасш.УстановитьФорму(КонтФормы.Форма);
		|	Исключение
		|		Сообщить(""ошибка записи обработчика "" + КонтФормы.Форма.Параметр);
		|		Возврат 0;
		|	КонецПопытки;
		|   Текст = СоздатьОбъект(""Текст"");
		|	ТекстМодуля = ФормаРасш.ТекстМодуля;
		|	ТекстМодуля = СтрЗаменить(ТекстМодуля, ""//{}"", """");
		|	Текст.ДобавитьСтроку(ТекстМодуля);
		|	Текст.Записать(КонтФормы.Форма.Параметр);
		|	Возврат 0;
		|КонецФункции");

    Перехватчик = СоздатьОбъект("Перехватчик");
    Перехватчик.ПерехватитьСобытияГлобальногоМодуля(ОткрОбрГлМодуля);
	ОткрытьФорму("Обработка." + ИдОбработки, Каталог + ИдОбработки + ".txt");
	глИницГлобМодуля(ИдОбработки, ВыполняемыйМодуль);
	глУстановПараметр(ИдОбработки, ВыполняемыйМодуль);
	Перехватчик.СнятьПерехватСобытийГлобальногоМодуля();
	
КонецПроцедуры

Процедура Планировщик()

	Попытка
		// маппинг на функцию модуля
		глмПланЗаданий.Планировщик("", Хендл, 
			тзЗаданий, тзСтатистики);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ПодключитьПланировщик()

	Хендл = глмБлокировка.Модуль.CreateFile(глмПланЗаданий
		.ВзятьИмяФайлаБлк(), глмБлокировка.Модуль.GENERIC_READ_WRITE, 
			глмБлокировка.Модуль.FILE_SHARE_READ_WRITE, 0, 
				глмБлокировка.Модуль.OPEN_ALWAYS, глмБлокировка
					.Модуль.FILE_ATTRIBUTE_NORMAL, 0);

	тзСтатистики = глмТаблицаЗаданий.ИнТаблСтат();

	тзЗаданий = глмТаблицаЗаданий.ИнТаблЗаданий();
    
	спрФоновыеЗадания = СоздатьОбъект("Справочник.ФоновыеЗадания");
	спрФоновыеЗадания.ПорядокКодов();
	
	Если спрФоновыеЗадания.ВыбратьЭлементы() = 1 Тогда
		Пока спрФоновыеЗадания.ПолучитьЭлемент() = 1 Цикл
			Если спрФоновыеЗадания.Выполнять 
				* Число(Шаблон(спрФоновыеЗадания.ШаблонДоступа)) = 1 Тогда
				
				ПараметрыЗадания = """" + СокрЛП(спрФоновыеЗадания.Задание)
					+ """,""" + спрФоновыеЗадания.Условие + """" 
						+ ?(СокрЛП(спрФоновыеЗадания.Параметры) = "", "",
							",""" + спрФоновыеЗадания.Параметры + """"); 

				глмТаблицаЗаданий.ПланЗадания(тзЗаданий, ПараметрыЗадания, 
					спрФоновыеЗадания.Однократно, спрФоновыеЗадания.Период, 
						спрФоновыеЗадания.Задержек, 
							спрФоновыеЗадания.ТекущийЭлемент());
			КонецЕсли;	
		КонецЦикла;		
    КонецЕсли;	
	
	Планировщик = СоздатьОбъект("Сервис");				
					
	глмПланЗаданий.ЗапуститьПланировщик(Планировщик);
	
КонецПроцедуры

Функция УчетНагрузкиВПланировщике() Экспорт
	Перем Значение;
	
	Если глмСобытия.ПрочитатьИндикаторНагрузки(Значение) = 1 Тогда
		
		тзЗаданий.ВыбратьСтроки();
		
		Пока тзЗаданий.ПолучитьСтроку() = 1 Цикл
			
			Если тзЗаданий.Ссылка
				.УчитыватьНагрузку = 0 Тогда
// по заданию не предусмотрена корректировка 
// периода запуска относительно нагрузки				
					Продолжить;
			Иначе
// корректировка периода запуска - примитив,
// но, на данный момент, достаточно
				тзЗаданий.Период = (1 + Значение * КоэффМодификацииПериода) 
					* тзЗаданий.Ссылка.Период;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат 1;
	
КонецФункции	

Процедура ПриНачалеРаботыСистемы()
	// загрузка глобальных модулей (уже после компиляции глоб. модуля, 
	// чтобы иметь возможность ссылаться на все его экспортные методы 
	// и переменные)
	Сервис = СоздатьОбъект("Сервис");
	Для Индекс = 1 По Метаданные.Обработка() Цикл
		Ид = Метаданные.Обработка(Индекс).Идентификатор;
		Если Лев(Ид, 3) = "глм" Тогда
			Состояние("Подключение глобального модуля """ + Ид + """");
			глПодклГлобМодуль(Ид);
			Состояние(Шаблон("[" + Ид + ".Тест()]"));
		КонецЕсли;
		Состояние("");
	КонецЦикла;
	// установка текущего пользователя
	Если ПустоеЗначение(ИмяПользователя()) = 0 Тогда
		Спр = СоздатьОбъект("Справочник.Пользователи");
		Если Спр.НайтиПоКоду(ИмяПользователя()) = 0 Тогда
			Спр.Новый();
			Спр.Код = ИмяПользователя();
			Спр.Наименование = ИмяПользователя();
			Спр.Записать();
			Предупреждение("Пользователь зарегистрирован в справочнике пользователей!");
		КонецЕсли;
		глПользователь = Спр.ТекущийЭлемент();
		Спр = 0;   
	Иначе
		глПользователь = "";
		Предупреждение("Пользователь системы не определен!"); 
		ЗавершитьРаботуСистемы(0);
	КонецЕсли;	
	
	Если глмУправлениеДоступом.ЕстьПравоДоступа("ФоновыеЗаданияВРежимеСервера") = 1 Тогда
	// Французов: для работы планировщика в контексте 0 - при падении 
	// 1С при переполнении стека вызовов, отключить в первую очередь:
		глмПланЗаданий.РазрешитьВложенныйВызовМетодов();
        
		глмОбщиеФункции.РазрешитьВложенныйВызовМетодов();
		
	// запуск в серверном режиме: фоновые утилитарные задания	
		ПодключитьПланировщик();

	Иначе
	// запуск, в сущности, 2-х заданий: ведение статистики событий и
	// завершение сеанса пользователя по значению константы
		ОбработкаОжидания("ЗапускРегламентныхЗаданийВФоновомРежиме", 
			ПериодЗапускаРеглЗаданий);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриОтменеПроведенияДокумента(Док)
	
	Если Док.Вид() = "КорректировкаЗаписейРегистров" Тогда
		Сообщить("Для отмены корректировки воспользуйтесь флажком ""ВклДвижения""", "!");
		СтатусВозврата(0);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПриУдаленииДокумента(Док, Режим)
	
	// переписать событие под удаление соответствующих сохраненных
	// движений документов, если таковые имеются
	Если Док.Вид() = "КорректировкаЗаписейРегистров" Тогда
		спрХранилищеЗначения = СоздатьОбъект("Справочник.ХранилищеЗначения");
		Если спрХранилищеЗначения.НайтиЭлемент(Док.ХранилищеДвижений) = 1 Тогда
			спрХранилищеЗначения.Удалить(0);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗагрузкеФормы(ПолныйТипОбъекта)
// обработчик создания формы
	
	Попытка
		глмУправлениеДоступом.СохранитьПолныйТипОбъекта(ПолныйТипОбъекта);
	Исключение
// инициализация главногоо окна программы - переменные 
// еще не проинициализированы

	КонецПопытки;

КонецПроцедуры

Процедура ПриНачалеБлокировкиОбъекта(Конт)
// обработчик успешной блокировки объекта информационной 
// базы (срабатывает после загрузки формы)
	
	глмУправлениеДоступом.ПриНачалеБлокировкиОбъекта(Конт);	

КонецПроцедуры

Процедура ОбработкаБлокировкиОбъекта(Объект, Повторить, ДополнительныйТекст)
// обработчик на случай, если блокировка объекта информационной 
// базы не удалась

КонецПроцедуры	

Процедура ПриЗагрузкеМодуляФормы(ПолныйТипОбъекта)
// обработчик загрузки модуля формы, срабатывает после 
// обработчика блокировки объекта
    
	Попытка
		глмУправлениеДоступом.ВосстановитьПолныйТипОбъекта(ПолныйТипОбъекта);
	Исключение
	
	КонецПопытки;	

КонецПроцедуры

Процедура ПослеОбновленияФормы(Конт)
// обработчик обновления формы	

КонецПроцедуры

Процедура ПослеСозданияФормы(Конт)
// обработчик завершения создания формы, срабатывает после 
// обработчика обновления формы
	
	глмУправлениеДоступом.ПослеСозданияФормы(Конт);	
	
КонецПроцедуры
	
Процедура ПриЗавершенииРаботыСистемы()
	
	// снятие перехвата события на проведение корректировки 
	// записей регистров. если этого не сделать, при завершении
	// работы системы будет возникать ошибка
	Перехватчик=СоздатьОбъект("Перехватчик");
    Перехватчик.СнятьПерехватСобытийПроведенияДокумента("КорректировкаЗаписейРегистров");
	
КонецПроцедуры

Функция ПроверкаФлагаЗавершениеРаботыСистемы() Экспорт
	
	Если Константа.ВсемВыйти <> -1 Тогда
		ВремяЗавершения = ВремяЗавершения + ПериодЗапускаРеглЗаданий;
		Если ВремяЗавершения > Константа.ВремяВыхода Тогда
			Если глмУправлениеДоступом
				.ЕстьПравоДоступа("ВходПриБлокировкеСеансов") = 0 Тогда
					ЗавершитьРаботуСистемы(0);
			КонецЕсли;	
		Иначе
			Если Вопрос(
				"В целях обслуживания информационной базы, администратор
				|запросил завершение работы пользователей. Сеанс будет 
				|завершен автоматически через " + (Константа.ВремяВыхода 
					- ВремяЗавершения) + " секунд. 
				|Выполнить завершение сеанса сейчас?", "Да+Нет", 60) = "Да" Тогда
				ЗавершитьРаботуСистемы(1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат 1;
	
КонецФункции

Процедура ЗапускРегламентныхЗаданийВФоновомРежиме()
	
	ПроверкаФлагаЗавершениеРаботыСистемы();
		
КонецПроцедуры	

Процедура ЗакрытьЗаписьВсехСобытий()
	
	глмСобытия.ЗакрытьЗаписьВсехСобытий();
	
	ОбработкаОжидания("ЗапускРегламентныхЗаданийВФоновомРежиме", 
		ПериодЗапускаРеглЗаданий);

КонецПроцедуры	

Процедура ПриОтжатииЛевойКнопки(Конт, Сост, Х, У)
	Перем Тип, Вид, Действие;
	
	Если глмУправлениеДоступом.ЕстьПравоДоступа("ФоновыеЗаданияВРежимеСервера") = 1 Тогда
	// у сервера расчет статистики событий происходит только 
	// в модуле проведения документов	
		Возврат;
	КонецЕсли;
	
	Попытка
		глмСобытия.Тест();
	Исключение
	// модуль событий еще не инициализирован при загрузке системы	
		Возврат;
	КонецПопытки;	
	
	Если глмСобытия.ОбрабатыватьСобытия = 1 Тогда
		Если глмСобытия.ПараметрыСобытия(Конт, Сост, Х, У, 
			Тип, Вид, Действие) = 1 Тогда
		
			Если глмСобытия.ФильтрНаПараметрыСобытия(Тип, 
				Вид, Действие) = 0 Тогда	
					
					глмСобытия.ОткрытьЗаписьСобытия(Тип, Вид, Действие);
				    
			    	ОбработкаОжидания("ЗакрытьЗаписьВсехСобытий", 1);
			КонецЕсли;	
	    КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//*************************************
// необходимо для работы с объектом "Перехватчик", определения
// классов "Метаданные" и "КорректировкаЗаписейРегистров"
имяф=КаталогИБ()+"1cpp.dll"; 
Если ЗагрузитьВнешнююКомпоненту(имяф)=0 Тогда
	Сообщить("Ошибка при загрузке внешней компоненты: "+имяф);
КонецЕсли;
// --//-- для чтения данных реквизитов формы по идентификатору
// в процедурах синхронизации реквизитов
имяф=КаталогИБ()+"FormEx.dll";
Если ЗагрузитьВнешнююКомпоненту(имяф)=0 Тогда
	Сообщить("Ошибка при загрузке внешней компоненты: "+имяф);
КонецЕсли;     
// --//-- для записи/чтения xml-файлов
имяф=КаталогИБ()+"v7plus.dll";
Если ЗагрузитьВнешнююКомпоненту(имяф)=0 Тогда
	Сообщить("Ошибка при загрузке внешней компоненты: "+имяф);
КонецЕсли;
// --//-- для вызова атрибутов и методов программного контекста
// при обращению к набору движений к регистрам оперативного учета 
// в модулях проведения
//имяф=КаталогИБ()+"turbobl.dll";
//Если ЗагрузитьВнешнююКомпоненту(имяф)=0 Тогда
//	Сообщить("Ошибка при загрузке внешней компоненты: "+имяф);
//КонецЕсли;
// --//-- прямые запросы к иб 
имяф=КаталогИБ()+"1sqlite.dll";
Если ЗагрузитьВнешнююКомпоненту(имяф)=0 Тогда
	Сообщить("Ошибка при загрузке внешней компоненты: "+имяф);
КонецЕсли;

// включение флага перехвата событий глобального контекста
// в настройках 1с++
НастройкиВК = СоздатьОбъект("УправлениеНастройками");
НастройкиВК.Установить("ПерехватитьСобытияГК",1);
// установка перехвата события на проведение корректировки 
// записей регистров
ПерехватчикСобытий = СоздатьОбъект("КорректировкаЗаписейРегистров");
Перехватчик = СоздатьОбъект("Перехватчик");
Перехватчик.ПерехватитьСобытияПроведенияДокумента("КорректировкаЗаписейРегистров", ПерехватчикСобытий);

ВремяЗавершения = 0;
ПериодЗапускаРеглЗаданий = 15;

КоэффМодификацииПериода = 1;

ПрефиксАвтоНумерации("Документ.Развозка", "Пн-");
ПрефиксАвтоНумерации("Документ.ЗакрытиеСмены", "Зкс-");  
ПрефиксАвтоНумерации("Документ.Переоценка", "Прц-"); 
ПрефиксАвтоНумерации("Документ.Перемещение", "Прм-");
ПрефиксАвтоНумерации("Документ.ПередачаДС",	"Пдс-"); 
ПрефиксАвтоНумерации("Документ.КорректировкаТоварныхОстатков", "Кор-"); 
ПрефиксАвтоНумерации("Документ.Списание", "Сп-");

ПрефиксАвтоНумерации("Справочник.Номенклатура",	"Р-");
