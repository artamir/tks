Перем глПользователь Экспорт;

Перем ВыполняемыйМодуль Экспорт;

Перем глмУправлениеДоступом Экспорт, глмМетаданные Экспорт;

Функция глУстЗначВспомФункцияШаблона(А, Б)
	
	А = Б;
	
КонецФункции

Процедура глУстановПараметр(Параметр, Значение) Экспорт
	
	Шаблон("[глУстЗначВспомФункцияШаблона(" + СокрЛП(Параметр) + "," + Значение + ")]");
	
КонецПроцедуры

Функция глИницВнешМодуля(ТекстМодуля, КонтекстМодуля, ВыполняемыйМодуль) Экспорт
	
	ВыполняемыйМодуль = СоздатьОбъект("ВыполняемыйМодуль");	
	ВыполняемыйМодуль.УстановитьМодуль(ТекстМодуля);
	ВыполняемыйМодуль.ПрисоединитьТекущийМодуль();
	ВыполняемыйМодуль.НазначитьКонтекст(КонтекстМодуля);
	
	Если ВыполняемыйМодуль.КомпилироватьМодуль() = 0 Тогда
		Возврат 0;
	КонецЕсли;	
	
    Возврат ВыполняемыйМодуль.ВыполнитьМодуль();
	
КонецФункции

Процедура глИницГлобМодуля(ИмяФайла, ВыполняемыйМодуль) Экспорт
	
	ПутьКФайлу = КаталогИБ() 
		+ "ExtForms\UniReps\Modules\" 
			+ ИмяФайла + ".txt";
	
	ГлобМодуль = СоздатьОбъект("Текст");
	ГлобМодуль.Открыть(ПутьКФайлу);
    
	ТекстМодуля = "";
	
	Для Индекс = 1 по ГлобМодуль.КоличествоСтрок() Цикл
		ТекстМодуля = ТекстМодуля 
			+ ГлобМодуль.ПолучитьСтроку(Индекс) 
				+ РазделительСтрок;
	КонецЦикла;
	
	Если глИницВнешМодуля(ТекстМодуля, 
		Контекст, ВыполняемыйМодуль) = 0 Тогда
			Сообщить("Не удалось загрузить глобальный модуль """ 
				+ ИмяФайла + """", "!");
	КонецЕсли;	
	
КонецПроцедуры

Функция глПодклКлассОП(Имя, Модуль = "") Экспорт
	
	Попытка
		// возможно, класс, определенный пользователем уже объявлен 
		// в системе и теперь, нужно его проинстанцировать
		Класс = СоздатьОбъект(Имя);
	Исключение
		// каталог хранения модулей информационной базы
		Каталог = КаталогИБ() 
			+ "ExtForms\UniReps\Modules\";
		// класс не объявлен в системе, но, возможно в
		// каталоге ИБ уже есть файлы его определения
		ФайлОписания = Каталог + Имя + "Описание.txt";
	    Если ФС.СуществуетФайл(ФайлОписания) = 0 Тогда
			// если нет - записываем их
			//	описание:
			Текст = СоздатьОбъект("Текст");
			Текст.ДобавитьСтроку("class " + Имя + " = " 
				+ Имя + ".txt {}");
			Текст.Записать(ФайлОписания);
			//	модуль:
			ФайлМодуля = Каталог + Имя + ".txt";
			Текст.Очистить();
			Текст.ДобавитьСтроку(Модуль);
			Текст.Записать(ФайлМодуля);
		КонецЕсли;
		// подключения класса ОП динамически
		МетаИнфо = СоздатьОбъект("MetaInfoClasses");
		МетаИнфо.ЗагрузитьОписаниеКлассов(ФайлОписания);
		// инстанцирование...
		Класс = СоздатьОбъект(Имя);
	КонецПопытки;
	// экземпляр пользовательского класса
	Возврат Класс;
	
КонецФункции	

Процедура глПодклГлобМодуль(ИдОбработки) Экспорт
	
	// каталог хранения модулей информационной базы
	Каталог = КаталогИБ() 
		+ "ExtForms\UniReps\Modules\";
		
	ОткрОбрГлМодуля = глПодклКлассОП("ОткрОбрГлМодуля", 
		"Функция СобытиеГМ_ПриОткрытии(КонтФормы,ФлагЧтенияНастройки) Экспорт
		|	ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
		|	Попытка
		|		ФормаРасш.УстановитьФорму(КонтФормы.Форма);
		|	Исключение
		|		Сообщить(""ошибка записи обработчика "" + КонтФормы.Форма.Параметр);
		|		Возврат 0;
		|	КонецПопытки;
		|   Текст = СоздатьОбъект(""Текст"");
		|	Текст.ДобавитьСтроку(ФормаРасш.ТекстМодуля);
		|	Текст.Записать(КонтФормы.Форма.Параметр);
		|	Возврат 0;
		|КонецФункции");

    Перехватчик = СоздатьОбъект("Перехватчик");
    Перехватчик.ПерехватитьСобытияГлобальногоМодуля(ОткрОбрГлМодуля);
	ОткрытьФорму("Обработка." + ИдОбработки, Каталог + ИдОбработки + ".txt");
	глИницГлобМодуля(ИдОбработки, ВыполняемыйМодуль);
	глУстановПараметр(ИдОбработки, ВыполняемыйМодуль);
	Перехватчик.СнятьПерехватСобытийГлобальногоМодуля();
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	// загрузка глобальных модулей (уже после компиляции глоб. модуля, 
	// чтобы иметь возможность ссылаться на все его экспортные методы 
	// и переменные)
	Сервис = СоздатьОбъект("Сервис");
	Для Индекс = 1 По Метаданные.Обработка() Цикл
		Ид = Метаданные.Обработка(Индекс).Идентификатор;
		Если Лев(Ид, 3) = "глм" Тогда
			Состояние("Подключение глобального модуля """ + Ид + """");
			глПодклГлобМодуль(Ид);
			Сообщить(Шаблон("[" + Ид + ".Тест()]"));
		КонецЕсли;
		Состояние("");
	КонецЦикла;
	// установка текущего пользователя
	Если ПустоеЗначение(ИмяПользователя()) = 0 Тогда
		Спр = СоздатьОбъект("Справочник.Пользователи");
		Если Спр.НайтиПоКоду(ИмяПользователя()) = 0 Тогда
			Спр.Новый();
			Спр.Код = ИмяПользователя();
			Спр.Наименование = ИмяПользователя();
			Спр.Записать();
			Предупреждение("Пользователь зарегистрирован в справочнике пользователей!");
		КонецЕсли;
		глПользователь = Спр.ТекущийЭлемент();
		Спр = 0;   
	Иначе
		глПользователь = "";
		Предупреждение("Пользователь системы не определен!"); 
		ЗавершитьРаботуСистемы(0);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриОтменеПроведенияДокумента(Док)
	
	Если Док.Вид() = "КорректировкаЗаписейРегистров" Тогда
		Сообщить("Для отмены корректировки воспользуйтесь флажком ""ВклДвижения""", "!");
		СтатусВозврата(0);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПриУдаленииДокумента(Док, Режим)
	
	// переписать событие под удаление соответствующих сохраненных
	// движений документов, если таковые имеются
	Если Док.Вид() = "КорректировкаЗаписейРегистров" Тогда
		спрХранилищеЗначения = СоздатьОбъект("Справочник.ХранилищеЗначения");
		Если спрХранилищеЗначения.НайтиЭлемент(Док.ХранилищеДвижений) = 1 Тогда
			спрХранилищеЗначения.Удалить(0);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗавершенииРаботыСистемы()
	
	// снятие перехвата события на проведение корректировки 
	// записей регистров. если этого не сделать, при завершении
	// работы системы будет возникать ошибка
	Перехватчик=СоздатьОбъект("Перехватчик");
    Перехватчик.СнятьПерехватСобытийПроведенияДокумента("КорректировкаЗаписейРегистров");
	
КонецПроцедуры

//*************************************
// необходимо для работы с объектом "Перехватчик", определения
// классов "Метаданные" и "КорректировкаЗаписейРегистров"
имяф="1cpp.dll"; 
Если ЗагрузитьВнешнююКомпоненту(имяф)=0 Тогда
	Сообщить("Ошибка при загрузке внешней компоненты: "+имяф);
КонецЕсли;
// --//-- для чтения данных реквизитов формы по идентификатору
// в процедурах синхронизации реквизитов
имяф="FormEx.dll";
Если ЗагрузитьВнешнююКомпоненту(имяф)=0 Тогда
	Сообщить("Ошибка при загрузке внешней компоненты: "+имяф);
КонецЕсли;     
// --//-- для записи/чтения xml-файлов
имяф="v7plus.dll";
Если ЗагрузитьВнешнююКомпоненту(имяф)=0 Тогда
	Сообщить("Ошибка при загрузке внешней компоненты: "+имяф);
КонецЕсли;

// включение флага перехвата событий глобального контекста
// в настройках 1с++
НастройкиВК = СоздатьОбъект("УправлениеНастройками");
НастройкиВК.Установить("ПерехватитьСобытияГК",1);
// установка перехвата события на проведение корректировки 
// записей регистров
ПерехватчикСобытий = СоздатьОбъект("КорректировкаЗаписейРегистров");
Перехватчик = СоздатьОбъект("Перехватчик");
Перехватчик.ПерехватитьСобытияПроведенияДокумента("КорректировкаЗаписейРегистров", ПерехватчикСобытий);

ПрефиксАвтоНумерации("Документ.Развозка", "Пн-");
ПрефиксАвтоНумерации("Документ.ЗакрытиеСмены", "Зкс-");  
ПрефиксАвтоНумерации("Документ.Переоценка", "Прц-"); 
ПрефиксАвтоНумерации("Документ.Перемещение", "Прм-");
ПрефиксАвтоНумерации("Документ.ПередачаДС",	"Пдс-"); 
ПрефиксАвтоНумерации("Документ.КорректировкаТоварныхОстатков", "Кор-"); 
ПрефиксАвтоНумерации("Документ.Списание", "Сп-");

ПрефиксАвтоНумерации("Справочник.Номенклатура",	"Р-");
