Перем мСкладПД, блкСигнал;
Перем тзДанныеДокумента;
//*******************************************
Процедура ДвиженияПоПродажам(НаборДвижений)
    Перем тзИсточникСерий;
	// таблица продаж содержит, практически
	// все параметры сделки и может использоваться
	// для формирования других движений документов,
	// проверки сертификатов и формирования прочей
	// отчетности
	тзПродажи = НаборДвижений.Получить("Продажи");

	// получение значений реквизитов документа
	// без блокировки соответствующих таблиц
	Если глмРасчетныеДанные
		.ПолучитьДанныеОбъекта(ТекущийДокумент(), 
			1, тзДанныеДокумента) = 0 Тогда
	// не получилось собрать данные о документе			
				СтатусВозврата(0);
				Возврат;
	КонецЕсли;
	
	Если СтатусВСД = Перечисление.СтатусыВСД.Подписан Тогда
	// по подписанному документу подбор серий 
	// осуществлять только из собственных движений	
		тзПродажи.Выгрузить(тзИсточникСерий);	
		
	ИначеЕсли (Склад <> мСкладПД)
		ИЛИ (СтатусВСД <> Перечисление.СтатусыВСД.Проект) Тогда
	// определение источника для подбора серий
	// товаров: в оптовой реализации - табличная
	// часть данного документа, в прямой доставке 
	// - таб. часть перемещения на автосклад
		ОсновнойДокумент = глмСерииНоменклатуры
			.ОсновнойДокументПоРеализации(ТекущийДокумент());
		
		Если ОсновнойДокумент <> ТекущийДокумент() Тогда
	    
			Перемещение = глмСерииНоменклатуры
				.ПеремещениеПоРейсу(ОсновнойДокумент);
			
	// в перемещении на автосклад не допускается
	// наличие двух и более серий по одному товару.
	// это ограничение из предметной области есть
	// в постановке задачи
			Перемещение.ВыгрузитьТабличнуюЧасть(тзИсточникСерий);	
		КонецЕсли;
	КонецЕсли;		
    
	// данные по движениям по регистру нужны были 
	// на момент определения источника серий для 
	// подбора, в случае подписанных документов
	тзПродажи.УдалитьСтроки();
	
	тзТабЧасть = тзДанныеДокумента
		.Получить("РеквизитТабличнойЧасти");
	
	тзТабЧасть.ВыбратьСтроки();
	Пока тзТабЧасть.ПолучитьСтроку() = 1 Цикл

		тзПродажи.НоваяСтрока();
		тзПродажи.Товар = тзТабЧасть.Товар;
		
		Если ПустоеЗначение(тзИсточникСерий) = 1 Тогда
			тзПродажи.Серия = тзТабЧасть.Серия;
		Иначе
			НомСтр = 0;
			Если тзИсточникСерий.НайтиЗначение(тзТабЧасть.Товар, 
				НомСтр, "Товар") = 0 Тогда
	// на этапе проекта, не будем требовать строго
	// присутствие серий в выборе
			Иначе
				тзПродажи.Серия = тзИсточникСерий
					.ПолучитьЗначение(НомСтр, "Серия");	
			КонецЕсли;	
		КонецЕсли;	
        
		Если (ПустоеЗначение(тзПродажи.Серия) = 1) 
			и (глИспСерииПоУмолч = 1) Тогда
				тзПродажи.Серия = тзПродажи.Товар.схСерияПоУмолчанию;
		КонецЕсли;
				
		тзПродажи.Количество = тзТабЧасть.Количество 
			* тзТабЧасть.Коэффициент;

		тзПродажи.Вес = тзТабЧасть.Товар.ВесТовара 
			* тзПродажи.Количество / 1000;

		тзПродажи.Сумма = тзТабЧасть.Сумма;
        тзПродажи.Производитель = тзТабЧасть.Товар.Произв;
		
	КонецЦикла;
	
    // оказывается, нельзя выполнять эту операцию на 
	// пустой (отсутствие строк) таблице значений
	Если тзПродажи.КоличествоСтрок() > 0 Тогда
	// при проведении документа, блокируются все
	// таблицы, к значениям которых обращались
	// через реквизиты
		тзПродажи.Заполнить(тзДанныеДокумента
			.Получить("РеквизитШапки")
				.ПолучитьЗначение(1, "Клиент"), , , "Клиент");
				
		тзПродажи.Заполнить(тзДанныеДокумента
			.Получить("РеквизитШапки")
				.ПолучитьЗначение(1, "Фирма1"), , , "Фирма");
	КонецЕсли;
	
	тзПродажи.Свернуть("Фирма,Клиент,Товар,Серия,Производитель",
		"Вес,Количество,Себестоимость,Сумма");
	
	// скорректируем итог по сумме продаж документа
	СуммаДокумента = тзПродажи.Итог("Сумма");

	НаборДвижений.Установить("Продажи", тзПродажи);
	
КонецПроцедуры	

//*******************************************
Функция ПроверитьДвиженияПоСертификатам(НаборДвижений)
	
	тзПродажи = НаборДвижений.Получить("Продажи");
	
	// результат проверки изменения в составе
	// серий товара при (возможной) корректировке 
	// документа
	Рез = 1;
	
	// движения по сертификатам формируются при
	// переводе статуса документа с "проект" - а 
	// на "оформлен" (не автоматически, при переводе 
	// с "оформлен" на "подписан"), на момент 
	// проверки уже присутствуют
	тзСертификаты = НаборДвижений.Получить("Сертификаты");

    сзЗаменыКолонокПравой = СоздатьОбъект("СписокЗначений");
	сзЗаменыКолонокПравой.ДобавитьЗначение("Количество","Количество1"); 
	сзЗаменыКолонокПравой.ДобавитьЗначение("Вес","Вес1");

    тзСверкаКоличества = глмОбщиеФункции
		.ТаблицЛевоеСоединение(тзПродажи, тзСертификаты, 
			"""Товар"",""Серия""", сзЗаменыКолонокПравой);

	тзСверкаКоличества.ВыбратьСтроки();
	Пока тзСверкаКоличества.ПолучитьСтроку() = 1 Цикл

//	тзПродажи.ВыбратьСтроки();
//	Пока тзПродажи.ПолучитьСтроку() = 1 Цикл
//		
//		Если тзПродажи.Товар.схТип = 0 Тогда

		Если тзСверкаКоличества.Товар.схТип = 0 Тогда

//	// товар не подлежит сертификации (не указаны
//	// параметры товара в ИС Меркурий) и не может
//	// присутствовать в движении по сертификатам
			Продолжить;
//		КонецЕсли;	
//	
//		НомСтр = 0;
//	// поиск серии	
//		Если тзСертификаты.НайтиЗначение(тзПродажи.Серия, 
//			НомСтр, "Серия") = 0 Тогда

		ИначеЕсли ПустоеЗначение(тзСверкаКоличества
			.Количество1) = 1 Тогда

//	// серия не найдена - значит, добавлен новый
//	// товар либо в реализацию пошла другая серия
//	// уже указанного в ВСД товара
			глмОбщиеФункции.ОбработатьОшибку("10001", 
				"глмСерииНоменклатуры", Контекст);
				
			Сообщить("Товар: """ + тзПродажи.Товар 
				+ """, Серия: """ + тзПродажи.Серия
				+ """, Количество: " + тзПродажи.Количество);	
	
//	// данная ситуация является критической при 
//	// принятии изменений документа. в проведении
//	// будет отказано	
			Рез = 0;
				
//		ИначеЕсли тзПродажи.Количество 
//			> тзСертификаты.Количество Тогда

		ИначеЕсли тзСверкаКоличества.Количество >
			тзСверкаКоличества.Количество1 Тогда

//	// допускается корректировка количества по 
//	// серии в меньшую сторону (вычерк) о которой
//	// будет свидетельствовать расхождение в
//	// движениях по продажам и по сертификатам до
//	// корректировки ситуации
			глмОбщиеФункции.ОбработатьОшибку("10002", 
				"глмСерииНоменклатуры", Контекст);
			
			Сообщить("Товар: """ + тзПродажи.Товар 
				+ """, Серия: """ + тзПродажи.Серия
				+ """, Количество: " + тзПродажи.Количество);	

			Рез = 0;
			
		КонецЕсли;	
	КонецЦикла;

	Возврат Рез;
		
КонецФункции

//*******************************************
Процедура ДвиженияПоТоварамИРезервам(НаборДвижений)
	
	тзПродажи = НаборДвижений.Получить("Продажи");
	тзОстаткиТоваров = НаборДвижений.Получить("ОстаткиТоваров");
	тзРезервыТоваров = НаборДвижений.Получить("РезервыТоваров");

	тзОстаткиТоваров.УдалитьСтроки();
	тзРезервыТоваров.УдалитьСтроки();
	
	тзПродажи.ВыбратьСтроки();
	Пока тзПродажи.ПолучитьСтроку() = 1 Цикл
		
		тзОстаткиТоваров.НоваяСтрока();
		тзОстаткиТоваров.Товар = тзПродажи.Товар;
		тзОстаткиТоваров.Склад = Склад;
		тзОстаткиТоваров.ОстатокТовара = тзПродажи.Количество;
		тзОстаткиТоваров.Операция = Перечисление
			.ВидыОпераций.РеализацияТовара;
		
        Если (ДокументОснование.Вид() = "Счет") 
			И (ДокументОснование.Проведен() = 1) Тогда
	
			тзОстаткиТоваров.НоваяСтрока();
			тзОстаткиТоваров.Товар = тзПродажи.Товар;
			тзОстаткиТоваров.Склад = Склад;
			тзОстаткиТоваров.ОстатокТовара = тзПродажи.Количество;
			тзОстаткиТоваров.Операция = Перечисление
				.ВидыОпераций.РеализацияТовара;
				
		КонецЕсли;
	
	КонецЦикла;	
	
	НаборДвижений.Установить("ОстаткиТоваров", тзОстаткиТоваров);
	НаборДвижений.Установить("РезервыТоваров", тзРезервыТоваров);
	
КонецПроцедуры	

//*******************************************
Процедура ДвиженияПоВзаиморасчетамПокупателей(НаборДвижений)
	
	тзВзаиморасчеты = НаборДвижений.Получить("ВзаиморасчетыПокупателей");
	тзВзаиморасчеты.УдалитьСтроки();

	тзВзаиморасчеты.НоваяСтрока();

	Если ПризнакНакладной = Перечисление
		.ПризнРасхНакл.ВозвратПоставщику Тогда

		тзВзаиморасчеты.Операция = Перечисление
			.ВидыОпераций.ВозвратТовараПоставщику;

		тзВзаиморасчеты.Долг = - СуммаДокумента;
			
	Иначе

		тзВзаиморасчеты.Операция = Перечисление
			.ВидыОпераций.РеализацияТовара;

		тзВзаиморасчеты.Долг = СуммаДокумента;
			
	КонецЕсли;

	тзВзаиморасчеты.Клиент = тзДанныеДокумента.Получить("РеквизитШапки")
		.ПолучитьЗначение(1, "Клиент"); 

	тзВзаиморасчеты.Приход = 1;

	НаборДвижений.Установить("ВзаиморасчетыПокупателей", тзВзаиморасчеты);
	
КонецПроцедуры	

//*******************************************
Процедура ОбработкаПроведения(ПараметрПроведения=0)

	// документ для загрузки движений
	// пустой документ - только формирование
	// набора движений
	ТекДок = ПолучитьПустоеЗначение("Документ.РасходнаяНакладная");
		
	Если ПустоеЗначение(СтатусВСД) = 1 Тогда

		СтатусВСД = Перечисление.СтатусыВСД.Проект;
		
	ИначеЕсли СтатусВСД <> Перечисление.СтатусыВСД.Проект Тогда
    // получение текущих (автоудаление - откл) 
	// движений данного документа
		ТекДок = ТекущийДокумент();
		
	КонецЕсли;

	Если ПустоеЗначение(ПодотчОбъект) = 1 Тогда
	// необходимо установить подотчетный объект
	// если еще не был установлен
		ПодотчОбъект = Фирма1.ОсновнойПодотчОбъект;
	КонецЕсли;

	// формирование/загрузка набора движений
	глмКорректировкаЗаписейРегистров.ОтклДвижения = 0;
	глмКорректировкаЗаписейРегистров.ДатаДок = ДатаДок;
	глмКорректировкаЗаписейРегистров.КорректировкаЗаписейРегистров = ТекДок;
	глмКорректировкаЗаписейРегистров.ЗагрузитьНаборДвижений(ТекДок);

	НаборДвижений = глмКорректировкаЗаписейРегистров.НаборДвижений;
	
	// формирование продаж - основная таблица
	// по которой формируются (проверяются) 
	// все остальные
	ДвиженияПоПродажам(НаборДвижений);
    
	Если (СтатусВСД <> Перечисление.СтатусыВСД.Проект)
	// нужно исключить документы по второй части, 
	// их не будет в движениях по сертификатам и 
	// делать в них вычерки можно в любой момент
		И (ПустоеЗначение(ПодотчОбъект) = 0) Тогда
    // если корректируется уже проведенный
	// по ВСД документ, необходимо согласовать
	// состав и количество товаров по сериям
			Если ПроверитьДвиженияПоСертификатам(НаборДвижений) = 0 Тогда
	// существенно изменять состав и количество 
	// товаров по сериям можно только удалив ВСД
	// и переведя накладную в состояние "Проект"
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
	КонецЕсли;
    
	// прочие движения документа
	ДвиженияПоТоварамИРезервам(НаборДвижений);

	ДвиженияПоВзаиморасчетамПокупателей(НаборДвижений);
	
	// запись движений, контроль остатков,
	// где это необходимо
    СтатусВозврата(глмКорректировкаЗаписейРегистров
		.ЗаписатьНаборДвижений(Контекст));
	
	// поиск участка кода, приводящего 
	// к блокировке таблицы	
	//глмБлокировка.СнятьБлокНаЗапись(блкСигнал);

КонецПроцедуры

//*******************************************
Процедура ОбработкаУдаленияПроведения()
	
	Если СтатусВСД <> Перечисление.СтатусыВСД.Проект Тогда

	// снимать с проведения документ можно 
	// только удалив ВСД и переведя накладную 
	// в состояние "Проект"
		глмОбщиеФункции.ОбработатьОшибку("20006", 
			"глмСтатусыВСД", Контекст);
        
		СтатусВозврата(0);

	КонецЕсли;	
	
КонецПроцедуры

//*******************************************
мСкладПД = Константа.СкладПД;