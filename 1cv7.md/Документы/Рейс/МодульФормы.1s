Перем спВариантыЗаполнения;
Перем спЗаявки;
Перем мКонстСкладПД;
//=============================================
Функция ВзятьНомерТТ(ТекДок)
	
	Если ПустоеЗначение(ТекДок) = 0 Тогда
	    Возврат ТекДок.Клиент.НомерТТ;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции	
//=============================================
Функция ВзятьСумму(ТекДок)
	
	Если ПустоеЗначение(ТекДок) = 0 Тогда
		// по-хорошему, общий вес накладной, как и сумма - реквизит шапки.
		ГрДок = СоздатьОбъект("Документ.РасходнаяНакладная");
		ГрДок.НайтиДокумент(ТекДок);
		ГрДок.ВыбратьСтроки();
		ТекСумма = 0;
		Пока ГрДок.ПолучитьСтроку() = 1 Цикл
			ТекСумма=ГрДок.Сумма+ТекСумма;
		КонецЦикла;
		Возврат ТекСумма;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции	
//=============================================
Функция ВзятьВес(ТекДок)
	Если ПустоеЗначение(ТекДок) = 0 Тогда
		// по-хорошему, общий вес накладной, как и сумма - реквизит шапки.
		ГрДок = СоздатьОбъект("Документ.РасходнаяНакладная");
		ГрДок.НайтиДокумент(ТекДок);
		ГрДок.ВыбратьСтроки();
		Нетто = 0;
		Пока ГрДок.ПолучитьСтроку() = 1 Цикл
			Нетто=ГрДок.Коэффициент*ГрДок.Количество*ГрДок.Товар.ВесТовара/1000+Нетто;
		КонецЦикла;
		Возврат Нетто;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции	
//=============================================
Процедура ПересчитатьИтоги()
	
	ОбщаяСумма = Итог("Сумма");
	ОбщийВес = Итог("Вес");
	
КонецПроцедуры	
//=============================================
Процедура ОбновитьИтоги()
	
	Форма.ИтогСумма.Заголовок(Формат(ОбщаяСумма,"Ч15.2, "));
	Форма.ИтогВес.Заголовок(Формат(ОбщийВес,"Ч15.2, "));
	Форма.ПечАвтор.Заголовок(Автор.Наименование);
	
КонецПроцедуры	
//=============================================
Процедура ПриУдаленииСтроки()
	
	ПересчитатьИтоги();
	ОбновитьИтоги();
	
КонецПроцедуры	
//=============================================
Процедура ЗагрузитьМаршрут()
	Перем ВыбМаршрут;
	
	ТекстВопроса = "Взять маршрут из а-склада?";
	Если Вопрос(ТекстВопроса, "Да+Нет", 60) = "Да" Тогда
		ВыбМаршрут = Автосклад.Маршрут;
		Если ВыбМаршрут.Выбран() = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Текст = "Выбор маршрута";
		Если ВвестиЗначение(ВыбМаршрут, Текст, "Документ.Маршрут") = 0 Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
		
	Маршрут = СоздатьОбъект("Запрос");
	ТекстЗапроса = 	"//{{ЗАПРОС(Маршрут)
	|ОбрабатыватьДокументы все;
	|ТекущийДокумент = Документ.Маршрут.ТекущийДокумент;
	|Клиент = Документ.Маршрут.ТорговаяТочка;
	|Группировка Клиент упорядочить по Клиент.НомерТТ без групп;
	|Условие(ТекущийДокумент = ВыбМаршрут);
	|"//}}ЗАПРОС
    ;
	Если Маршрут.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Маршрут.Группировка(1); 
	
	СкладМоб = мКонстСкладПД;
	
	Заявки = СоздатьОбъект("Запрос");
	ТекстЗапроса = 	"//{{ЗАПРОС(Заявки)
	|Период с ДатаДок по ДатаДок;
	|Клиент = Документ.РасходнаяНакладная.Клиент;
	|Склад = Документ.РасходнаяНакладная.Склад;
	|ТекущийДокумент = Документ.РасходнаяНакладная.ТекущийДокумент;
	|Группировка Клиент упорядочить по Клиент.НомерТТ без групп;
	|Группировка ТекущийДокумент;
	|Условие(Склад = СкладМоб);
	|"//}}ЗАПРОС
    ;
	Если Заявки.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Заявки.Группировка(1);
	
	Пока 1=1 Цикл
		
		Пока Маршрут.ЗначениеУпорядочивания(1) 
			< Заявки.ЗначениеУпорядочивания(1) Цикл
			Если Маршрут.Группировка(1) = 0 Тогда
				Возврат;
			КонецЕсли;	
		КонецЦикла;	
		
		Пока Маршрут.ЗначениеУпорядочивания(1) 
			> Заявки.ЗначениеУпорядочивания(1) Цикл
			Если Заявки.Группировка(1) = 0 Тогда
				Возврат;
			КонецЕсли;	
		КонецЦикла;	

		Если Маршрут.ЗначениеУпорядочивания(1) 
			= Заявки.ЗначениеУпорядочивания(1) Тогда
			
			Пока Заявки.Группировка(2) = 1 Цикл
				НоваяСтрока();
				Заявка = Заявки.ТекущийДокумент;
				Сумма = ВзятьСумму(Заявки.ТекущийДокумент);
				Вес = ВзятьВес(Заявки.ТекущийДокумент);
			КонецЦикла;
			
			Если Маршрут.Группировка(1) = 0 Тогда
				Возврат;
			КонецЕсли;
			
			Если Заявки.Группировка(1) = 0 Тогда
				Возврат;
			КонецЕсли;	
		КонецЕсли;	

	КонецЦикла;	
	
КонецПроцедуры	
//=============================================
Процедура ЗагрузитьУчасток()
	Перем ВыбУчасток;
	
	Текст = "Выбор участка";
	Если ВвестиЗначение(ВыбУчасток, Текст, "Справочник.Контрагенты") = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Маршрут = СоздатьОбъект("Запрос");
	ТекстЗапроса = 	"//{{ЗАПРОС(Участок)
	|ОбрабатыватьДокументы все;
	|Обрабатывать НеПомеченныеНаУдаление;
	|Клиент = Справочник.Контрагенты.ТекущийЭлемент;
	|Группировка Клиент упорядочить по Клиент.НомерТТ;
	|Условие(Клиент в ВыбУчасток);
	|"//}}ЗАПРОС
    ;
	Если Маршрут.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Маршрут.Группировка(1); 
	
	СкладМоб = мКонстСкладПД;
	
	Заявки = СоздатьОбъект("Запрос");
	ТекстЗапроса = 	"//{{ЗАПРОС(Заявки)
	|Период с ДатаДок по ДатаДок;
	|Клиент = Документ.РасходнаяНакладная.Клиент;
	|Склад = Документ.РасходнаяНакладная.Склад;
	|ТекущийДокумент = Документ.РасходнаяНакладная.ТекущийДокумент;
	|Группировка Клиент упорядочить по Клиент.НомерТТ без групп;
	|Группировка ТекущийДокумент;
	|Условие(Склад = СкладМоб);
	|"//}}ЗАПРОС
    ;
	Если Заявки.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Заявки.Группировка(1);
	
	Пока 1=1 Цикл
		
		Пока Маршрут.ЗначениеУпорядочивания(1) 
			< Заявки.ЗначениеУпорядочивания(1) Цикл
			Если Маршрут.Группировка(1) = 0 Тогда
				Возврат;
			КонецЕсли;	
		КонецЦикла;	
		
		Пока Маршрут.ЗначениеУпорядочивания(1) 
			> Заявки.ЗначениеУпорядочивания(1) Цикл
			Если Заявки.Группировка(1) = 0 Тогда
				Возврат;
			КонецЕсли;	
		КонецЦикла;	

		Если Маршрут.ЗначениеУпорядочивания(1) 
			= Заявки.ЗначениеУпорядочивания(1) Тогда
			
			Пока Заявки.Группировка(2) = 1 Цикл
				НоваяСтрока();
				Заявка = Заявки.ТекущийДокумент;
				Сумма = ВзятьСумму(Заявки.ТекущийДокумент);
				Вес = ВзятьВес(Заявки.ТекущийДокумент);
			КонецЦикла;
			
			Если Маршрут.Группировка(1) = 0 Тогда
				Возврат;
			КонецЕсли;
			
			Если Заявки.Группировка(1) = 0 Тогда
				Возврат;
			КонецЕсли;	
		КонецЕсли;	

	КонецЦикла;	
	
КонецПроцедуры	
//=============================================
Процедура ПодборЗаявок()
	
	ВыгрузитьТабличнуюЧасть(спЗаявки, "Заявка");
	
	ОткрытьПодбор("Журнал.ЖурналОбщий", "ФормаСписка", , 1);
	
КонецПроцедуры
//=============================================
Процедура ОбработкаПодбора(Элемент, КонтФормы)
	
	Если Элемент.Вид() <> "РасходнаяНакладная" Тогда
	    Возврат;
	ИначеЕсли Элемент.Склад <> мКонстСкладПД Тогда
		Возврат;
	КонецЕсли;
	
	Если спЗаявки.Принадлежит(Элемент) = 0 Тогда
		НоваяСтрока();
		Заявка = Элемент;
		Сумма = ВзятьСумму(Элемент);
		Вес = ВзятьВес(Элемент);
		ПересчитатьИтоги();
		ОбновитьИтоги();
		
	    спЗаявки.ДобавитьЗначение(Элемент);
	КонецЕсли;
	
КонецПроцедуры	
//=============================================
Процедура Заполнить()
	Перем ВариантЗаполнения;

	Если спВариантыЗаполнения.ВыбратьЗначение(ВариантЗаполнения, , , , 1) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантЗаполнения = "по участку" Тогда
		ЗагрузитьУчасток();
		
	ИначеЕсли ВариантЗаполнения = "по заявкам (подбор)" Тогда
		ПодборЗаявок();
		
	КонецЕсли;	
	
	ПересчитатьИтоги();
	ОбновитьИтоги();
	
КонецПроцедуры  
//=============================================
Процедура Очистить()
	
	УдалитьСтроки();
	ПересчитатьИтоги();
	ОбновитьИтоги();
	
КонецПроцедуры	
//=============================================
Процедура Переместить()
	Перем Ч, М, С;
	
	Если Автосклад.Выбран()=0 ТОгда
		ВыбЗнач = "";
		Если ВвестиЗначение(выбЗнач,"Выберите Автосклад!","Справочник.МестаХранения")=0 Тогда
			СтатусВозврата(0);
			Возврат;
		Иначе
			Автосклад = выбЗнач;
			Экспедитор = выбЗНач.Экспедитор;
			ЗАписать();
		КонецЕсли;
		
	КонецЕсли;
	
	// запись
	Если Модифицированность() = 1 Тогда
		ТекстВопроса = "Перемещение возможно только на основании записанного документа. Записать?";
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
		    Возврат;
		КонецЕсли;
		Записать();
	КонецЕсли;	
	
	// поискать заявки на а-склад
	ТекстЗапроса = 	"//{{ЗАПРОС(УжеСформЗаявки)
	|Период с (ТекущаяДата()) по (ТекущаяДата());
	|ОбрабатыватьДокументы все;
	|ТекущийДокумент = Документ.РасходнаяНакладная.ТекущийДокумент;
	|Склад = Документ.РасходнаяНакладная.Склад;
	|Группировка ТекущийДокумент;
	|Условие(Склад = Автосклад);
	|"//}}ЗАПРОС
	;
	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
	    Сообщить("Не удалось выполнить запрос по уже оформленным заявкам", "!");
		Возврат;
	КонецЕсли;
	
	Если Запрос.Группировка(1) = 1 Тогда
		ТекстВопроса = "На склад уже оформлены документы. Продолжить?";
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// найти уже сформированное перемещение (д.б. единственное)
	Нашли = 0;
	
	ДокПерем = СоздатьОбъект("Документ.Перемещение");
	ДокПерем.АвтоВремяТекущее();
	ДокПерем.ВыбратьДокументы(ДатаДок, ДатаДок);
	Пока ДокПерем.ПолучитьДокумент() = 1 Цикл
		Если ДокПерем.Рейс = ТекущийДокумент() Тогда
		    Нашли = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	// проверить что перемещение не распечатано
	Если Нашли = 1 Тогда
	    ПечДок = СоздатьОбъект("Справочник.ПечатьДокументов");
		Если ПечДок.НайтиПоРеквизиту("Документ", ДокПерем.ТекущийДокумент(), 1) = 1 Тогда
			Если глЕстьПравоДоступа("РезервированиеТовара") = 1 Тогда
				ТекстВопроса = "Соответствующий рейсу """ 
					+ ДокПерем.ТекущийДокумент() 
						+ """ распечатан. Перезаполнить?";
				Если Вопрос(ТекстВопроса, "Да+Нет", 30) = "Нет" Тогда
					Возврат;
				КонецЕсли;	
			Иначе	
				Сообщить("Соответствующий рейсу """ 
					+ ДокПерем.ТекущийДокумент() 
						+ """ распечатан. Недостаточно прав.", "!");
				Возврат;		
			КонецЕсли;			
		КонецЕсли;	
	КонецЕсли;
	
	// заполнение шапки перемещения
	Если Нашли = 0 Тогда
		ДокПерем.Новый();
		ДокПерем.Фирма = Константа.ОсновнаяФирма;
		ДокПерем.Автор = Пользователь;
    	ДокПерем.ДатаДок = ДатаДок;
		ДокПерем.Склад = мКонстСкладПД;
		ДокПерем.СкладПолучатель = Автосклад;
		ДокПерем.Экспедитор = Экспедитор;
		ДокПерем.Валюта = Константа.ОсновнаяВалюта;
		ДокПерем.Курс = 1;
		ДокПерем.Дата_курса = ТекущаяДата();
		ДокПерем.Рейс = ТекущийДокумент();
	Иначе
		Попытка
			Если ДокПерем.Проведен() = 1 Тогда
		    	ДокПерем.СделатьНепроведенным();
			ИначеЕсли ДокПерем.ПометкаУдаления() = 1 Тогда
				ДокПерем.СнятьПометкуУдаления();
			КонецЕсли;
		Исключение
			Сообщить("Не удалось сформировать документ перемещения по причине """ 
				+ ОписаниеОшибки() + """. ");
			Возврат;	
		КонецПопытки;
		ДокПерем.УдалитьСтроки();
	КонецЕсли;
	
	// заполнение табличной части ...
	ДокЗаявки = СоздатьОбъект("Документ.РасходнаяНакладная");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ДокЗаявки.НайтиДокумент(Заявка) = 1 Тогда
			ДокЗаявки.ВыбратьСтроки();
			Пока ДокЗаявки.ПолучитьСтроку() = 1 Цикл
			    ДокПерем.НоваяСтрока();
				Для Инд = 1 По Метаданные.Документ("Перемещение")
					.РеквизитТабличнойЧасти() Цикл
						ИмяРекв = Метаданные.Документ("Перемещение")
							.РеквизитТабличнойЧасти(Инд).Идентификатор;
						Попытка
							ДокПерем.УстановитьАтрибут(ИмяРекв,ДокЗаявки.ПолучитьАтрибут(ИмяРекв));
						Исключение
						КонецПопытки;
				КонецЦикла;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТабЧасть = СоздатьОбъект("ТаблицаЗначений");
	ДокПерем.ВыгрузитьТабличнуюЧасть(ТабЧасть);
	ТАбЧАсть.НоваяКолонка("КодСоответствия");
	ТабЧасть.ВыбратьСтроки();
	Пока ТабЧасть.ПолучитьСтроку() = 1 Цикл
		ТабЧасть.Количество = ТабЧасть.Количество 
			* ТабЧасть.Коэффициент / ТабЧасть.Товар.КФП;
		ТабЧасть.Коэффициент = ТабЧасть.Товар.КФП;	
		ТабЧасть.УЕИ = ТабЧасть.Товар.УЕИ;   
		ТАбЧасть.КодСоответствия = ТабЧасть.Товар.КодСоответствияФас;
		
	КонецЦикла;	
	
	ТабЧасть.Свернуть("Един,Единица,Коэффициент,
		|Товар,УЕИ,КодСоответствия",
		"Количество, Сумма");
	
	ТабЧасть.НоваяКолонка("Цена");
	ТабЧасть.НоваяКолонка("ЦенаКор");	
		
	// округлить количество до коробок
	ТабЧасть.ВыбратьСтроки();
	Пока ТабЧасть.ПолучитьСтроку() = 1 Цикл
	    Если ТабЧасть.Товар.КФП > 1 Тогда
	        ТекКолво = ТабЧасть.Коэффициент * ТабЧасть.Количество;
			ТекКолво = ?(ТекКолво / ТабЧасть.Товар.КФП = Цел(ТекКолво / ТабЧасть.Товар.КФП),
				ТекКолво / ТабЧасть.Товар.КФП, Цел(ТекКолво / ТабЧасть.Товар.КФП) + 1);
			ТабЧасть.Количество = ТекКолво;
		КонецЕсли;
		ТабЧасть.Цена = Окр(ТабЧасть.Сумма / ТабЧасть.Количество / ТабЧасть.Коэффициент, 2); 
		ТабЧасть.ЦенаКор = Окр(ТабЧасть.Сумма / ТабЧасть.Количество 
			/ ТабЧасть.Коэффициент * ТабЧасть.Товар.ЗначК, 2);
	КонецЦикла;
	
	ТабЧасть.Свернуть("Един,Единица,Коэффициент,
		|Товар,УЕИ,Цена,ЦенаКор,КодСоответствия",
		"Количество, Сумма");
	
	ТабЧасть.Сортировать("КодСоответствия");
	
	ДокПерем.ЗагрузитьТабличнуюЧасть(ТабЧасть);
	
	// запись текущим временем
	ТекущееВремя(Ч, М, С);
		
	Попытка 
		ДокПерем.УстановитьВремя(Ч, М, С);
		ДокПерем.Записать();
		ДокПерем.Провести();
	Исключение
		Сообщить("Не удалось сформировать документ перемещения по причине """ 
			+ ОписаниеОшибки() + """. ");
		Возврат;	
	КонецПопытки;
	
	// перенос накладных с мобильного склада на автосклад и
	// запись текущим временем.
	//ТекущееВремя(Ч, М, С);
	ТекВрем = Ч * 60 * 60 + М * 60 + С;
	ТекВрем = ТекВрем + 1; // в полночь, надеюсь, никто перемещать 
	// не будет, т.к. неясно пока как в таком случае поступить.
	Ч = Цел(ТекВрем / 60 / 60);
	М = Цел((ТекВрем - Ч * 60 * 60) / 60);
	С = ТекВрем - Ч * 60 * 60 - М * 60;
	Ч = ?(Ч > 23, 0, Ч);
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ДокЗаявки.НайтиДокумент(Заявка) = 1 Тогда
			Попытка
				Если ДокЗаявки.Проведен() = 1 Тогда
				    ДокЗаявки.СделатьНепроведенным();
				КонецЕсли;
				ДокЗаявки.Склад = Автосклад;
				ДокЗаявки.ПризнакМоб = 3;
				ДокЗаявки.Записать();
				ДокЗаявки.УстановитьВремя(Ч, М, С);
				ДокЗаявки.Провести();
			Исключение
				Сообщить("Не удалось записать документ """ 
					+ ДокЗаявки.ТекущийДокумент() + """ по причине """ 
						+ ОписаниеОшибки() + """. ");	
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
	Форма.Обновить();
	
КонецПроцедуры	
//=============================================
Процедура ОтменитьПеремещение()
	Перем Ч, М, С;
	
	// найти уже сформированное перемещение (д.б. единственное)
	Нашли = 0;
	
	ДокПерем = СоздатьОбъект("Документ.Перемещение");
	ДокПерем.АвтоВремяТекущее();
	ДокПерем.ВыбратьДокументы(ДатаДок, ДатаДок);
	Пока ДокПерем.ПолучитьДокумент() = 1 Цикл
		Если ДокПерем.Рейс = ТекущийДокумент() Тогда
		    Нашли = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Нашли = 1 Тогда
		Попытка
			Если ДокПерем.Проведен() = 1 Тогда
				ДокПерем.СделатьНеПроведенным();
			КонецЕсли;
			ДокПерем.Удалить(0);
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
	// запись текущим временем
	ТекущееВремя(Ч, М, С);
	
	ДокЗаявки = СоздатьОбъект("Документ.РасходнаяНакладная");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ДокЗаявки.НайтиДокумент(Заявка) = 1 Тогда
			Попытка
				Если ДокЗаявки.Проведен() = 1 Тогда
					ДокЗаявки.СделатьНеПроведенным();    
				КонецЕсли;
				ДокЗаявки.Склад = мКонстСкладПД;
				ДокЗаявки.ПризнакМоб = 4;
				ДокЗаявки.Записать();
				ДокЗаявки.УстановитьВремя(Ч, М, С);
			Исключение
				
			КонецПопытки;	
		КонецЕсли;
	КонецЦикла;	
	
	Форма.Обновить();
	
КонецПроцедуры	
//=============================================
Процедура ПриОткрытии()
	
	Если Выбран() = 0 Тогда
	    ОтборМоб = 1;
		Автор = Пользователь;
	КонецЕсли;
	
	ОбновитьИтоги();
	
КонецПроцедуры	
//=============================================
Процедура ПриВыбореСклада()
	
	Экспедитор = Автосклад.Экспедитор;
	
	Если КоличествоСтрок() > 0 Тогда
	    ТекстВопроса = "Таблица заявок не пуста. Очистить?";
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) = "Да" Тогда
		    Очистить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//=============================================
Процедура ПриОкончанииРедактированияСтроки(НовСтр)
	
	Если Заявка.Выбран() = 0 Тогда
		Сообщить("Необходимо ввести заявку", "!");
		СтатусВозврата(0);
		Возврат;
	ИначеЕсли Заявка.Склад <> мКонстСкладПД Тогда
		//Сообщить("Необходимо ввести документ со склада ""мобильный""");
		//СтатусВозврата(0);
		//Возврат;
	КонецЕсли;	
	
	Сумма = ВзятьСумму(Заявка);
	Вес = ВзятьВес(Заявка);
	ПересчитатьИтоги();
	ОбновитьИтоги();
	
КонецПроцедуры
//=============================================
Процедура ПриЗаписи()
	
	// автосклад
	Если Автосклад.Выбран() = 0 Тогда
	    Сообщить("Не выбран автосклад", "!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// проверить единственность рейса на текущую дату
	Рейсы = СоздатьОбъект("Документ.Рейс");
	Рейсы.ВыбратьДокументы(ДатаДок, ДатаДок);
	Пока Рейсы.ПолучитьДокумент() = 1 Цикл
		Если (Рейсы.Автосклад = Автосклад) 
			и (Рейсы.ТекущийДокумент() <> ТекущийДокумент()) Тогда
				Сообщить("По автоскладу """ 
					+ Автосклад + """ уже сформирован рейс """ 
						+ Рейсы.ТекущийДокумент() + """", "!");
				//СтатусВозврата(0);
				//Возврат;
		КонецЕсли;
	КонецЦикла;		
	
	// проверить непересечение рейсов по заявкам
	НетОш = 1;
		
	Если КоличествоСтрок() > 0 Тогда
		ТекДок = ТекущийДокумент();
		
		спЗаявки = СоздатьОбъект("СписокЗначений");
		ВыгрузитьТабличнуюЧасть(спЗаявки, "Заявка");
		
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 	"//{{ЗАПРОС(Пересеч)
		|Период с ДатаДок по ДатаДок;
		|ОбрабатыватьДокументы все;
		|Рейс = Документ.Рейс.ТекущийДокумент;
		|Заявка = Документ.Рейс.Заявка;
		|Группировка Заявка;
		|Группировка Рейс;
		|Условие(Заявка в спЗаявки);
		|Условие(Рейс <> ТекДок);
		|"//}}ЗАПРОС
	    ;
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	    
		Пока Запрос.Группировка(1) = 1 Цикл
			НетОш = 0;
			Пока Запрос.Группировка(2) = 1 Цикл
				Сообщить("Пересечение по заявке """ 
					+ Запрос.Заявка + """ с рейсом """ 
						+ Запрос.Рейс + """", "!");
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	// заявка может быть отгружена 
	// на а-склад не через рейсы
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
	    Если (Заявка.Склад <> мКонстСкладПД) 
			и (Заявка.Склад <> Автосклад) Тогда
	        НетОш = 0;
			Сообщить("Заявка """ + Заявка 
				+ """ уже отпущена на склад """ 
					+ Заявка.Склад + """", "!");
	    КонецЕсли;
	КонецЦикла;
	
	Если НетОш = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;	
	
	// обеспечить единственность вхождения заявки в текущем рейсе
	ТабЧасть = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТабЧасть);
	
	ТабЧасть.Свернуть("Заявка", "");
	ЗагрузитьТабличнуюЧасть(ТабЧасть);
	
КонецПроцедуры	
//=============================================
Процедура ВводНового(Скопирован)

	// Французов
	СтатусВСД = Перечисление.СтатусыВСД.Проект;
	//\\

КонецПроцедуры

Процедура ВыборПечФормы()  
	
	Перем резвыбор,номерстроки;
	
	Список = СоздатьОбъект("СписокЗначений");	
	Список.ДобавитьЗначение("Печ1", "Сертификаты");	
	Список.ДобавитьЗначение("Печ2", "Статусы сертификатов");
    Список.ДобавитьЗначение("Печ3", "Суб. продукты сертификатов");
	Список.ДобавитьЗначение("Печ4", "Сертификаты (для вет.)");

	Если Список.ВыбратьЗначение(резвыбор, "", номерстроки, 60, 1) <> 1 Тогда
		Возврат;	
	КонецЕсли;     
	
	Парам = СоздатьОбъект("СписокЗначений");
	Парам.ДобавитьЗначение(ТекущийДокумент(),"Контекст");
	Парам.ДобавитьЗначение(1,"Устройство");
	Парам.ДобавитьЗначение(1,"КоличествоКопий"); 

	Если НомерСтроки = 1 Тогда 
		ИмяОтчета = "ExtForms\Сертификаты.ert"; 

	ИначеЕсли НомерСтроки = 2 Тогда 
		//ПечатьНакладная(); 
		ИмяОтчета = "ExtForms\ОшибкиСертификатов.ert";
		
	ИначеЕсли НомерСтроки = 3 Тогда 
		//ПечатьНакладная(); 
		ИмяОтчета = "ExtForms\СубПродукты.ert";
		
	ИначеЕсли НомерСтроки = 4 Тогда 
		//ПечатьНакладная(); 
		ИмяОтчета = "ExtForms\СертификатыВет.ert";
		
	КонецЕсли;  
	
	ОткрытьФорму("Отчет", Парам, КаталогИБ() + ИмяОтчета); 

КонецПроцедуры

Функция ВыбратьДанныеОперации(ОсновнойДокумент)
	
	ДанныеОперации = СоздатьОбъект("СписокЗначений");
	ДанныеОперации.ДобавитьЗначение(ОсновнойДокумент, "ОсновнойДокумент");
    
	СтрокаИБ = глмМетаданные.Ид2СтрокаИБ(глмМетаданные
		.Ссылка2Ид(ОсновнойДокумент));
	
	ТекстЗапроса = 	
	"SELECT 
	|	sp6313 AS [Документ $Документ.РасходнаяНакладная]
	|FROM 
	|	dt6315
	|WHERE 
	|	iddoc = '" + СтрокаИБ + "'
	|";
    
	ПодчиненныеДокументы = глмOLEDBQuery
		.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);

	ПодчиненныеДокументы.ВыбратьСтроки();
	                                    
	Пока ПодчиненныеДокументы.ПолучитьСтроку() = 1 Цикл 
		Если ПустоеЗначение(ПодчиненныеДокументы.Документ) = 1 Тогда
			ДанныеОперации.ДобавитьЗначение("20004", "Ошибка");
			Возврат ДанныеОперации;	
				
		ИначеЕсли ПодчиненныеДокументы.Документ.Проведен() = 0 Тогда
			ДанныеОперации.ДобавитьЗначение("20004", "Ошибка");
			Возврат ДанныеОперации;	
		
		ИначеЕсли ПодчиненныеДокументы.Документ.Склад = мКонстСкладПД Тогда	
			ДанныеОперации.ДобавитьЗначение("20007", "Ошибка");
			Возврат ДанныеОперации;	

		КонецЕсли;	
	КонецЦикла;	
	
	ДанныеОперации.ДобавитьЗначение(ПодчиненныеДокументы, 
		"ПодчиненныеДокументы");
	
	Возврат ДанныеОперации;
	
КонецФункции	

Процедура кнОформитьВСД()
	
	глмСтатусыВСД.ПередатьДанныеОперацииНаПодготовкуТранзакции(Контекст);
	
КонецПроцедуры

Процедура кнПринятьРезультат()

	тзОшибкиСертификатов = глмСерииНоменклатуры.ПолучитьРезультатОбработкиОперации(Контекст, "");

	тзОшибкиСертификатов.ВыбратьСтроки();
	Пока тзОшибкиСертификатов.ПолучитьСтроку() = 1 Цикл
		
		тКодОшибки = СтрЗаменить(тзОшибкиСертификатов
			.КодОшибки, ":", РазделительСтрок);
		
		КодОшибки = СтрПолучитьСтроку(тКодОшибки, 1);
		
		Если КодОшибки = "5.1" Тогда
			
			тзОшибкиСертификатов.КодОшибки = "0.9:" + глмСерииНоменклатуры
				.КодыОшибок.Получить("00016")
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	глмСерииНоменклатуры.ЗаписатьРезультатОбработкиОперации(тзОшибкиСертификатов);

КонецПроцедуры

Процедура кнУдалитьРезультат()
	
	тзОшибкиСертификатов = глмСерииНоменклатуры.ПолучитьРезультатОбработкиОперации(Контекст, "");
	
	тзОшибкиСертификатов.ВыбратьСтроки();
	Пока тзОшибкиСертификатов.ПолучитьСтроку() = 1 Цикл
		
		тКодОшибки = СтрЗаменить(тзОшибкиСертификатов
			.КодОшибки, ":", РазделительСтрок);
		
		КодОшибки = СтрПолучитьСтроку(тКодОшибки, 1);
		
		Если КодОшибки = "5.1" Тогда
			
			тзОшибкиСертификатов.КодОшибки = "2.1:" + глмСерииНоменклатуры
				.КодыОшибок.Получить("00012")
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	глмСерииНоменклатуры.ЗаписатьРезультатОбработкиОперации(тзОшибкиСертификатов);
	
КонецПроцедуры

//*************************************
// первичная проверка данных:
//	для заявок, с сертифицируемым товаром,
// 	должны быть заданы идентификаторы контрагентов;
//	в перемещении, по сертифицируемым товарам
//	должны быть заданы серии (вручную или 
//	автоподбором)
Процедура ПроверкаДанных() 
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица");
	
	Рез = 1;
	
	тзСертификаты = СоздатьОбъект("ТаблицаЗначений");
	тзСертификаты.НоваяКолонка("ПодотчОбъект"); 
	тзСертификаты.НоваяКолонка("Клиент");
	тзСертификаты.НоваяКолонка("Товар"); 
	//тзСертификаты.НоваяКолонка("Серия"); 
	тзСертификаты.НоваяКолонка("НачалоПроизводства");
	тзСертификаты.НоваяКолонка("ОкончаниеПроизводства");
	тзСертификаты.НоваяКолонка("НачалоУтилизации");
	тзСертификаты.НоваяКолонка("ОкончаниеУтилизации");
	тзСертификаты.НоваяКолонка("Вес");
	тзСертификаты.НоваяКолонка("Тип");
	тзСертификаты.НоваяКолонка("Продукт");
	тзСертификаты.НоваяКолонка("СубПродукт");
	тзСертификаты.НоваяКолонка("Номенклатура");
	
	// список сертифицируемых товаров
	сзТовары = СоздатьОбъект("СписокЗначений");
	
	Товары = СоздатьОбъект("Справочник.Номенклатура");
	
	Товары.ВыбратьЭлементыПоРеквизиту("ар", 0, 0, 0);
	Пока Товары.ПолучитьЭлемент() = 1 Цикл
		Если ПустоеЗначение(Товары.схТип) = 0 Тогда
			сзТовары.ДобавитьЗначение(Товары.ТекущийЭлемент());
		КонецЕсли;	
	КонецЦикла;	
    
	Документ = СоздатьОбъект("Документ");
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		
		Документ.НайтиДокумент(Заявка);
		
		Если ПустоеЗначение(Документ.Фирма1.схГУИдХС) = 1 Тогда
	// если фирма не настроена на передачу 
	// данных в ВетИС (2 часть) - такие
	// документы пропускаем сразу
			Продолжить;
		КонецЕсли;	
		
		Если ПустоеЗначение(Документ.ПодотчОбъект) = 1 Тогда
			Если Рез = 1 Тогда
				Таб.ВывестиСекцию("ЗаголовокОшибки");
			КонецЕсли;	
			Рез = 0;
			Таб.ВывестиСекцию("ОшибкаПодотчОбъекта");
		КонецЕсли;	
	// заявка, не содержащая сертифицируемый 
	// товар, при проверке, пропускается
		ЕстьСертТовар = 0;
		
		Документ.ВыбратьСтроки();
		Пока Документ.ПолучитьСтроку() = 1 Цикл
			Если сзТовары.Принадлежит(Документ.товар) = 1 Тогда
				ЕстьСертТовар = 1;
				//Прервать;
				Если Рез = 1 Тогда
					тзСертификаты.НоваяСтрока();
					тзСертификаты.ПодотчОбъект = Документ.ПодотчОбъект; 
					тзСертификаты.Клиент = Документ.Клиент;
					тзСертификаты.Товар = Документ.Товар; 
					тзСертификаты.Вес = Документ.Товар.ВесТовара / 1000
						* Документ.Количество * Документ.Коэффициент;
					тзСертификаты.Тип = Документ.Товар.схТип;
					тзСертификаты.Продукт = Документ.Товар.схПродукт;
					тзСертификаты.СубПродукт = Документ.Товар.схСубПродукт;
					тзСертификаты.Номенклатура = ?(ПустоеЗначение(Документ.Товар.схГУИД)=0,
						"(" + тзСертификаты.Товар.Код + ") """ 
						+ глПолнНаименованиеТовара(тзСертификаты.Товар) + """", "");
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		Если ЕстьСертТовар = 1 Тогда
			Клиент = Документ.Клиент;
			Если (ПустоеЗначение(Клиент.схГУИдХС) = 1)
			ИЛИ (ПустоеЗначение(Клиент.схГУИдПредприятия) = 1) Тогда
				Если Рез = 1 Тогда
					Таб.ВывестиСекцию("ЗаголовокОшибки");
				КонецЕсли;	
	// заявка содержит сертифицируемый товар,
	// но для клиента не задана связь с ВетИС
				Рез = 0;
				//Сообщить("Не задан идентификатор контрагента (" 
				//	+ Клиент.НомерТТ + ") """ + Клиент + """");
				Таб.ВывестиСекцию("ОшибкаКлиент");
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;	
	
	тзСертификаты.Сортировать("Товар*");
	
	// проверка заполнения серий в перемещении
	Перемещение = глмСерииНоменклатуры
		.ПеремещениеПоРейсу(ТекущийДокумент());
		
	Документ.НайтиДокумент(Перемещение);
	
	Документ.ВыбратьСтроки();
	Пока Документ.ПолучитьСтроку() = 1 Цикл
		Если сзТовары.Принадлежит(Документ.товар) = 1 Тогда
			Если ПустоеЗначение(Документ.Серия) = 1 Тогда
	// у сертифицируемого товара, в перемещении
	// не задана серия
				Если Рез = 1 Тогда
					Таб.ВывестиСекцию("ЗаголовокОшибки");
				КонецЕсли;	
				Рез = 0;
				//Сообщить("Не задана серия товара ("
				//	+ Документ.Товар.Код + ") """ 
				//	+ глПолнНаименованиеТовара(Документ.Товар) + """"); 
				Таб.ВывестиСекцию("ОшибкаСерия");
			КонецЕсли;
			Если Рез = 1 Тогда
				НС = 0;
				Если тзСертификаты
					.НайтиЗначение(Документ.Товар, 
						НС, "Товар") = 1 Тогда

					Пока НС <= тзСертификаты.КоличествоСтрок() Цикл
						тзСертификаты.ПолучитьСтрокуПоНомеру(НС);
	// показать выпускаемую серию по документу					
						Если тзСертификаты.Товар = Документ.Товар Тогда
							//тзСертификаты.Серия = Документ.Серия; 
							тзСертификаты.НачалоПроизводства = Документ.Серия.НачалоПроизводства;
							тзСертификаты.ОкончаниеПроизводства = Документ.Серия.ОкончаниеПроизводства;
							тзСертификаты.НачалоУтилизации = Документ.Серия.НачалоУтилизации;
							тзСертификаты.ОкончаниеУтилизации = Документ.Серия.ОкончаниеУтилизации;
						Иначе
							Прервать;
						КонецЕсли;	
						НС = НС + 1;
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	

	Если Рез = 1 Тогда
		тзСертификаты.Свернуть("ПодотчОбъект,Клиент,Серия,Тип,Продукт,СубПродукт,Номенклатура,НачалоПроизводства,ОкончаниеПроизводства,НачалоУтилизации,ОкончаниеУтилизации", "Вес");
		тзСертификаты.Сортировать("ПодотчОбъект*,Клиент*");
		
		ПодотчОбъект = "";
		Клиент = "";

		Таб.ВывестиСекцию("Заголовок");

		тзСертификаты.ВыбратьСтроки();
		Пока тзСертификаты.ПолучитьСтроку() = 1 Цикл
			
			Если ПодотчОбъект <> тзСертификаты.ПодотчОбъект Тогда
	// вывести группировку по подотч. объектам
				Таб.ВывестиСекцию("ПодотчОбъект");
				ПодотчОбъект = тзСертификаты.ПодотчОбъект;
			КонецЕсли;

			Если Клиент <> тзСертификаты.Клиент Тогда
	// вывести группировку по клиенту
				Таб.ВывестиСекцию("Клиент");
				Клиент = тзСертификаты.Клиент;
			КонецЕсли;
			
	// вывести строку детализации		
			Таб.ВывестиСекцию("ДетальнаяСтрока");
		КонецЦикла;	
    КонецЕсли;
	
	Таб.Опции(0, 0, 0, 0);
	
	Таб.Показать();
	
КонецПроцедуры

Процедура ЗаполнитьПодотчОбъект()
	
	Документ = СоздатьОбъект("Документ");
	
	ВыбФирма = ВыбПодотчОбъект.Владелец;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		Если Заявка.Фирма1 = ВыбФирма Тогда
			Документ.НайтиДокумент(Заявка);
			Если Документ.Блокировка(1) = 0 Тогда
	        	// при безуспешной попытка заблокировать документ,
				// откладываем его обработку 
				Сообщить("Документ """ + Заявка 
				+ """ в данный момент редактируется, исправьте данные, позже, вручную");
				Продолжить;
			Иначе
				// по определению статуса блокировки документа,
				// освобождаем его для дальнейшей работы
				Документ.Блокировка(0);
			КонецЕсли;	

			Документ.ПодотчОбъект = ВыбПодотчОбъект;
			Попытка
				Документ.Записать();
			Исключение
				Сообщить(ОписаниеОшибки(), "!");
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПриВыбореАвтомобиля()
	
	Документ = СоздатьОбъект("Документ");
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		Если Заявка.Автомобиль <> Автомобиль Тогда
			Документ.НайтиДокумент(Заявка);
			Если Документ.Блокировка(1) = 0 Тогда
	        	// при безуспешной попытка заблокировать документ,
				// откладываем его обработку 
				Сообщить("Документ """ + Заявка 
				+ """ в данный момент редактируется, исправьте данные, позже, вручную");
				Продолжить;
			Иначе
				// по определению статуса блокировки документа,
				// освобождаем его для дальнейшей работы
				Документ.Блокировка(0);
			КонецЕсли;	

			Документ.Автомобиль = Автомобиль;
			Попытка
				Документ.Записать();
			Исключение
				Сообщить(ОписаниеОшибки(), "!");
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	
//=============================================
спВариантыЗаполнения = СоздатьОбъект("СписокЗначений");
спВариантыЗаполнения.ДобавитьЗначение("по участку");
спВариантыЗаполнения.ДобавитьЗначение("по заявкам (подбор)");

спЗаявки = СоздатьОбъект("СписокЗначений");
мКонстСкладПД = Константа.СкладПД;