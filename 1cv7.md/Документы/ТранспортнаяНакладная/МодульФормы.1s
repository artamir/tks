Перем Режим; // сигнальная переменная 
// для модуля проведения, чтобы 
// отличить контекст модуля от 
// контекста формы документа
Перем НачДата, КонДата;

//*******************************************
Процедура ПриОткрытии()
	ПриЗаписиПерепроводить(1);
КонецПроцедуры

//*******************************************
Процедура ВводНового()
    
   	ЗаполнитьШапку(Контекст);

   	СтатусВСД = Перечисление.СтатусыВСД.Проект;

КонецПроцедуры

//*******************************************
Процедура ОбработкаВыбораЗначения(ВыбЗнач, ИдентЭлемДиалога, ФлагСтандОбр)
	
	//ФлагСтандОбр = 0;
	
	Если ИдентЭлемДиалога = "ПодотчОбъект" Тогда
		
		Фирма1 = ВыбЗнач.Владелец;
		
	ИначеЕсли ИдентЭлемДиалога = "Получатель" Тогда
		
		Если ПустоеЗначение(ВыбЗнач.Клиент) = 1 Тогда
			
			Сообщить("В поднадзорной площадке не задан покупатель", "!");
			
			СтатусВозврата(0);
			
		Иначе
			
			Клиент = ВыбЗнач.Клиент;
	
		КонецЕсли;	

	КонецЕсли;	
	
КонецПроцедуры

//*******************************************
Функция СформироватьТекстЗапросаВыборкиДокументов(Тип)
	
	Если Тип = "Документ.РасходнаяНакладная" Тогда
		Возврат 
			"SELECT
			|	Накладная.iddoc AS [doc $Документ.РасходнаяНакладная]
			|FROM
			|	$Документ.РасходнаяНакладная AS Накладная
			|	INNER JOIN 1sjourn AS _1sj
			|		ON _1sj.iddoc = Накладная.iddoc
			|		AND
			|			DTOS(_1sj.date) BETWEEN '" 
			+ Формат(НачДата, "ДГГГГММДД") + "' AND '" 
			+ Формат(КонДата, "ДГГГГММДД") + "' 
			|	LEFT JOIN $ДокументСтроки.Рейс AS Рейс
			|		ON $ДокументСтроки.Рейс.Заявка = Накладная.iddoc
			|WHERE
			|	$Документ.РасходнаяНакладная.Склад <> '    3V   ' AND 
			|		ISNULL(Рейс.iddoc)
			|ORDER BY
			|	$Документ.РасходнаяНакладная.АвтоподборСерий
			|";
		
	Иначе
		Возврат 
			"SELECT
			|	d.iddoc AS [doc $" + Тип + "]
			|FROM
			|	$" + Тип + " AS d
			|	INNER JOIN 1sjourn AS _1sj
			|		ON _1sj.iddoc = d.iddoc
			|		AND
			|			DTOS(_1sj.date) BETWEEN '" 
			+ Формат(НачДата, "ДГГГГММДД") + "' AND '" 
			+ Формат(КонДата, "ДГГГГММДД") + "'
			|";
			
	КонецЕсли;
	
КонецФункции

//*******************************************
Процедура ВыбратьДокументы(Тип, тзДок)
	
	ТекстЗапроса = СформироватьТекстЗапросаВыборкиДокументов(Тип);
	Выборка = глмOLEDBQuery.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);	
    
	Выборка.ВыбратьСтроки();
	Пока Выборка.ПолучитьСтроку() = 1 Цикл
		
		Док = Выборка.doc;
		
		Если Док.СтатусВСД = Перечисление.СтатусыВСД.Подписан Тогда
	// пропускаем документы, по которым сертификаты 
	// уже оформленны в ИС "Меркурий.ХС"
			Продолжить;
			
		ИначеЕсли Док.Вид() = "РасходнаяНакладная" Тогда
			Если Док.ПодотчОбъект <> Получатель Тогда
	// отбор по подотчетному объекту в форме отчета, 
	// нет смысла пропускать такой документ до отбора 
	// движений по сертификатам по подотчетному объекту
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		
		тзДок.НоваяСтрока();
		тзДок.ОсновнойДокумент = Док;
		
	КонецЦикла;	
	
КонецПроцедуры

//*******************************************
Процедура ВыбратьДвижениеДокумента(тзДвижения, ОснДок, Док)
	
	Если Док.ПодотчОбъект <> Получатель Тогда
	// отбор по подотчетному объекту в форме отчета, 
	// нет смысла пропускать такой документ до отбора 
	// движений по сертификатам по подотчетному объекту
		Возврат;
	КонецЕсли;
	
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		
		ТекТовар = Док.Товар;

		Если (ПустоеЗначение(ТекТовар.схТип) = 0) 
			И (ТекТовар.Произв.схФормВСД <> 0) Тогда
	// проверка возможности формирования ветеринарного 
	// сертификата по товару	
				тзДвижения.НоваяСтрока();
				тзДвижения.Товар = ТекТовар;
				// Французов 24.12.19 : у нас есть опция "пропускать незаполненные серии"
				//тзДвижения.Серия = ?(ПустоеЗначение(Док.Серия) = 0, Док.Серия,
				//	ТекТовар.схСерияПоУмолчанию);  
				тзДвижения.Серия = Док.Серия;
				Если ПустоеЗначение(тзДвижения.Серия) = 1 Тогда
					Если глИспСерииПоУмолч = 1 Тогда
						тзДвижения.Серия = ТекТовар.схСерияПоУмолчанию;
					КонецЕсли;	
				КонецЕсли;	
				//\\	
				тзДвижения.Коэффициент = Док.Коэффициент;
				тзДвижения.Количество = Док.Количество; 
				тзДвижения.Вес = Док.Количество * Док.Коэффициент 
					* ТекТовар.ВесТовара / 1000;
				тзДвижения.Сумма = Док.Сумма; 
				тзДвижения.ДокИсточник = Док;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

//*******************************************
Процедура ВыбратьДвижения(тзДок, тзДвижения)
	
	тзДок.ВыбратьСтроки();
	Пока тзДок.ПолучитьСтроку() = 1 Цикл
		Если тзДок.ОсновнойДокумент.Вид() = "Рейс" Тогда
	// формирование данных отчета происходит не 
	// из движений документа, а из наполнения табличных 
	// частей документов
			тзДок.ОсновнойДокумент.ВыбратьСтроки();
			Пока тзДок.ОсновнойДокумент.ПолучитьСтроку() = 1 Цикл
				ВыбратьДвижениеДокумента(тзДвижения, 
					тзДок.ОсновнойДокумент, 
						тзДок.ОсновнойДокумент.Заявка);
			КонецЦикла;	
		Иначе
			ВыбратьДвижениеДокумента(тзДвижения, 
				тзДок.ОсновнойДокумент, тзДок.ОсновнойДокумент);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

//*******************************************
Процедура ЗаполнитьПоДокументам()
	Перем ВыбЧисло;
	
	Если ВвестиЧисло(ВыбЧисло, 
		"Введите глубину просмотра рейсов", 
			2, 0, 60) = 0 Тогда
				Возврат;
	КонецЕсли;	
	
	КонДата = ПолучитьДатуТА();
	
	НачДата = ТекущаяДата() - ВыбЧисло;
	
	Сообщить("Обрабатываются документы за период: " 
		+ НачДата + " - " + КонДата);
	
	тзДок = СоздатьОбъект("ТаблицаЗначений");
	// таблица основных документов в терминах оформления 
	// ветеринарных сертификатов (рейс, накладная...)
	тзДок.НоваяКолонка("ОсновнойДокумент");

	ВыбратьДокументы("Документ.Рейс", тзДок);
	ВыбратьДокументы("Документ.РасходнаяНакладная", тзДок);
	
	Таблица = СоздатьОбъект("ТаблицаЗначений");
    // таблица движений на базе остатков товаров и 
	// неоформленных документов (спиывающий товарный 
	// остаток в учетной системе)
	Таблица.НоваяКолонка("Товар"); 
	Таблица.НоваяКолонка("Серия");  
	Таблица.НоваяКолонка("Коэффициент");
	Таблица.НоваяКолонка("Количество"); 
	Таблица.НоваяКолонка("Вес");
	Таблица.НоваяКолонка("Сумма"); 
	Таблица.НоваяКолонка("ДокИсточник");

	ВыбратьДвижения(тзДок, Таблица);	
	
    ЗагрузитьТабличнуюЧасть(Таблица);	
	
КонецПроцедуры

//*******************************************
Процедура ЗаполнитьПоОшибкам()
    
	Если Модифицированность() = 1 Тогда
		Предупреждение("Для продолжения, документ необходимо записать", 5);
		Возврат;
	Конецесли;	
	
	стрДатаДок = Формат(ДатаДок, "ДГГГГММДД");
	
	//стрИдДок = глмМетаданные.Ид2СтрокаИБ(глмМетаданные.Ссылка2Ид(ТекущийДокумент()));
	
	ТекстЗапроса = 	"SELECT
					|	Сертификаты.iddoc AS [ДокИсточник $Документ.РасходнаяНакладная], 
					|	$Сертификаты.Товар AS [Товар $Справочник.Номенклатура], 
					|	$Сертификаты.Серия AS [Серия $Справочник.схСерииНоменклатуры], 
					|	$Сертификаты.Количество AS Количество
					|FROM
					|	(SELECT
					|		Рег.iddoc AS iddoc,
					|		$Рег.Товар AS Товар,
					|		$Рег.Серия AS Серия
					|	FROM
					|		$Регистр.ОшибкиСертификатов AS Рег
					|	WHERE
					|		DTOS(Рег.Date) = '" + стрДатаДок + "'
					|			AND LEFT($Рег.КодОшибки, 4) = '4.6:') AS Ошибки
					|	INNER JOIN $Регистр.Сертификаты AS Сертификаты
					|		ON Сертификаты.iddoc = Ошибки.iddoc 
					|			AND $Сертификаты.Товар = Ошибки.Товар 
					|				AND $Сертификаты.Серия = Ошибки.Серия
					|";
		
	Таблица = глмOLEDBQuery.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);
	
	Таблица.НоваяКолонка("Коэффициент"); 
	Таблица.НоваяКолонка("Вес");
	
	Таблица.ВыбратьСтроки();
	Пока Таблица.ПолучитьСтроку() = 1 Цикл
		
		Таблица.Коэффициент = Таблица.Товар.ЗначК;
		
		Количество = Цел(Таблица.Количество / Таблица.Коэффициент);
		
		Таблица.Количество = ?(Количество = Таблица.Количество 
			/ Таблица.Коэффициент, Количество, Количество + 1);
			
		Таблица.Вес = Таблица.Товар.ВесТовара / 1000 
			* Таблица.Коэффициент * Таблица.Количество;	
		
	КонецЦикла;	
	
	ЗагрузитьТабличнуюЧасть(Таблица);	
		
КонецПроцедуры	

//*************************************
Процедура ВыборВариантаЗаполнения()  
	
	Перем резвыбор,номерстроки;
	
	Список = СоздатьОбъект("СписокЗначений");	
 	Список.ДобавитьЗначение("Печ3", "По документам");	
	Список.ДобавитьЗначение("Печ4", "По ошибкам при формировании");

	Если Список.ВыбратьЗначение(резвыбор, "", номерстроки, 60, 1) <> 1 Тогда
		Возврат;	
	КонецЕсли;     
	
	Если НомерСтроки = 1 Тогда 
		
		ЗаполнитьПоДокументам();
		
	ИначеЕсли НомерСтроки = 2 Тогда 
		
		ЗаполнитьПоОшибкам();
		
	КонецЕсли;  
	
КонецПроцедуры

//*************************************
Процедура ВыборПечФормы()  
	
	Перем резвыбор,номерстроки;
	
	Список = СоздатьОбъект("СписокЗначений");	
 	Список.ДобавитьЗначение("Печ3", "Сертификаты");	
	Список.ДобавитьЗначение("Печ4", "Статусы сертификатов");

	Если Список.ВыбратьЗначение(резвыбор, "", номерстроки, 60, 1) <> 1 Тогда
		Возврат;	
	КонецЕсли;     
	
	Если НомерСтроки = 1 Тогда 
		Парам = СоздатьОбъект("СписокЗначений");
		Парам.ДобавитьЗначение(ТекущийДокумент(),"Контекст");
		Парам.ДобавитьЗначение(1,"Устройство");
		Парам.ДобавитьЗначение(1,"КоличествоКопий"); 
		ОткрытьФорму("Отчет",Парам,КаталогИБ()+"ExtForms\Сертификаты.ert"); 
		Возврат;
	ИначеЕсли НомерСтроки = 2 Тогда 
		Парам = СоздатьОбъект("СписокЗначений");
		Парам.ДобавитьЗначение(ТекущийДокумент(),"Контекст");
		Парам.ДобавитьЗначение(1,"Устройство");
		Парам.ДобавитьЗначение(1,"КоличествоКопий"); 
		ОткрытьФорму("Отчет",Парам,КаталогИБ()+"ExtForms\ОшибкиСертификатов.ert"); 
		Возврат;
	
	КонецЕсли;  
	
КонецПроцедуры

//*************************************
Функция ВыбратьДанныеОперации(ОсновнойДокумент)
    
	ДанныеОперации = СоздатьОбъект("СписокЗначений");
	ДанныеОперации.ДобавитьЗначение(ОсновнойДокумент, "ОсновнойДокумент");
	
	Возврат ДанныеОперации;
	
КонецФункции	

//*******************************************
Процедура кнОформитьВСД()
		
	глмСтатусыВСД.ПередатьДанныеОперацииНаПодготовкуТранзакции(Контекст);
	
КонецПроцедуры

//*******************************************
Процедура кнУдалитьВСД()

	глмСтатусыВСД.ПередатьДанныеОперацииНаУдалениеТранзакции(Контекст);

КонецПроцедуры

//*******************************************
Процедура кнОтправитьПовторно()
	
	глмСерииНоменклатуры.ОтправитьНаПовторнуюСертификацию(Контекст, "");
	
КонецПроцедуры
