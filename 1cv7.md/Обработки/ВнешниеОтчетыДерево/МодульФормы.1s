Перем аДерево, рФорма, сзКолДерева, 
	хмлПарсер, хмлНаборСхем, хмлКорень;
Перем блкОбновления, ФормВысота, ФормШирина, ФормМакс, 
	ФормМин, ФормЛево, ФормВерх; // костыль еще тот...	
//*******************************************
Функция СоздатьУзел(Куст)
	
	Куст.НоваяСтрока();
	
	Куст.Узлы = СоздатьОбъект("ТаблицаЗначений");
	
	Возврат Куст;
	
КонецФункции	
//*******************************************
Функция СоздатьКуст(Куст)
		
	Куст.Очистить();
	
	Для Й = 1 По сзКолДерева.РазмерСписка() Цикл
		
		Куст.НоваяКолонка(сзКолДерева
			.ПолучитьЗначение(Й));
			
	КонецЦикла;	
	
	Возврат Куст;
	
КонецФункции	
//*******************************************
Процедура ИерархияПодразделения(хмлПарсер, хмлУзел, Подразделение = "", Список = "") Экспорт
	Перем хмлТекУзел;
	
	Если Список = "" Тогда

		Список = СоздатьОбъект("СписокЗначений");

	КонецЕсли;
	
	Подразделения = СоздатьОбъект("Справочник.Подразделения");

	Если Подразделение <> "" Тогда

		Подразделения.ИспользоватьРодителя(Подразделение);

		хмлУзел = хмлПарсер
			.createElement(СтрЗаменить(Подразделение
				.Наименование, " ", "_"));
				
	КонецЕсли;
			
	Подразделения.ВыбратьЭлементы();
	
	Пока Подразделения.ПолучитьЭлемент() = 1 Цикл
		
		ИерархияПодразделения(хмлПарсер, хмлТекУзел, 
			Подразделения.ТекущийЭлемент(), Список);
			
		Если Список.Принадлежит(Подразделения
			.ТекущийЭлемент()) = 0 Тогда

			Список.ДобавитьЗначение(Подразделения
				.ТекущийЭлемент());
				
			хмлУзел.appendChild(хмлТекУзел);	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	
//*******************************************
Процедура ДостроитьИерархиюДаннымиОбОтчетах(хмлПарсер)
	
	Текст = СоздатьОбъект("Текст");
	
	ФайлОписания = ФС.НайтиПервыйФайл(КаталогИб() 
		+ "ExtForms\*.efx");
	
	Пока ПустаяСтрока(ФайлОписания) = 0 Цикл
	
		Текст.Открыть(КаталогИб() + "ExtForms\" + ФайлОписания);
		
		Для Й = 1 По Текст.КоличествоСтрок() Цикл
			
			ТекСтрока = Текст.ПолучитьСтроку(Й);
			
			ЦиклПервый = 1;
			//
			хмлУзел = хмлПарсер;
			//
			Пока 1=1 Цикл
				
				Поз = Найти(ТекСтрока, "\");
				
				Если Поз = 0 Тогда
					Если ЦиклПервый = 0 Тогда
						
						хмлУзел = хмлУзел.appendChild(хмлПарсер
							.createElement(СтрЗаменить(ТекСтрока, " ", "_")));
						
						//хмлУзел.text = СтрЗаменить(Врег(ФайлОписания), 
						//	".EFX", ".ERT"); - текст видят все "родители"
						глмХМЛ.ДобавитьАтрибут(хмлПарсер, хмлУзел, "path", 
							СтрЗаменить(Врег(ФайлОписания), ".EFX", ".ERT"));
						
					КонецЕсли;	

					Прервать;
				Иначе
					
					КодУзла = СтрЗаменить(Лев(ТекСтрока, Поз - 1), " ", "_");
					
					//Если ЦиклПервый = 1 Тогда
						//хмлВыборка = хмлПарсер.SelectNodes("//" + КодУзла);
						хмлВыборка = ?(хмлУзел = хмлПарсер, 
							хмлУзел.SelectNodes("descendant-or-self::" + КодУзла), 
								хмлУзел.SelectNodes("child::" + КодУзла));
								
						Если хмлВыборка.length <> 0 Тогда
							
							хмлУзел = хмлВыборка.item(0);
							
						//Иначе
						//	Прервать;
						//	
						//КонецЕсли;
					Иначе
						
						хмлУзел = хмлУзел.appendChild(хмлПарсер
							.createElement(КодУзла));
						
					КонецЕсли;
										
					ТекСтрока = Прав(ТекСтрока, 
						СтрДлина(ТекСтрока) - Поз);
					
				КонецЕсли;
				
				ЦиклПервый = 0;
				
			КонецЦикла;	
		КонецЦикла;	
		
		ФайлОписания = ФС.НайтиСледующийФайл();
		
	КонецЦикла;
	
	//глмХМЛ.ВывестиДокументВФайл(хмлПарсер, "c:\1c\out.xml");
	
КонецПроцедуры	
//*******************************************
Функция ВывестиХМЛВДеревоЗначений(хмлУзел, Ветка, Уровень=0) Экспорт
	Перем Куст, Узел;
	
	Куст = СоздатьКуст(Ветка);
	
	Если Ветка = Дерево Тогда
		Узел = СоздатьУзел(Куст);
		Узел.Код = хмлУзел.tagName;
		Куст = СоздатьКуст(Узел.Узлы);
	КонецЕсли;
	
	ТекУровень = Уровень + 1;
	
	хмлВыборка = хмлУзел.selectNodes("./*");
	Для Й = 0 По хмлВыборка.length - 1 Цикл
				
		Узел = СоздатьУзел(Куст);
		Узел.Код = СтрЗаменить(хмлВыборка
			.item(Й).tagName, "_", " ");
			
		//Узел.Файл = хмлВыборка.item(Й)
		//	.getAttribute("path");
		
		ТекУровень = Макс(ТекУровень, 
			ВывестиХМЛВДеревоЗначений(хмлВыборка
				.item(Й), Узел.Узлы, Уровень + 1));
		
	КонецЦикла;	
	
	// свертка узла
	Куст.Свернуть("1,2,3","");
	//\\
	
	Возврат ТекУровень;
	
КонецФункции	
//*******************************************
Функция ВывестиХМЛВТаблицу(хмлУзел, Куст = "") Экспорт
	
	Куст = ?(Куст<>"", Куст, СоздатьКуст(Дерево));

	хмлВыборка = хмлУзел.selectNodes("./*");
	Для Й = 0 По хмлВыборка.length - 1 Цикл
	    
		Если хмлВыборка.item(Й).childNodes.length = 0 Тогда

			Узел = СоздатьУзел(Куст);
			Узел.Код = СтрЗаменить(хмлВыборка
				.item(Й).tagName, "_", " ");

		КонецЕсли;
			
		ВывестиХМЛВТаблицу(хмлВыборка.item(Й), Куст);
		
	КонецЦикла;
	
	// свертка узла
	Куст.Свернуть("1,2,3","");
	//\\
	
	Возврат 1;
	
КонецФункции	
//*******************************************
Процедура УстановитьВидимость()
	
	Форма.тФайл.Заголовок("");
	
	Форма.ВыбУровень.Доступность(Число(ВидДерева));
	
КонецПроцедуры	
//*******************************************
Процедура СортироватьДеревоЗначений(Ветка) Экспорт
	
	Попытка
		Ветка.Сортировать("Код");
	Исключение
		Возврат;
	КонецПопытки;	
	
	Ветка.ВыбратьСтроки();
	
	Пока Ветка.ПолучитьСтроку() = 1 Цикл
		СортироватьДеревоЗначений(Ветка.Узлы);
	КонецЦикла;	
	
КонецПроцедуры	
//*******************************************
Функция ПерейтиКУзлу(Путь)
	
	тПуть = СтрЗаменить(Путь, "/", РазделительСтрок);
	
	Узел = Дерево;
	
	Для Й = 1 По СтрКоличествоСтрок(тПуть) - 1 Цикл
		
		Узел = Узел.ПолучитьЗначение(Число(СтрПолучитьСтроку(тПуть, 
			Й)), "Узлы");
		
	КонецЦикла;	
	
	Узел.ПолучитьСтрокуПоНомеру(СтрПолучитьСтроку(тПуть, 
		СтрКоличествоСтрок(тПуть)));
		
	Возврат Узел;	
	
КонецФункции	
//*******************************************
Процедура РазвернутьВеткуДереваДоУровня(Путь = "", Уровень = 99999) Экспорт
	
	Путь = ?(Путь = "", "1", Путь);
	
	Если СтрКоличествоСтрок(СтрЗаменить(Путь, 
		"/", РазделительСтрок)) > Уровень Тогда
			Возврат;
	КонецЕсли;	
	
	аДерево.РазвернутьУзел(Путь);
	
	Узел = ПерейтиКУзлу(Путь);
	
	Для Й = 1 По Узел.Узлы.КоличествоСтрок() Цикл
		
		РазвернутьВеткуДереваДоУровня(Путь + "/" + Й, Уровень);
		
	КонецЦикла;
	
КонецПроцедуры	
//*******************************************
Процедура СвернутьВеткуДерева(Путь = "") Экспорт
	
	Путь = ?(Путь = "", "1", Путь);
	
	аДерево.СвернутьУзел(Путь);
	
	Узел = ПерейтиКУзлу(Путь);
	
	Для Й = 1 По Узел.Узлы.КоличествоСтрок() Цикл
		
		СвернутьВеткуДерева(Путь + "/" + Й);
		
	КонецЦикла;
	
КонецПроцедуры	
//*******************************************
//Процедура ОкноНаПереднийПлан()
//	
//	ВыбКонт.Обновить();
//	
//	рФорма.ОбработкаОжидания("ОкноНаПереднийПлан", 0);
//	
//КонецПроцедуры	
//*******************************************
Функция ИзмененРазмерФормы()
	
	Рез = 0;
	
	рФорма = СоздатьОбъект("РасширениеФормы");
	рФорма.УстановитьФорму(Форма);
    
    Если (рФорма.Высота <> ФормВысота) 
		или (рФорма.Ширина <> ФормШирина) 
			или (рФорма.Максимизирована <> ФормМакс) 
				или (рФорма.Минимизирована <> ФормМин) 
					или (рФорма.Лево <> ФормЛево) 
						или (рФорма.Верх <> ФормВерх) Тогда
							Рез = 1;
	КонецЕсли;	
	
	ФормВысота = рФорма.Высота; ФормШирина = рФорма.Ширина;
		ФормМакс = рФорма.Максимизирована; ФормМин
			= рФорма.Минимизирована; ФормЛево = рФорма.Лево;
				ФормВерх = рФорма.Верх;
	
	Возврат Рез;
	
КонецФункции	
//*******************************************
Процедура Действие_Развернуть() 
	
	РазвернутьВеткуДереваДоУровня("", 99999);	
	
	ВыбУровень.ТекущаяСтрока(ВыбУровень.РазмерСписка());
	
КонецПроцедуры	
//*******************************************
Процедура Действие_Свернуть() 
	
	СвернутьВеткуДерева("");	
	
	ВыбУровень.ТекущаяСтрока(1);
	
КонецПроцедуры
//*******************************************
Процедура ПриНажатииЛевойКнопкиНадДеревом(НомерСтроки, НомерКолонки)
	
//	Если ВидДерева = 1 Тогда
//		
//		Путь = СтрЗаменить(аДерево.ТекущаяСтрокаДерева(),
//			"/", РазделительСтрок);
//		
//		хмлУзел = хмлКорень.selectNodes("//" 
//			+ Пользователь.Подразделение).item(0);
//			
//		Для Й = 2 По СтрКоличествоСтрок(Путь) Цикл
//			хмлУзел = хмлУзел.childNodes
//				.item(Число(СтрПолучитьСтроку(Путь, 
//					Й)) - 1);
//		КонецЦикла;
//
//	Иначе
//	
//		стрПоиска = СтрЗаменить(Дерево.ПолучитьЗначение(аДерево
//			.ТекущаяСтрокаДерева(), "Код"), " ", "_");
	
	Путь = СтрЗаменить(аДерево.ТекущаяСтрокаДерева(),
		"/", РазделительСтрок);
	
	Узлы = Дерево;
	Для Й = 1 По СтрКоличествоСтрок(Путь) - 1 Цикл
		Узлы.ПолучитьСтрокуПоНомеру(СтрПолучитьСтроку(Путь, Й));
		Если ТипЗначенияСтр(Узлы.Узлы) = "" Тогда
			// достигли крайних потомков дерева
			Прервать;
		Иначе
			Узлы = Узлы.Узлы;	
		КонецЕсли;
	КонецЦикла;
    
	нСтроки = СтрПолучитьСтроку(Путь, 
		СтрКоличествоСтрок(Путь));
	
	стрПоиска = СтрЗаменить(Узлы
		.ПолучитьЗначение(нСтроки, "Код"), 
			" ", "_");
					
	хмлУзел = хмлКорень.selectNodes("//" 
		+ стрПоиска).item(0);
	
//	КонецЕсли;
		
	Файл = хмлУзел.getAttribute("path");
	
	Если СокрЛП(Файл) = "" Тогда
		Файл = "<<" + хмлУзел.tagName + ">>";
	КонецЕсли;

	Форма.тФайл.Заголовок(Файл);	
	
КонецПроцедуры	
//*******************************************
Процедура ПриДвойномНажатииЛевойКнопки(сост, х, у)
	
	ВыбАтрибут = рФорма.ПолучитьАтрибутПоКоординатам(х, у);
	
    Если ТипЗначенияСтр(ВыбАтрибут) = "АтрибутФормы" Тогда
		Попытка
			глИницВнешМодуля("Действие_" 
				+ ВыбАтрибут.Идентификатор + "();", Контекст, "");	
		Исключение
				
		КонецПопытки;	
    КонецЕсли;
		
КонецПроцедуры
//*******************************************
Процедура ПриВыбореУровня()
	
	СвернутьВеткуДерева("");
	
	РазвернутьВеткуДереваДоУровня("", 
		ВыбУровень.ТекущаяСтрока());
	
	Активизировать("кнОбновить");
		
КонецПроцедуры	
//*******************************************
Процедура ПриВыбореСтрокиДерева()
	
	//Путь = СтрЗаменить(аДерево.ТекущаяСтрокаДерева(),
	//	"/", РазделительСтрок);
	//
	//Узлы = Дерево;
	//Для Й = 1 По СтрКоличествоСтрок(Путь) - 1 Цикл
	//	Узлы.ПолучитьСтрокуПоНомеру(СтрПолучитьСтроку(Путь, Й));
	//	Если ТипЗначенияСтр(Узлы.Узлы) = "" Тогда
	//		// достигли крайних потомков дерева
	//		Прервать;
	//	Иначе
	//		Узлы = Узлы.Узлы;	
	//	КонецЕсли;
	//КонецЦикла;
    //
	//нСтроки = СтрПолучитьСтроку(Путь, 
	//	СтрКоличествоСтрок(Путь));
	//
	//ИмяФайла = Узлы.ПолучитьЗначение(нСтроки, "Файл");
	ИмяФайла = Форма.тФайл.Заголовок();
	Если Лев(ИмяФайла, 1) = "<" Тогда
		Возврат;
	КонецЕсли;
	//\\	
	
	РасшФайла = Прав(ИмяФайла, 3);
	Если РасшФайла = "ERT" Тогда
		ВыбКонт = СоздатьОбъект("СписокЗначений");
		//ВыбКонт.ДобавитьЗначение(Узлы.ПолучитьЗначение(нСтроки, 
		//	"Код"), "КодПодразделения");
		
		Если ФС.СуществуетФайл(КаталогИб() 
			+ "ExtForms\" + ИмяФайла) = 1 Тогда
			
				ОткрытьФорму("Отчет", ВыбКонт, КаталогИб() 
					+ "ExtForms\" + ИмяФайла);
				
				//рФорма.ОбработкаОжидания("ОкноНаПереднийПлан", 1);
				//ВыбКонт.Обновить();
				//Сообщить("Обновил");
		Иначе
			
		КонецЕсли;
	ИначеЕсли РасшФайла = "TXT" Тогда
		Текст = СоздатьОбъект("Текст");
		Текст.Открыть(КаталогИб() + "ExtForms\" + ИмяФайла);
     	Текст.Показать(ИмяФайла, "");
	КонецЕсли;
	
	блкОбновления = 1;
	
КонецПроцедуры	
//*******************************************
Процедура Заполнить()
	
	Если глмХМЛ.СоздатьЭлементДокумента(хмлПарсер, 
		хмлНаборСхем, хмлКорень, "ROOT", "windows-1251") = 0 Тогда
			Возврат;
	КонецЕсли;		
	
	ИерархияПодразделения(хмлПарсер, хмлКорень, "", "");
	
	ДостроитьИерархиюДаннымиОбОтчетах(хмлПарсер);
	
	хмлУзел = хмлКорень.selectNodes("//" 
		+ глПользователь.Подразделение).item(0);
	
	ТекУровень = ?(ВидДерева=0, ВывестиХМЛВТаблицу(хмлУзел),
		ВывестиХМЛВДеревоЗначений(хмлУзел, Дерево));
	
	СортироватьДеревоЗначений(Дерево);
	
	ВыбУровень.УдалитьВсе();
	
	Для Й = 1 По ТекУровень Цикл
		
		ВыбУровень.ДобавитьЗначение(Й);
		
	КонецЦикла;	
	
	ВыбУровень.ТекущаяСтрока(1);
	
КонецПроцедуры	
//*******************************************
Процедура Обновить()
	
	УстановитьВидимость();
	
	Попытка
		//Дерево.УстановитьПараметрыКолонки("Код"
		//	, , , , , (рФорма.Ширина - 10) / 6 * 0.5); 

		аДерево.ОбновитьДерево();
        
		ПриВыбореУровня();
	Исключение
			
	КонецПопытки;	
	
КонецПроцедуры
//*******************************************
Процедура Сформировать()
    
	Заполнить();
	
	Обновить();
	
КонецПроцедуры
//*******************************************
Процедура ПриВыбореВидаДерева()
	
	Сформировать();
	
КонецПроцедуры	
//*******************************************
Процедура ПослеОткрытия()
	
	рФорма = СоздатьОбъект("РасширениеФормы");
	рФорма.УстановитьФорму(Форма);
	
	аДерево=СоздатьОбъект("АтрибутФормы");
    
	аДерево.УстановитьАтрибут(Форма,"Дерево");
    
	аДерево.ПерехватитьТаблицуЗначений();
    
	аДерево.ОпцииДерева(1,1);
    
	Сформировать();
	
КонецПроцедуры
//*******************************************
//Процедура ПриИзмененииРазмераОкна(ТипСобытия, Ширина, Высота)
//
//	Если (ТипСобытия = 2) 
//	// с этим параметром, вообще непонятный момент:
//	// тип события и изменения в параметрах Ширина 
//	// и Высота в событиях, когда выбрана другая
//	// развернутая на весь экран форма и когда 
//	// нажата кнопка восстановить положение окна
//	// текущей формы - одинаковы. Разделить эти два
//	// события нельзя?
//		//и (ИзмененРазмерФормы() <> 0) 
//		Тогда
//			Если блкОбновления = 0 Тогда
//				Обновить();		
//			Иначе
//				блкОбновления = 0;
//			КонецЕсли;	
//	КонецЕсли;	
//	
//КонецПроцедуры	
//*******************************************
сзКолДерева = СоздатьОбъект("СписокЗначений");

сзКолДерева.ИзСтрокиСРазделителями("""Узлы"","""",""Код""");

блкОбновления = 0;