Перем спConVFP;
Перем тПарам Экспорт;
//*******************************************
Функция Тест()
	
	Возврат """глмOLEDBQuery"" - подключен";
	
КонецФункции
//*******************************************
Функция  Connect(стрДействие = "New", oledb = "", стрКаталог = "", чCloseVFP = 1, чALL = 0)
	
	Если стрДействие = "New" Тогда
		Если спConVFP.РазмерСписка() = 0 Тогда
			oledb = СоздатьОбъект("OLEDBData");
			
			стрConnect="  
			|Provider=VFPOLEDB.1;
			//|SET Deleted=Yes;
			|Null = Yes;
			|Exclusive = No;
			|SourceType = DBF;
			|Data Source=""" + ?(стрКаталог<>"",стрКаталог,КаталогИБ()) + """;
			|Mode=ReadWrite;
			|Extended Properties="""";
			|User ID="""";
			|Password="""";
			|Mask Password=False;
			|Collating Sequence=MACHINE;
			|CODEPAGE=1251;
			|OLE DB Services=0;
			|DSN="""";";   
			
			Если oledb.Connect(стрConnect) = 0 Тогда
				Сообщить("Ответ драйвера: " + ОписаниеОшибки());
				Возврат 0;
			КонецЕсли;
			
			спConVFP.ДобавитьЗначение(oledb);
		Иначе   
			oledb = спConVFP.ПолучитьЗначение(1);
		КонецЕсли;	
	Иначе
		Если чALL = 1 Тогда
			Для чК = 1 По спConVFP.РазмерСписка() Цикл
				oledb = спConVFP.ПолучитьЗначение(чК);
				oledb.Close();			
			КонецЦикла;	                
			спConVFP.УдалитьВсе();
		ИначеЕсли чCloseVFP = 1 тогда
			Если ТипЗначенияСтр(oledb) = "OLEDBData" Тогда
				чПозиция = спConVFP.НайтиЗначение(oledb);
				Если чПозиция > 0 Тогда
					спConVFP.УдалитьЗначение(чПозиция);
				КонецЕсли;	
				oledb.Close();			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат oledb;

КонецФункции
//*******************************************
Процедура ОчиститьПараметры() Экспорт
	
	тПарам.УдалитьСтроки();

КонецПроцедуры
//*******************************************
Процедура ДобавитьПараметр(Тип, Длина, Точность, Значение = "", Имя = "")
	
	тПарам.НоваяСтрока();
	тПарам.Имя = Имя; 
	тПарам.Тип = Тип; 
	тПарам.Длина = Длина;
	тПарам.Точность = Точность;
	тПарам.Значение = Значение;
	
КонецПроцедуры
//*******************************************
Процедура ДобавитьЗначениеПараметра(Имя, Значение) Экспорт
	
	Если ТипЗначенияСтр(Значение) = "Строка" Тогда
		ДобавитьПараметр(129, СтрДлина(Значение), 0, Значение, Имя);
		
	ИначеЕсли ТипЗначенияСтр(Значение) = "Число" Тогда
		СтрЗнач = Строка(Значение);
		СтрЗнач = СтрЗаменить(СтрЗнач, ".", РазделительСтрок);
		СтрЗнач = СтрЗаменить(СтрЗнач, ",", РазделительСтрок);
		ДобавитьПараметр(131, СтрДлина(СтрПолучитьСтроку(СтрЗнач, 1)), 
			СтрДлина(СтрПолучитьСтроку(СтрЗнач,2)), Значение, Имя);
		
	ИначеЕсли ТипЗначенияСтр(Значение) = "Дата" Тогда
		ДобавитьПараметр(133, 0, 0, Значение, Имя);	
	Иначе
		М = СоздатьОбъект("Метаданные");
		ДобавитьПараметр(129, 9, 0, М.Ид2СтрокаИБ(М.Ссылка2Ид(Значение)), Имя);
		
	КонецЕсли;	
	
КонецПроцедуры	
//*******************************************
Функция ВыполнитьИнструкцию(strSQL, стрКаталог = "", ЗакрСоед = 0, чNoLock = 0, чNoUpdBuff = 0, чIsDML = 0) Экспорт
	
	Ответ = 0;
	Если чIsDML = 0 Тогда
		Ответ = СоздатьОбъект("ТаблицаЗначений");
		//Ответ = СоздатьОбъект("ИндексированнаяТаблица");
	КонецЕсли;
	
	Если МонопольныйРежим() = 1 Тогда
		Сообщить("Монопольный режим", "!");
		Возврат Ответ;
	КонецЕсли;

	oledb = Connect("New", "", стрКаталог);
	Если oledb <> 0 Тогда
		oleCommand = oledb.CreateCommand();
		Если чNoLock = 1 Тогда
			oleCommand.Execute("Exec('SET TABLEVALIDATE TO 0')");
		КонецЕсли;
		Если чNoUpdBuff = 1 Тогда
			oleCommand.Execute("Exec('SET REFRESH TO 0,0')");
		КонецЕсли;
	    тПарам.ВыбратьСтроки();
		Пока тПарам.ПолучитьСтроку() = 1 Цикл
			oleCommand.AddParam(1, тПарам.Тип, 
				тПарам.Длина, тПарам.Точность);
		КонецЦикла;
		oleCommand.Prepare(strSQL);
		тПарам.ВыбратьСтроки();
		Пока тПарам.ПолучитьСтроку() = 1 Цикл
			oleCommand.SetParam(тПарам.НомерСтроки, 
				тПарам.Значение);
		КонецЦикла;
		Попытка	
			Если чIsDML = 0 Тогда
				oleCommand.ExecuteStatement(, Ответ, 1);
			Иначе
				Ответ = oleCommand.Execute();
			КонецЕсли;
		Исключение
		    глмЛогСистемы
				.ЗаписьВЖурнал("=================", 
					"", "", "oledbErr");
			глмЛогСистемы
				.ЗаписьВЖурнал(ОписаниеОшибки(), 
					"", "", "oledbErr");
		    глмЛогСистемы
				.ЗаписьВЖурнал(strSQL, 
					"", "", "oledbErr");
		    глмЛогСистемы
				.ЗаписьВЖурнал("Параметры:", 
					"", "", "oledbErr");
			тПарам.ВыбратьСтроки();
			Пока тПарам.ПолучитьСтроку() = 1 Цикл
				глмЛогСистемы.ЗаписьВЖурнал("" + 
					тПарам.Имя 		+ " " + 
					тПарам.Тип 		+ " " + 
					тПарам.Длина 	+ " " +
					тПарам.Точность + " " +
					тПарам.Значение, 
						"", "", "oledbErr");
			КонецЦикла;
			Если чIsDML = 0 Тогда
				Ответ.НоваяКолонка("oledbErr", , , , ОписаниеОшибки());
			Иначе
				Сообщить(ОписаниеОшибки());
				Ответ = -1;
			КонецЕсли;	
		КонецПопытки;
		oleCommand.Unprepare();
		oleCommand.Close();
		Connect("Close", oledb, ЗакрСоед);
	КонецЕсли;

	Возврат Ответ;
	
КонецФункции	
//*******************************************
Функция ТекстОшибки(Ответ) Экспорт
	Перем ТекстОшибки;
	
	Попытка
		Ответ.ПолучитьПараметрыКолонки("oledbErr", , , , ТекстОшибки);
	Исключение
		ТекстОшибки = "Нет данных";
	КонецПопытки;
		
	Возврат ТекстОшибки;	
	
КонецФункции	
//*******************************************
спConVFP = СоздатьОбъект("СписокЗначений");

тПарам = СоздатьОбъект("ТаблицаЗначений");
тПарам.НоваяКолонка("Имя"); 
тПарам.НоваяКолонка("Тип"); 
тПарам.НоваяКолонка("Длина");
тПарам.НоваяКолонка("Точность");
тПарам.НоваяКолонка("Значение");
	
Попытка
	oledb = СоздатьОбъект("OLEDBData");
		
Исключение
	Если ЗагрузитьВнешнююКомпоненту("1cpp.dll") = 0 Тогда
		Сообщить("Не удалось загрузить 1cpp. Ошибка!");
	КонецЕсли;	
КонецПопытки;	
