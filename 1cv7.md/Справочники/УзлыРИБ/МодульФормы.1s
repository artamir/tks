Перем аДерево, рФорма, сзКолДерева, 
	хмлПарсер, хмлНаборСхем, хмлКорень;
Перем блкОбновления, ФормВысота, ФормШирина, ФормМакс, 
	ФормМин, ФормЛево, ФормВерх; // костыль еще тот...	
//*******************************************
Функция СоздатьУзел(Куст)
	
	Куст.НоваяСтрока();
	
	Куст.Узлы = СоздатьОбъект("ТаблицаЗначений");
	
	Возврат Куст;
	
КонецФункции	
//*******************************************
Функция СоздатьКуст(Куст)
		
	Куст.Очистить();
	
	Для Й = 1 По сзКолДерева.РазмерСписка() Цикл
		
		Куст.НоваяКолонка(сзКолДерева
			.ПолучитьЗначение(Й));
			
	КонецЦикла;	
	
	Возврат Куст;
	
КонецФункции	
//*******************************************
Процедура ИерархияОбъектов(хмлПарсер, хмлУзел) Экспорт
		
	ТекстЗапроса = 	"SELECT 
					|	jrn.iddoc,  
					|	jrn.iddocdef, 
					|	upd.dwnldid 
					|FROM 
					|	1supdts AS upd
					|	INNER JOIN 1sjourn AS jrn
					|		ON jrn.iddoc = upd.objid
					|WHERE 
					|	dbsign ='" + Код 
					+ "' AND dwnldid <> '    -1'";
		
	ТЗ = глмOLEDBQuery.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);
	
	ТЗ.НоваяКолонка("Объект");
	ТЗ.НоваяКолонка("Вид");
	ТЗ.НоваяКолонка("Представление");
	
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		
		ТЗ.Объект = глмМетаданные.КодИБ2Ссылка(12, 
			ТЗ.iddocdef, ТЗ.iddoc);
		
		ТЗ.Вид = ТЗ.Объект.Вид();
		
		ТЗ.Представление = СтрЗаменить(ТЗ
			.Объект, " ", "_"); 
		
		ТЗ.Представление = СтрЗаменить(ТЗ
			.Представление, "/", "_");
			
		ТЗ.Представление = СтрЗаменить(ТЗ
			.Представление, "(", "_");
			
		ТЗ.Представление = СтрЗаменить(ТЗ
			.Представление, ")", "_");

	КонецЦикла;	
	
	ТЗ.Сортировать("Вид");

	Вид = "";
	
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		
		Если Вид <> ТЗ.Вид Тогда
			
			Вид = ТЗ.Вид;
			
			хмлВид = хмлПарсер.documentElement
				.appendChild(хмлПарсер
					.createElement(Вид));
        КонецЕсли;
		
		хмлУзел = хмлВид.appendChild(хмлПарсер
			.createElement(ТЗ.Представление));
			
		глмХМЛ.ДобавитьАтрибут(хмлПарсер, хмлУзел, 
			"num", Число(ТЗ.dwnldid));

		глмХМЛ.ДобавитьАтрибут(хмлПарсер, хмлУзел, 
			"GUId", ЗначениеВСтрокуВнутр(ТЗ.Объект));
			
	КонецЦикла;	
			
КонецПроцедуры	
//*******************************************
Функция ВывестиХМЛВДеревоЗначений(хмлУзел, Ветка, Уровень=0) Экспорт
	Перем Куст, Узел;
	
	Куст = СоздатьКуст(Ветка);
	
	Если Ветка = Дерево Тогда
		Узел = СоздатьУзел(Куст);
		Узел.Код = хмлУзел.tagName;
		Куст = СоздатьКуст(Узел.Узлы);
	КонецЕсли;
	
	ТекУровень = Уровень + 1;
	
	хмлВыборка = хмлУзел.selectNodes("./*");
	Для Й = 0 По хмлВыборка.length - 1 Цикл
				
		Узел = СоздатьУзел(Куст);
		Узел.Код = СтрЗаменить(хмлВыборка
			.item(Й).tagName, "_", " ");
		//Узел.УстановитьЗначение(Узел.НомерСтроки, 
		//	"Номер", Число(хмлВыборка.item(Й)
		//		.getAttribute("num")));
		Номер = Число(хмлВыборка.item(Й)
			.getAttribute("num"));
			
  		Узел.Номер = ?(Номер=0, "", Номер);
			
  		Узел.Ид = хмлВыборка.item(Й)
			.getAttribute("GUId");

		ТекУровень = Макс(ТекУровень, 
			ВывестиХМЛВДеревоЗначений(хмлВыборка
				.item(Й), Узел.Узлы, Уровень + 1));
		
	КонецЦикла;	
	
	// свертка узла
	Куст.Свернуть("1,2,3,4,5","");
	//\\
	
	Возврат ТекУровень;
	
КонецФункции	
//*******************************************
Функция ВывестиХМЛВТаблицу(хмлУзел, Куст = "") Экспорт
	
	Куст = ?(Куст<>"", Куст, СоздатьКуст(Дерево));

	хмлВыборка = хмлУзел.selectNodes("./*");
	Для Й = 0 По хмлВыборка.length - 1 Цикл
	    
		Если хмлВыборка.item(Й).childNodes.length = 0 Тогда

			Узел = СоздатьУзел(Куст);
			Узел.Код = СтрЗаменить(хмлВыборка
				.item(Й).tagName, "_", " ");

		КонецЕсли;
			
		ВывестиХМЛВТаблицу(хмлВыборка.item(Й), Куст);
		
	КонецЦикла;
	
	// свертка узла
	Куст.Свернуть("1,2,3","");
	//\\
	
	Возврат 1;
	
КонецФункции	
//*******************************************
Процедура СортироватьДеревоЗначений(Ветка) Экспорт
	
	Попытка
		Ветка.Сортировать("Код");
	Исключение
		Возврат;
	КонецПопытки;	
	
	Ветка.ВыбратьСтроки();
	
	Пока Ветка.ПолучитьСтроку() = 1 Цикл
		СортироватьДеревоЗначений(Ветка.Узлы);
	КонецЦикла;	
	
КонецПроцедуры	
//*******************************************
Функция ПерейтиКУзлу(Путь)
	
	тПуть = СтрЗаменить(Путь, "/", РазделительСтрок);
	
	Узел = Дерево;
	
	Для Й = 1 По СтрКоличествоСтрок(тПуть) - 1 Цикл
		
		Узел = Узел.ПолучитьЗначение(Число(СтрПолучитьСтроку(тПуть, 
			Й)), "Узлы");
		
	КонецЦикла;	
	
	Узел.ПолучитьСтрокуПоНомеру(СтрПолучитьСтроку(тПуть, 
		СтрКоличествоСтрок(тПуть)));
		
	Возврат Узел;	
	
КонецФункции	
//*******************************************
Процедура РазвернутьВеткуДереваДоУровня(Путь = "", Уровень = 99999) Экспорт
	
	Путь = ?(Путь = "", "1", Путь);
	
	Если СтрКоличествоСтрок(СтрЗаменить(Путь, 
		"/", РазделительСтрок)) > Уровень Тогда
			Возврат;
	КонецЕсли;	
	
	аДерево.РазвернутьУзел(Путь);
	
	Узел = ПерейтиКУзлу(Путь);
	
	Для Й = 1 По Узел.Узлы.КоличествоСтрок() Цикл
		
		РазвернутьВеткуДереваДоУровня(Путь + "/" + Й, Уровень);
		
	КонецЦикла;
	
КонецПроцедуры	
//*******************************************
Процедура СвернутьВеткуДерева(Путь = "") Экспорт
	
	Путь = ?(Путь = "", "1", Путь);
	
	аДерево.СвернутьУзел(Путь);
	
	Узел = ПерейтиКУзлу(Путь);
	
	Для Й = 1 По Узел.Узлы.КоличествоСтрок() Цикл
		
		СвернутьВеткуДерева(Путь + "/" + Й);
		
	КонецЦикла;
	
КонецПроцедуры	
//*******************************************
Функция ИзмененРазмерФормы()
	
	Рез = 0;
	
	рФорма = СоздатьОбъект("РасширениеФормы");
	рФорма.УстановитьФорму(Форма);
    
    Если (рФорма.Высота <> ФормВысота) 
		или (рФорма.Ширина <> ФормШирина) 
			или (рФорма.Максимизирована <> ФормМакс) 
				или (рФорма.Минимизирована <> ФормМин) 
					или (рФорма.Лево <> ФормЛево) 
						или (рФорма.Верх <> ФормВерх) Тогда
							Рез = 1;
	КонецЕсли;	
	
	ФормВысота = рФорма.Высота; ФормШирина = рФорма.Ширина;
		ФормМакс = рФорма.Максимизирована; ФормМин
			= рФорма.Минимизирована; ФормЛево = рФорма.Лево;
				ФормВерх = рФорма.Верх;
	
	Возврат Рез;
	
КонецФункции	
//*******************************************
Процедура ПриНажатииЛевойКнопкиНадДеревом(НомерСтроки, НомерКолонки)
	
	Путь = СтрЗаменить(аДерево.ТекущаяСтрокаДерева(),
		"/", РазделительСтрок);
	
	Узлы = Дерево;
	Для Й = 1 По СтрКоличествоСтрок(Путь) - 1 Цикл
		Узлы.ПолучитьСтрокуПоНомеру(СтрПолучитьСтроку(Путь, Й));
		Если ТипЗначенияСтр(Узлы.Узлы) = "" Тогда
			// достигли крайних потомков дерева
			Прервать;
		Иначе
			Узлы = Узлы.Узлы;	
		КонецЕсли;
	КонецЦикла;
    
	нСтроки = СтрПолучитьСтроку(Путь, 
		СтрКоличествоСтрок(Путь));
	
	стрПоиска = СтрЗаменить(Узлы
		.ПолучитьЗначение(нСтроки, "Код"), 
			" ", "_");
					
	хмлУзел = хмлКорень.selectNodes("//" 
		+ стрПоиска).item(0);
	
	//Сообщить(хмлУзел.getAttribute("num"));
	//
//	Файл = хмлУзел.getAttribute("path");
//	
//	Если СокрЛП(Файл) = "" Тогда
//		Файл = "<<" + хмлУзел.tagName + ">>";
//	КонецЕсли;
//
//	Форма.тФайл.Заголовок(Файл);	
	
КонецПроцедуры	
//*******************************************
Процедура ПриДвойномНажатииЛевойКнопки(сост, х, у)
	
	ВыбАтрибут = рФорма.ПолучитьАтрибутПоКоординатам(х, у);
	
    Если ТипЗначенияСтр(ВыбАтрибут) = "АтрибутФормы" Тогда
		Попытка
			//глИницВнешМодуля("Действие_" 
			//	+ ВыбАтрибут.Идентификатор + "();", Контекст, "");	
		Исключение
				
		КонецПопытки;	
    КонецЕсли;
		
КонецПроцедуры
//*******************************************
Процедура ПриВыбореСтрокиДерева()
	
	Путь = СтрЗаменить(аДерево.ТекущаяСтрокаДерева(),
		"/", РазделительСтрок);
	
	Узлы = Дерево;
	Для Й = 1 По СтрКоличествоСтрок(Путь) - 1 Цикл
		Узлы.ПолучитьСтрокуПоНомеру(СтрПолучитьСтроку(Путь, Й));
		Если ТипЗначенияСтр(Узлы.Узлы) = "" Тогда
			// достигли крайних потомков дерева
			Прервать;
		Иначе
			Узлы = Узлы.Узлы;	
		КонецЕсли;
	КонецЦикла;
    
	нСтроки = СтрПолучитьСтроку(Путь, 
		СтрКоличествоСтрок(Путь));
	
	Ид = Узлы.ПолучитьЗначение(нСтроки, "Ид");
		
	ОткрытьФорму(ЗначениеИзСтрокиВнутр(Ид));
	Сообщить(Ид);
	
КонецПроцедуры	
//*******************************************
Процедура Заполнить()
	
	Если глмХМЛ.СоздатьЭлементДокумента(хмлПарсер, 
		хмлНаборСхем, хмлКорень, "Торговый_отдел", 
			"windows-1251") = 0 Тогда
				Возврат;
	КонецЕсли;		
	
	ИерархияОбъектов(хмлПарсер, хмлКорень);
		
	//хмлУзел = хмлКорень.selectNodes("//*|@*").item(0);
	
	хмлФункция=""; хмлРезультат="";
	
	стрХСЛ =	"<?xml version=""1.0"" encoding=""UTF-8""?>
				|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
				|	xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
				|	<xsl:output encoding=""UTF-8"" indent=""yes"" method=""xml""/>
				|	<xsl:template match=""child::*/child::*"">
				|		<xsl:variable name=""cnt"" select=""count(child::*)""/>
				|		<xsl:variable name=""nam"" select=""concat(name(),'_',$cnt,'')""/>
				|		<xsl:element name=""{$nam}"">
				|			<xsl:copy-of select=""child::*""/>
				|		</xsl:element>
				|	</xsl:template>
				|	<xsl:template match=""/"">
				|		<xsl:variable name=""cnt"" select=""count(child::*/child::*/child::*)""/>
				|		<xsl:variable name=""nam"" select=""concat('ТорговыйОтдел','_',$cnt,'')""/>
				|		<xsl:element name=""{$nam}"">
				|			<xsl:apply-templates/>
				|		</xsl:element>
				|	</xsl:template>
				|</xsl:stylesheet>
				|";
	Попытка			
		Результат = глмХМЛ.ПрочитатьДокументИзСтроки(хмлФункция, хмлНаборСхем, , стрХСЛ)
			* глмХМЛ.ВыполнитьПреобразование(хмлПарсер, хмлНаборСхем, хмлФункция, хмлРезультат);
	Исключение
		Сообщить("Ошибка", "!");		
		Возврат;
	КонецПопытки;
	
	Если Результат = 1 Тогда

		хмлПарсер = хмлРезультат;
		хмлКорень = хмлПарсер.documentElement;
		ВывестиХМЛВДеревоЗначений(хмлКорень, Дерево);

	КонецЕсли;
	
	//ВывестиХМЛВТаблицу(хмлУзел, "");
	
	//СортироватьДеревоЗначений(Дерево);
		
КонецПроцедуры	
//*******************************************
Процедура Обновить()
	
	Попытка
		Дерево.УстановитьПараметрыКолонки("Код"
			, , , , , (рФорма.Ширина - 100) / 6 * 0.5); 

		аДерево.ОбновитьДерево();
	Исключение
			
	КонецПопытки;	
	
КонецПроцедуры
//*******************************************
Процедура Сформировать()
    
	Заполнить();
	
	Обновить();
	
КонецПроцедуры
//*******************************************
Процедура УдалитьРегистрацию()
	
	Путь = СтрЗаменить(аДерево.ТекущаяСтрокаДерева(),
		"/", РазделительСтрок);
	
	Узлы = Дерево;
	Для Й = 1 По СтрКоличествоСтрок(Путь) - 1 Цикл
		Узлы.ПолучитьСтрокуПоНомеру(СтрПолучитьСтроку(Путь, Й));
		Если ТипЗначенияСтр(Узлы.Узлы) = "" Тогда
			// достигли крайних потомков дерева
			Прервать;
		Иначе
			Узлы = Узлы.Узлы;	
		КонецЕсли;
	КонецЦикла;
    
	нСтроки = СтрПолучитьСтроку(Путь, 
		СтрКоличествоСтрок(Путь));
	
	стрПоиска = СтрЗаменить(Узлы
		.ПолучитьЗначение(нСтроки, "Код"), 
			" ", "_");
			
	хмлУзел = хмлКорень.selectNodes("//" 
		+ стрПоиска).item(0);
	
// 1sexch
	ИмяТаблицы = КаталогИб() + "1SEXCH.DBF";
	
	ДБФ = СоздатьОбъект("XBASE");	
	
	Если ФС.СуществуетФайл(ИмяТаблицы) = 1 Тогда
		Попытка
			ДБФ.ОткрытьФайл(ИмяТаблицы, "", 0);
		Исключение 
// не удалось получить доступ к файлу
			Сообщить("Не удалось открыть файл: 1");
			Возврат;
		КонецПопытки;
		Если ДБФ.Открыта() = 0 Тогда
// не удалось открыть файл, при доступе 
// на запись к нему по каким то причинам		
			Сообщить("Не удалось открыть файл: 2");
			Возврат;
		КонецЕсли;
		ДБФ.ОчиститьФайл();
		ДБФ.Записать();
	Иначе
		ДБФ.ДобавитьПоле("F1", "S", 9, 0);
		Попытка
			ДБФ.СоздатьФайл(ИмяТаблицы, "");
		Исключение
// не удалось записать файл
			Сообщить("Не удалось создать файл: 1");
			Возврат;
		КонецПопытки;	
		Если ДБФ.Открыта() = 0 Тогда
// не удалось открыть файл, при доступе 
// на четния к нему по каким то причинам		
			Сообщить("Не удалось открыть файл: 3");
			Возврат;
		КонецЕсли;
	КонецЕсли;
    
	ДБФ.Добавить();

	ДБФ.F1 = Прав("         " + глмМетаданные
		.Ид2СтрокаИБ(хмлУзел.getAttribute("GUId")), 9);

	ДБФ.Записать();
    
	// закончить запись файла подтвержденных на стороне базы
	// -приемника обработанных объектов 
	ДБФ.ЗакрытьФайл();
  	
	// снять отметку регистрации с документов, обработанных успешно
	глмРИБ.ПринятьИзменения(ТекущийЭлемент(), "99999", "    -1", 1);
    
	//Сформировать();
	
КонецПроцедуры
//*******************************************
Процедура УдалитьВсюРегистрациюДоДаты()
	Перем ВыбДата;
	
	Если ВвестиДату(ВыбДата, 
		"Введите дату, до которой нужно удалить всю регистрацию", 
			60) = 0 Тогда
				Возврат;
	КонецЕсли;	
	
	ТекстЗапроса = 
		"SELECT 
		|	upd.objid AS objid 
		|FROM
		|	1supdts AS upd
		|	INNER JOIN 1sjourn AS jrn
		|		ON jrn.iddoc = upd.objid
		|			AND DToS(jrn.date) < '" 
		+ Формат(ВыбДата, "ДГГГГММДД") + "'
		|			AND upd.dbsign ='" + Код 
		+ 			"' AND upd.dwnldid <> '    -1'";

	ТЗ = глмOLEDBQuery.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);

// 1sexch
	ИмяТаблицы = КаталогИб() + "1SEXCH.DBF";
	
	ДБФ = СоздатьОбъект("XBASE");	
	
	Если ФС.СуществуетФайл(ИмяТаблицы) = 1 Тогда
		Попытка
			ДБФ.ОткрытьФайл(ИмяТаблицы, "", 0);
		Исключение 
// не удалось получить доступ к файлу
			Сообщить("Не удалось открыть файл: 1");
			Возврат;
		КонецПопытки;
		Если ДБФ.Открыта() = 0 Тогда
// не удалось открыть файл, при доступе 
// на запись к нему по каким то причинам		
			Сообщить("Не удалось открыть файл: 2");
			Возврат;
		КонецЕсли;
		ДБФ.ОчиститьФайл();
		ДБФ.Записать();
	Иначе
		ДБФ.ДобавитьПоле("F1", "S", 9, 0);
		Попытка
			ДБФ.СоздатьФайл(ИмяТаблицы, "");
		Исключение
// не удалось записать файл
			Сообщить("Не удалось создать файл: 1");
			Возврат;
		КонецПопытки;	
		Если ДБФ.Открыта() = 0 Тогда
// не удалось открыть файл, при доступе 
// на четния к нему по каким то причинам		
			Сообщить("Не удалось открыть файл: 3");
			Возврат;
		КонецЕсли;
	КонецЕсли;
    
	ТЗ.ВыбратьСтроки();
	
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
// заполнение списка объектов для отмены регистрации
		ДБФ.Добавить();
		ДБФ.F1 = ТЗ.objid;
		ДБФ.Записать();
    
	КонецЦикла;
	
// закончить запись файла подтвержденных на стороне базы
// -приемника обработанных объектов 
	ДБФ.ЗакрытьФайл();
  	
// снять отметку регистрации с документов, обработанных успешно
	глмРИБ.ПринятьИзменения(ТекущийЭлемент(), "99999", "    -1", 1);
	
КонецПроцедуры	
//*******************************************
Процедура ПослеОткрытия()
	
	рФорма = СоздатьОбъект("РасширениеФормы");
	рФорма.УстановитьФорму(Форма);
	
	аДерево=СоздатьОбъект("АтрибутФормы");
    
	аДерево.УстановитьАтрибут(Форма,"Дерево");
    
	аДерево.ПерехватитьТаблицуЗначений();
    
	аДерево.ОпцииДерева(1,1);
    
	Сформировать();
	
КонецПроцедуры
//*******************************************
сзКолДерева = СоздатьОбъект("СписокЗначений");

сзКолДерева.ИзСтрокиСРазделителями("""Узлы"","""",""Код"",""Номер"",""Ид""");

блкОбновления = 0;