// набор движений документа корректировки записей регистров.
// итого, синхронизация происходит между 3-мя объектами 
// программы: этим набором движений, записанными в регистрах
// оперативного учета движениями и таблицей движений в 
// интерфейсе формы
Перем НаборДвижений Экспорт, ПустойНаборДвижений Экспорт,
// текущий номер закладки, необходим при определении того,
// с каким набором записей регистра нужна синхронизировать 
// таблицу движений перед ее перезаполнением
	НомерЗакладки,
// флаг модифицированности реквизитов в форме	
	Модифицированность;
//{} Перем НомерДок, ДатаДок, ДокументОснование, ОтклДвижения, 
//{}	РедДвижения, Автор, КорректировкаЗаписейРегистров Экспорт, 
//{}		ХранилищеДвижений, ТаблицаДвижений, Комментарий, 
//{} 			Форма;	
//*******************************************
Функция Тест()
	
	Возврат """глмКорректировкаЗаписейРегистров"" - подключен";
	
КонецФункции	
//*******************************************
Процедура УстановитьДоступностьЭлементовДиалога()
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
    ФормаРасш.УстановитьФорму(Форма);
	Для Х = 0 По ФормаРасш.КоличествоАтрибутов() - 1 Цикл
		Атрибут = ФормаРасш.ПолучитьАтрибут(Х);
		Если Атрибут.Идентификатор <> "РедДвижения" Тогда
			Атрибут.Доступность = РедДвижения;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	
//*******************************************
// определяет по номеру закладки идентификатор регистра 
// накопления в наборе движений
Функция 	ТекущийРегистр(ВыбНомерЗакладки="")
	
	ВыбНомерЗакладки = ?(ПустоеЗначение(ВыбНомерЗакладки) = 0,
		ВыбНомерЗакладки, НомерЗакладки);
		
	Возврат ?(Форма.Закладки.РазмерСписка()<ВыбНомерЗакладки, "",
		Форма.Закладки.ПолучитьЗначение(ВыбНомерЗакладки));
	
КонецФункции
//*******************************************
// определяет вид регистра по набору записей
Функция 	ТипРегистра(НаборЗаписей)
	
	Попытка
		НаборЗаписей.ПолучитьПараметрыКолонки("Приход");
	Исключение
		Возврат "Обороты";
	КонецПопытки;
	
	Возврат "Остатки";	
	
КонецФункции	
//*******************************************
// формирует заголовок формы по данным реквизитов
// отображаемой корректировки
Процедура 	ОбновитьЗаголовокФормы()
	
	Форма.Заголовок("КЗР #" + ?(НомерДок=0, "?", НомерДок) 
		+ " от " + ДатаДок + ?(Модифицированность=1," (*)",""));
	
КонецПроцедуры	
//*******************************************
// по набору движений, формирует список закладок формы
// устанавливает текущую закладку
Процедура 	СоздатьЗакладки()
	Перем ИмяРегистра;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.УдалитьВсе();
	Для Индекс = 1 По НаборДвижений.РазмерСписка() Цикл
		НаборДвижений.ПолучитьЗначение(Индекс, ИмяРегистра);
		Форма.Закладки.ДобавитьЗначение(ИмяРегистра);
	КонецЦикла;
	
	НомерЗакладки = 1;
	Если Форма.Закладки.РазмерСписка() >= 1 Тогда
		Форма.Закладки.ТекущаяСтрока(НомерЗакладки);
	КонецЕсли;	
	
КонецПроцедуры
//*******************************************
// синхронизирует набор движений с таблицей движений,
// отображающей и позволяющей редактировать записи "текущего"
// набора записей
Процедура 	СинхронизироватьНаборДвижений(ИмяРегистра, Направление=0)
	
	НаборЗаписей = НаборДвижений.Получить(ИмяРегистра);
	Если ТипЗначения(НаборЗаписей) = 100 Тогда
		Если Направление = 0 Тогда
			// обновление данных таблицы движений по данным
			// текущего набора записей
			НаборЗаписей.Выгрузить(ТаблицаДвижений);
			Для Индекс = 1 По ТаблицаДвижений.КоличествоКолонок()-1 Цикл
				ТаблицаДвижений.УстановитьПараметрыКолонки(Индекс,,,,,5);
			КонецЦикла;
			// колонка для отображения пиктограммы направления
			// движения и "флага активности" записей
			ТаблицаДвижений.ВставитьКолонку("Движение",1,"Число",1,0,"",2);
			ТаблицаДвижений.ВыводитьПиктограммы("Движение");
			// определение значков пиктограммы для строк набора записей
			ТипРегистра = ТипРегистра(ТаблицаДвижений);
			Если ТипРегистра = "Остатки" Тогда
				ТаблицаДвижений.ВыбратьСтроки();
				Пока ТаблицаДвижений.ПолучитьСтроку() = 1 Цикл
					ТаблицаДвижений.Движение = 3 * ?(ОтклДвижения = 0, 1, 0) 
						+ 2 * ТаблицаДвижений.Приход + 3 * ТаблицаДвижений.Расход;
				КонецЦикла;
				ТаблицаДвижений.ВидимостьКолонки("Приход, Расход", 0);
			Иначе
				Если ТаблицаДвижений.КоличествоСтрок() > 0 Тогда
					ТаблицаДвижений.Заполнить(?(ОтклДвижения = 0, 4, 1),,, "Движение");
				КонецЕсли;	
			КонецЕсли;
			// перемещение в начало списка после заполнения
			// - очень удобно
			Если ТаблицаДвижений.КоличествоСтрок() > 0 Тогда
			    ТаблицаДвижений.ТекущаяСтрока(1);
			КонецЕсли;
		Иначе
			// обновление данных набора записей "текущего" 
			// регистра по данным таблицы движений
			ТаблицаДвижений.Выгрузить(НаборЗаписей);
			НаборЗаписей.УдалитьКолонку("Движение");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
//*******************************************
Процедура СкопироватьНаборДвижений(Источник, Приемник)
	Перем Имя;
	
	Приемник = СоздатьОбъект("СписокЗначений");
	Для Поз = 1 По Источник.РазмерСписка() Цикл
		Таблица = Источник.ПолучитьЗначение(Поз, Имя);
		КопияТаблицы = СоздатьОбъект("ТаблицаЗначений");
		Таблица.Выгрузить(КопияТаблицы);
		Приемник.ДобавитьЗначение(КопияТаблицы, Имя);
	КонецЦикла;	
	
КонецПроцедуры	
//*******************************************
// инициализация набора движений документа по данным о
// конфигурации регистров оперативного учета
Процедура 	СоздатьНаборДвижений()
	Если ПустоеЗначение(ПустойНаборДвижений) = 0 Тогда
		СкопироватьНаборДвижений(ПустойНаборДвижений, 
			НаборДвижений);
	Иначе	
		// создание набора движений
		НаборДвижений = СоздатьОбъект("СписокЗначений");
		// выборка конфигурационных данных о регистрах оперативного учета
		мОбъекты = глмМетаданные.ВыбратьОбъекты(глмМетаданные.Тип2Ид("Регистр"));
		мОбъекты.ВыбратьСтроки();
		Пока мОбъекты.ПолучитьСтроку() = 1 Цикл
			Если глмМетаданные.ЭтоКаталог(мОбъекты.Ид) = 1 Тогда
				Продолжить;
			КонецЕсли;
			// для каждого описания регистра создается в наборе движений
			// таблица записей
			НаборЗаписей = СоздатьОбъект("ТаблицаЗначений");
			НаборДвижений.ДобавитьЗначение(НаборЗаписей, 
				глмМетаданные.ВызовМетодаОбъекта(мОбъекты.Ид, "Идентификатор"));
			// добавляются реквизиты по умолчанию
			Если глмМетаданные.СвойствоОбъекта(мОбъекты.Ид, "ТипРегистра") = "Остатки" Тогда
				НаборЗаписей.НоваяКолонка("Приход", "Число", 1, 0);
				НаборЗаписей.НоваяКолонка("Расход", "Число", 1, 0);
			КонецЕсли;
			// выборка конфигурационных данных о реквизитах данного 
			// регистра (измерениях, ресурсах)
			мРеквизиты = глмМетаданные.ВыбратьРеквизиты(мОбъекты.Ид, "", "", "");
			мРеквизиты.ВыбратьСтроки();
			Пока мРеквизиты.ПолучитьСтроку() = 1 Цикл
				// определение квалификатора типов реквизита
				Тип = глмМетаданные.СвойствоРеквизита(мРеквизиты, "Тип", мОбъекты.Ид);
				Если глмМетаданные.мАгрегатныеТипы.Принадлежит(Тип) = 1 Тогда
					Тип = Тип + "." + глмМетаданные.СвойствоРеквизита(мРеквизиты, 
						"Вид", мОбъекты.Ид);
				КонецЕсли;
				// создание реквизита таблицы набора записей для 
				// хранения данных реквизита
				НаборЗаписей.НоваяКолонка(глмМетаданные.СвойствоРеквизита(мРеквизиты, 
					"Идентификатор", мОбъекты.Ид), Тип, глмМетаданные.СвойствоРеквизита(
						мРеквизиты, "Длина", мОбъекты.Ид), глмМетаданные.СвойствоРеквизита(
							мРеквизиты, "Точность", мОбъекты.Ид));
			КонецЦикла;
		КонецЦикла;
		СкопироватьНаборДвижений(НаборДвижений, 
			ПустойНаборДвижений);
	КонецЕсли;
КонецПроцедуры	
//*******************************************
// формирование набора движений на основе данных о движениях
// переданного документа
Процедура 	ЗагрузитьНаборДвиженийИзРегистра(Док, ИзменитьНаправление=0)
	Перем ИмяРегистра;
	// инициализация набора движений
	СоздатьНаборДвижений();
	Если Док.Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	// полноценное решение, способное изменить нижеуказанное, если не
	// требовать от алгоритма конвертации знака движений:
	//Для Индекс = 1 По НаборДвижений.РазмерСписка() Цикл
	//	НаборЗаписей = НаборДвижений.ПолучитьЗначение(Индекс, ИмяРегистра);
	//	ТипРегистра = ТипРегистра(НаборЗаписей);
	//	мРегистр = СоздатьОбъект("Регистр." + ИмяРегистра);
	//	мРегистр.ВыбратьДвиженияДокумента(Док);
	//	НомерСтроки = 1;
	//	Пока мРегистр.ПолучитьДвижение() = 1 Цикл
	//		НаборЗаписей.НоваяСтрока();
	//		Для НомерКолонки = 1 По НаборЗаписей.КоличествоКолонок() Цикл
	//			ИмяАтрибута = НаборЗаписей.ПолучитьПараметрыКолонки(НомерКолонки);
	//			НаборЗаписей.УстановитьЗначение(НомерСтроки, ИмяАтрибута, 
	//				?((ТипРегистра = "Обороты") и (ИзменитьНаправление = 1), 
	//					-мРегистр.ПолучитьАтрибут(ИмяАтрибута), 
	//						мРегистр.ПолучитьАтрибут(ИмяАтрибута)));
	//		КонецЦикла;
	//		НомерСтроки = НомерСтроки + 1;
	//		Если (ТипРегистра = "Остатки") и (ИзменитьНаправление = 1) Тогда
	//			НаборЗаписей.УстановитьЗначение(НомерСтроки, "Приход", 
	//				1 - НаборЗаписей.ПолучитьЗначение(НомерСтроки, "Приход"));
	//			НаборЗаписей.УстановитьЗначение(НомерСтроки, "Расход", 
	//				1 - НаборЗаписей.ПолучитьЗначение(НомерСтроки, "Расход"));
	//		КонецЕсли;
	//	КонецЦикла;	
	//КонецЦикла;
	//\\
	// выборка конфигурационных данных по регистрам оперативного учета
	мОбъекты = глмМетаданные.ВыбратьОбъекты(глмМетаданные.Тип2Ид("Регистр"));
	мОбъекты.ВыбратьСтроки();
	Пока мОбъекты.ПолучитьСтроку() = 1 Цикл
		Если глмМетаданные.ЭтоКаталог(мОбъекты.Ид) = 1 Тогда
			Продолжить;
		КонецЕсли;
		ИмяРегистра = глмМетаданные.ВызовМетодаОбъекта(мОбъекты.Ид, "Идентификатор");
		// считывание соответствующего набора записей 
		НаборЗаписей = НаборДвижений.Получить(ИмяРегистра);
		ТипРегистра = глмМетаданные.СвойствоОбъекта(мОбъекты.Ид, "ТипРегистра");
		// инстанцирование объекта "регистр", обращение к движениям
		// переданного в параметрах обработки документа по данному 
		// регистру
		мРегистр = СоздатьОбъект("Регистр." + ИмяРегистра);
		мРегистр.ВыбратьДвиженияДокумента(Док);
		НомерСтроки = 1;
		// выборка конфигурационной информации о реквизитах регистра
		мРеквизиты = глмМетаданные.ВыбратьРеквизиты(мОбъекты.Ид, "", "", "");
		Пока мРегистр.ПолучитьДвижение() = 1 Цикл
			// обход движений - запись в набор
			НаборЗаписей.НоваяСтрока();
			мРеквизиты.ВыбратьСтроки();
			Пока мРеквизиты.ПолучитьСтроку() = 1 Цикл
				Значение = мРегистр.ПолучитьАтрибут(мРеквизиты.Ид);
				// в случае корректировки движений переданного 
				// документа, производится изменение знака в данных
				// ресурсов записи регистра для оборотного регистра
				// и ...
				Если (ИзменитьНаправление=1) и (ТипРегистра="Обороты")
					и (мРеквизиты.ИдКаталога="Ресурс") Тогда
						Значение = -Значение;
				КонецЕсли;		
				НаборЗаписей.УстановитьЗначение(НомерСтроки, 
					мРеквизиты.Ид, Значение);
			КонецЦикла;
			// ... изменением значений флагов Приход/Расход в случае,
			// когда имеем дело с регистром остатков
			Если ТипРегистра = "Остатки" Тогда
				НаборЗаписей.УстановитьЗначение(НомерСтроки, "Приход",
					?(ИзменитьНаправление=0, мРегистр.Приход, 
						1 - мРегистр.Приход));
				НаборЗаписей.УстановитьЗначение(НомерСтроки, "Расход",
					?(ИзменитьНаправление=0, мРегистр.Расход, 
						1 - мРегистр.Расход));
			КонецЕсли;
			// итератор номера строки при формировании движений
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
//*******************************************
// формирование набора движений на основе сохраненных данных
// в хранилище значений
Процедура 	ЗагрузитьНаборДвиженийИзХранилищаЗначений()
	Перем ИмяРегистра;
	// инициализация набора движений
	СоздатьНаборДвижений();
	Если ХранилищеДвижений.Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	// инстанцирование объекта xml-анализатора компоненты v7plus
	Анализатор = СоздатьОбъект("AddIn.XMLParser");
    Документ = Анализатор.СоздатьДокумент();
	// попытка чтения данных файла из реквизита хранилища значений
	Попытка
		Документ.ЗагрузитьИзСтроки(ХранилищеДвижений.Объект);
	Исключение
		Сообщить("Не удалось загрузить движения документа", "!");
		Возврат;
	КонецПопытки;
	// парсинг xml-файла, заполнение данных набора движений
	Корень = Документ.ВыбратьУзел("Движения");
	Для Индекс = 1 По НаборДвижений.РазмерСписка() Цикл
		НаборЗаписей = НаборДвижений.ПолучитьЗначение(Индекс, ИмяРегистра);
		узРегистр = Корень.ВыбратьУзел(ИмяРегистра);
		Если ПустоеЗначение(узРегистр) = 1 Тогда
			Продолжить;
		КонецЕсли;
		Для НомерСтроки = 1 По узРегистр.КоличествоПодчиненных() Цикл
			узСтрока = узРегистр.ПолучитьПодчиненныйПоНомеру(НомерСтроки);
			НаборЗаписей.НоваяСтрока();
			Для НомерКолонки = 1 По НаборЗаписей.КоличествоКолонок() Цикл
				КодКолонки = НаборЗаписей.ПолучитьПараметрыКолонки(НомерКолонки);
				НаборЗаписей.УстановитьЗначение(НомерСтроки, НомерКолонки, 
					ЗначениеИзСтрокиВнутр(узСтрока.ПолучитьАтрибут(КодКолонки)));
			КонецЦикла;		
		КонецЦикла;		
	КонецЦикла;	
	
КонецПроцедуры	
//*******************************************
// универсальная процедура чтения набора движений, источник
// вызова обоих процедур, реализующих варианты чтения движений
// переданного в параметрах документа в зависимости от флага
// активности движения, вызова процедуры заполнения по 
// документу-основанию
Процедура 	ЗагрузитьНаборДвижений(Док)
	
	// чтение движений документа
	Если Док = КорректировкаЗаписейРегистров Тогда
		Если ОтклДвижения = 0 Тогда
			// ... из регистров накопления
			ЗагрузитьНаборДвиженийИзРегистра(Док);
		Иначе
			// ... из хранилища значений
			ЗагрузитьНаборДвиженийИзХранилищаЗначений();
		КонецЕсли;
	// заполнение по документу-основанию	
	Иначе
		ЗагрузитьНаборДвиженийИзРегистра(Док, 1);
	КонецЕсли;
	
КонецПроцедуры
//*******************************************
// синхронизация данных обработки и документа "корректировка
// записей регистров" в обе, в зависимости от параметров вызова, 
// стороны
Функция 	СинхронизироватьЗначенияРеквизитов(Направление)
	
	// Французов 09.06.17: обобщение
	//Ид = глмМетаданные.Тип2Ид("Документ.КорректировкаЗаписейРегистров");
	Тип = ?(КорректировкаЗаписейРегистров.Выбран() = 0,
		"Документ.КорректировкаЗаписейРегистров", "Документ." 
			+ КорректировкаЗаписейРегистров.Вид());
			
	Ид = глмМетаданные.Тип2Ид(Тип);		
	//\\		
	мРеквизиты = глмМетаданные.ВыбратьРеквизиты(Ид, "", "РеквизитШапки", "");
	// Французов 09.06.17: обобщение
	//Корректировки = СоздатьОбъект("Документ.КорректировкаЗаписейРегистров");
	Корректировки = СоздатьОбъект(Тип);
	//\\
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	Если Направление = 0 Тогда
		// когда читаем данные еще не записанного документа 
		// - инициализация нового документа
		Если КорректировкаЗаписейРегистров.Выбран() = 0 Тогда
			ДатаДок 	= РабочаяДата();
			НомерДок	= "";
			Автор 		= глПользователь;
			ОтклДвижения = 0;
			РедДвижения = 1;
		Иначе
			// когда читаем данные уже записанного документа
			Корректировки.НайтиДокумент(КорректировкаЗаписейРегистров);
			ДатаДок 	= Корректировки.ДатаДок;
			НомерДок 	= Корректировки.НомерДок;
			Автор		= Корректировки.Автор;
			мРеквизиты.ВыбратьСтроки();
			Пока мРеквизиты.ПолучитьСтроку() = 1 Цикл
				// Французов 09.06.17: обобщение
				Попытка
				//	
				ФормаРасш.ПолучитьАтрибут(мРеквизиты.Ид).Значение 
					= Корректировки.ПолучитьАтрибут(мРеквизиты.Ид);
				//	
				Исключение
				КонецПопытки;
				//\\
			КонецЦикла;
			// Французов 09.06.17: пока так...
			Если Корректировки.Вид() <> "КорректировкаЗаписейРегистров" Тогда
				ОтклДвижения = 0;
				РедДвижения = 0;
			КонецЕсли;	
			//\\
		КонецЕсли;
	Иначе
		// запись документа корректировки
		Если КорректировкаЗаписейРегистров.Выбран() = 0 Тогда
			Корректировки.Новый();
			Корректировки.ДатаДок 	= ДатаДок;
			Корректировки.Автор		= Автор;
			мРеквизиты.ВыбратьСтроки();
			Пока мРеквизиты.ПолучитьСтроку() = 1 Цикл
				// Французов 09.06.17: обобщение
				Попытка
				//	
				Корректировки.УстановитьАтрибут(мРеквизиты.Ид, 
					ФормаРасш.ПолучитьАтрибут(мРеквизиты.Ид).Значение); 
				//	
				Исключение
				КонецПопытки;
				//\\
			КонецЦикла;
			Корректировки.Записать();
			КорректировкаЗаписейРегистров = Корректировки.ТекущийДокумент();
		Иначе
			// редактирование реквизитов сохраненного документа
			// и, при необходимости, когда значения реквизитов 
			// изменились, запись
			НеобходимоЗаписать = 1;
			Корректировки.НайтиДокумент(КорректировкаЗаписейРегистров);
			Если Корректировки.ДатаДок <> ДатаДок Тогда
				НеобходимоЗаписать = 1;
				Если Корректировки.Проведен() = 1 Тогда
					// возможности изменить дату проведенного 
					// документа в 1с в. 7.7 нет
			    	Корректировки.СделатьНеПроведенным();
				КонецЕсли;	
				Корректировки.ДатаДок = ДатаДок;
			КонецЕсли;
			мРеквизиты.ВыбратьСтроки();
			Пока мРеквизиты.ПолучитьСтроку() = 1 Цикл
				// Французов 09.06.17: обобщение
				Попытка
				//	
				//Если Корректировки.ПолучитьАтрибут(мРеквизиты.Ид) 
				//	<> ФормаРасш.ПолучитьАтрибут(мРеквизиты.Ид).Значение Тогда
						НеобходимоЗаписать = 1;
						Корректировки.УстановитьАтрибут(мРеквизиты.Ид, 
							ФормаРасш.ПолучитьАтрибут(мРеквизиты.Ид).Значение); 
				//КонецЕсли;	
				//	
				Исключение
				КонецПопытки;
				//\\
			КонецЦикла;
			Если НеобходимоЗаписать = 1 Тогда
			    Корректировки.Записать();
			КонецЕсли;
		КонецЕсли;
		Возврат Корректировки;
	КонецЕсли;
	
КонецФункции
//*******************************************
// запись набора движений корректировки
Функция 	ЗаписатьНаборДвижений(Конт = "")
	
	ПерехватчикСобытий = СоздатьОбъект("КорректировкаЗаписейРегистров");
	Если ТипЗначенияСтр(Конт) = "ГрупповойКонтекст" Тогда
		Попытка
			Режим = Конт.Режим;
			ТекущийДокумент = Конт;
			//Сообщить("проведение в контексте формы");
		Исключение
			//Сообщить("проведение в контексте документа");
			Результат = ПерехватчикСобытий.Событие_ОбработкаПроведения(Конт, НаборДвижений);
			Возврат Результат;
		КонецПопытки;	
	Иначе	
		// Французов 14.09.17: обобщение
		//Возврат СинхронизироватьЗначенияРеквизитов(1).Провести(, НаборДвижений);
		//Сообщить("проведение за пределами контекста");
		ТекущийДокумент = СинхронизироватьЗначенияРеквизитов(1);
		//\\
	КонецЕсли;
	
	Перехватчик = СоздатьОбъект("Перехватчик");
	Перехватчик.ПерехватитьСобытияПроведенияДокумента(ТекущийДокумент.Вид(), ПерехватчикСобытий);
	Результат = ТекущийДокумент.Провести(, НаборДвижений);
	Перехватчик.СнятьПерехватСобытийПроведенияДокумента(ТекущийДокумент.Вид());
	Возврат Результат;

КонецФункции
//*******************************************
// проведение - запись движений в систему регистров оперативного
// учета
Процедура 	Провести()
	
	Если Модифицированность = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СинхронизироватьНаборДвижений(ТекущийРегистр(), 1);
	
	ЗаписатьНаборДвижений();
	// если новый документ записан, возможно, изменились реквизиты
	// документа, номер, например...
	СинхронизироватьЗначенияРеквизитов(0);
	
	Модифицированность = 0;
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры
//*******************************************
// обработка входных параметров, переданных из формы документа
// корректировки записей регистров или другой программной формы
Процедура 	ПриОткрытии()
	
	Если ТипЗначенияСтр(Форма.Параметр) <> "СписокЗначений" Тогда
		Сообщить("Неправильный вызов обработки", "!");
		СтатусВозврата(0);
		Возврат;
	Иначе
		Параметр = Форма.Параметр;
		// текущий документ корректировки
		КорректировкаЗаписейРегистров = Параметр
			.Получить("КорректировкаЗаписейРегистров");
		СинхронизироватьЗначенияРеквизитов(0);
		// способ получения движений: 0 - загрузить из движений 
		// документа, 1 - получить из параметров вызова
		Если Параметр.Получить("СпособПолученияДвижений") = 0 Тогда
			ЗагрузитьНаборДвижений(КорректировкаЗаписейРегистров);
		Иначе
			// реквизит "набор движений" в параметрах вызова
			НаборДвижений = Параметр.Получить("НаборДвижений");
		КонецЕсли;
		// может быть вызов на запись движений ...
		Если Параметр.Получить("ЗаписатьДвижения") = 1 Тогда
			ЗаписатьНаборДвижений();
		КонецЕсли;
		// ... без открытия формы
		Если Параметр.Получить("ОткрытьФорму") = 1 Тогда
			// ... или, с открытием:
			СоздатьЗакладки();
			СинхронизироватьНаборДвижений(ТекущийРегистр());
			Модифицированность = 0;
			УстановитьДоступностьЭлементовДиалога();
			ОбновитьЗаголовокФормы();
		Иначе
			СтатусВозврата(0);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры
//*******************************************
Процедура 	ПриЗакрытии()
	
	Если Модифицированность = 1 Тогда
		ТекстВопроса = "Документ изменен. Сохранить?";
		Ответ = Вопрос(ТекстВопроса, "Да+Нет+Отмена");
		Если Ответ = "Да" Тогда
			Провести();
		ИначеЕсли Ответ = "Отмена" Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//*******************************************
// при установке/снятии флага активности движений, необходимо
// обеспечить удаление/создание соответствующего документу 
// элемента справочника "Хранилище значений" для записи текущих
// движений документа и определить цвет пиктограммы движений в 
// таблице
Процедура 	ПриВыбореВклДвижения()
	
	Модифицированность = 1;
	ОбновитьЗаголовокФормы();
	
	// создание/удаление элемента хранилища значений
	ХранилищеЗначения = СоздатьОбъект("Справочник.ХранилищеЗначения");
		
	Если ОтклДвижения = 1 Тогда
		ХранилищеЗначения.Новый();
		ХранилищеЗначения.Записать();
		ХранилищеДвижений = ХранилищеЗначения.ТекущийЭлемент();
	Иначе
		Если ХранилищеЗначения.НайтиЭлемент(ХранилищеДвижений) = 1 Тогда
			ХранилищеЗначения.Удалить(1);
			ХранилищеДвижений = "";
		КонецЕсли;	
	КонецЕсли;	
	// изменение цвета пиктограммы
	Если ТипРегистра(ТаблицаДвижений) = "Остатки" Тогда
		ТаблицаДвижений.ВыбратьСтроки();
		Пока ТаблицаДвижений.ПолучитьСтроку() = 1 Цикл
			ТаблицаДвижений.Движение = 3 * ?(ОтклДвижения = 0, 1, 0) 
				+ 2 * ТаблицаДвижений.Приход + 3 * ТаблицаДвижений.Расход;
		КонецЦикла;
		ТаблицаДвижений.ВидимостьКолонки("Приход, Расход", 0);
	Иначе
		Если ТаблицаДвижений.КоличествоСтрок() > 0 Тогда
			ТаблицаДвижений.Заполнить(?(ОтклДвижения = 0, 4, 1),,, "Движение");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
//*******************************************
// при выборе вкладки, нужно сохранить уже введенные в таблицу
// движений на форме обработки данные о записях текущего набора
// в набор движений и подготовить таблицу для редактирования 
// набора записей выбранного регистра
Процедура 	ПриВыбореЗакладки()
	
	СинхронизироватьНаборДвижений(ТекущийРегистр(НомерЗакладки), 1);
	
	НомерЗакладки = Форма.Закладки.ТекущаяСтрока();
	
	СинхронизироватьНаборДвижений(ТекущийРегистр(), 0);
	
КонецПроцедуры	
//*******************************************
// копирование строки таблицы движений
Процедура 	КопироватьСтроку()
	
	Модифицированность = 1;
	ОбновитьЗаголовокФормы();
	НомерСтроки = ТаблицаДвижений.ТекущаяСтрока();
	ТаблицаДвижений.НоваяСтрока();
	НомерПоследнейСтроки = ТаблицаДвижений.КоличествоСтрок();
	Для НомерКолонки = 1 По ТаблицаДвижений.КоличествоКолонок() Цикл
		ТаблицаДвижений.УстановитьЗначение(НомерПоследнейСтроки, НомерКолонки, 
			ТаблицаДвижений.ПолучитьЗначение(НомерСтроки, НомерКолонки));
	КонецЦикла;		
	ТаблицаДвижений.ТекущаяСтрока(НомерПоследнейСтроки);
	
КонецПроцедуры
//*******************************************
// добавление строки таблицы движений
Процедура 	ДобавитьСтроку()
	
	Модифицированность = 1;
	ОбновитьЗаголовокФормы();
	ТаблицаДвижений.НоваяСтрока();
	Попытка
		ТаблицаДвижений.Приход = 1;
		ТаблицаДвижений.Движение = 3 * ?(ОтклДвижения = 0, 1, 0) + 2;
	Исключение
		ТаблицаДвижений.Движение = 3 * ?(ОтклДвижения = 0, 1, 0) + 1;
	КонецПопытки;
	ТаблицаДвижений.ТекущаяСтрока(ТаблицаДвижений.КоличествоСтрок());
	
КонецПроцедуры
//*******************************************
// удаление строки таблицы движений
Процедура 	УдалитьСтроку()
	
	Модифицированность = 1;
	ОбновитьЗаголовокФормы();
	НомерСтроки = ТаблицаДвижений.ТекущаяСтрока();
	Если НомерСтроки > 0 Тогда
		ТаблицаДвижений.УдалитьСтроку(НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры	
//*******************************************
// редактирование строки таблицы движений
Процедура 	ВвестиЗначениеРеквизитаТаблицы()
	Перем НовоеЗначение, Тип, Длина, Точность;
	
	КодСтроки 	= ТаблицаДвижений.ТекущаяСтрока();
	// в случае, кода в таблице движений нет строк - необходимо
	// создать строки соответствующей обработкой
	Если КодСтроки = 0 Тогда
		Предупреждение("Добавьте строку", -1);
		Возврат;
	КонецЕсли;
	// когда изменение данных запрещено...
	Если РедДвижения = 0 Тогда
		Возврат;
	КонецЕсли;	
	КодКолонки 	= ТаблицаДвижений.ТекущаяКолонка();
	ТекЗначение = ТаблицаДвижений.ПолучитьЗначение(КодСтроки, КодКолонки);
	// изменение направления движения
	Если КодКолонки = "Движение" Тогда
		Если ТекЗначение > 3 Тогда
			НовоеЗначение = ?(ТекЗначение = 4, 4, ТекЗначение + 1);
			НовоеЗначение = ?(НовоеЗначение = 7, 5, НовоеЗначение);
		Иначе
			НовоеЗначение = ?(ТекЗначение = 1, 1, ТекЗначение + 1);
			НовоеЗначение = ?(НовоеЗначение = 4, 2, НовоеЗначение);
		КонецЕсли;	
	Иначе
		ТаблицаДвижений.ПолучитьПараметрыКолонки(КодКолонки, Тип, Длина, Точность);
		// ввод нового значения в таблицу
		Если ВвестиЗначение(НовоеЗначение, КодКолонки, Тип, Длина, Точность) = 0 Тогда
			НовоеЗначение = ТекЗначение;
		КонецЕсли;
	КонецЕсли;
	Если НовоеЗначение <> ТекЗначение Тогда
	    Модифицированность = 1;
		ОбновитьЗаголовокФормы();
		// сохранение нового значения в таблицу
		ТаблицаДвижений.УстановитьЗначение(КодСтроки, КодКолонки, НовоеЗначение);
		Если КодКолонки = "Движение" Тогда
			// изменение направления движения
			Если (НовоеЗначение = 2) или (НовоеЗначение = 5) Тогда
				ТаблицаДвижений.УстановитьЗначение(КодСтроки, "Приход", 1);
				ТаблицаДвижений.УстановитьЗначение(КодСтроки, "Расход", 0);
			ИначеЕсли (НовоеЗначение = 3) или (НовоеЗначение = 6) Тогда 
				ТаблицаДвижений.УстановитьЗначение(КодСтроки, "Приход", 0);
				ТаблицаДвижений.УстановитьЗначение(КодСтроки, "Расход", 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//*******************************************
// процедура обновления данных обработки в случае, когда не 
// закрыв форму обработки, пользователь вызывает ее повторно,
// но уже с другими параметрами
Процедура 	ОбновитьДанныеОбработки(Док)
	// решение по поводу уже введенных данных
	Если Модифицированность = 1 Тогда
		ТекстВопроса = "Документ изменен. Сохранить?";
		Ответ = Вопрос(ТекстВопроса, "Да+Нет+Отмена");
		Если Ответ = "Да" Тогда
			Провести();
		ИначеЕсли Ответ = "Отмена" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// загрузка переданных заново в обработку данных 
	КорректировкаЗаписейРегистров = Док;
	СинхронизироватьЗначенияРеквизитов(0);
	Форма.Обновить();
	ЗагрузитьНаборДвижений(КорректировкаЗаписейРегистров);
	СоздатьЗакладки();
	СинхронизироватьНаборДвижений(ТекущийРегистр());
	Модифицированность = 0;
	УстановитьДоступностьЭлементовДиалога();
	ОбновитьЗаголовокФормы();
	//\\
КонецПроцедуры
//*******************************************
// заполнение набора движений корректировки по документу
// - основанию
Процедура 	ЗаполнитьПоОснованию()
	
	ЗагрузитьНаборДвиженийИзРегистра(ДокументОснование, 1);
	СоздатьЗакладки();
	СинхронизироватьНаборДвижений(ТекущийРегистр());
	Модифицированность = 1;
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры
//*******************************************
Модифицированность = 0;

