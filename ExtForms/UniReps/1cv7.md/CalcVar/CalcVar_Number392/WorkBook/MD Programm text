Перем оФорма, РасшФормы, КонтКартинка, Хендл,
	ТабличноеПоле, ИсточникДанных, ПоставщикДанных,
		стрИмяФайлаБлокировки, тзЗаданий Экспорт, тзСтатистики;
Перем НачалоИнтервала, КонецИнтервала, фМакс;
Перем тзКолТабПоля, тзКолТабПоляСтанд,
	Колонка Экспорт, ДанныеСтроки Экспорт;
Перем МДВ;
Перем хмлФильтрЗапроса, ИмяФайлаЗапроса, хешКод, СеансаPID;
//*******************************************
Перем КодПоляАвтор, симвПоле, ВыбЗнач, Автор,
	Подразделение, симвКодГрафыОтбора, НомерГрафыОтбора, 
		ЗначениеГрафыОтбора;
//*******************************************
//
// Процедуры менеджера заданий 
//
//*******************************************
Процедура СнятьПаузу() 
	
	Попытка
		// маппинг на функцию модуля
		глмПланЗаданий.СнятьПаузу(РасшФормы);
	Исключение
	КонецПопытки;
	
КонецПроцедуры
//*******************************************
Функция ВзятьПаузу(Время = 1000)
	
	Попытка
		// маппинг на функцию модуля
		глмПланЗаданий.ВзятьПаузу(РасшФормы, Время);
	Исключение
	КонецПопытки;
	
КонецФункции	
//*******************************************
Процедура ЗапуститьНаВыполнение(Задание, спПараметры)
    
	Попытка
		// маппинг на функцию модуля
		глмПланЗаданий.ЗапуститьНаВыполнение(Контекст, 
			Задание, спПараметры, тзСтатистики);
	Исключение
	КонецПопытки;
	
КонецПроцедуры
//*******************************************
Процедура Планировщик()
	
	Попытка
		// маппинг на функцию модуля
		глмПланЗаданий.Планировщик(Контекст, Хендл, 
			тзЗаданий, тзСтатистики);
	Исключение
	КонецПопытки;
	
КонецПроцедуры
//*******************************************
Процедура ПланЗадания(тзЗаданий, стрЗадание, чОднократно, чПериод, чЗадержек) Экспорт
	
	глмТаблицаЗаданий.ПланЗадания(тзЗаданий, стрЗадание, 
		чОднократно, чПериод, чЗадержек);
	
КонецПроцедуры
//*******************************************
//
// Процедуры журнала
//
//*******************************************
Функция ЖурЗапрос(хмлФильтр)
	
	MetaDataWork = СоздатьОбъект("MetaDataWork");
	
	// параметры запроса, вычисление суб-подразделений,
	// авторы 
	Текст = глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
		"jQuery", "Секция_1") + РазделительСтрок;	
	//
	хмлЖурнал = хмлФильтр.SelectSingleNode("Фильтр/Журнал");
    
	хмлАвтор = хмлФильтр
		.SelectSingleNode("Фильтр/ОбщийРеквизитДокумента/Автор");
	
	ИдАвтор = хмлАвтор.text;
	Если глмМетаданные.Ид2Тип(ИдАвтор) = "Справочник.Подразделения" Тогда
		Подразделение = глмМетаданные.Ид2СтрокаИБ(ИдАвтор);
		Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
			"jQuery", "Секция_21") + РазделительСтрок 
				+ глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
					"jQuery", "Секция_22") + РазделительСтрок 
						+ глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
							"jQuery", "Секция_24") + РазделительСтрок;
	Иначе
		Автор = глмМетаданные.Ид2СтрокаИБ(ИдАвтор);
		Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
			"jQuery", "Секция_19") + РазделительСтрок 
				+ глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
					"jQuery", "Секция_22") + РазделительСтрок 
						+ глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
							"jQuery", "Секция_23") + РазделительСтрок;
	КонецЕсли;	
	//
	Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
		"jQuery", "Секция_2");		
	
	стрПоляПриемника = глмОбщиеФункции
		.ВзятьТекстЯчейкиТаблицы( Контекст, "jQuery", "Секция_16");
	
	стрПоляИсточника = глмОбщиеФункции
		.ВзятьТекстЯчейкиТаблицы( Контекст, "jQuery", "Секция_17");
	
	хмлОбщийРеквизитДокумента = хмлФильтр
		.SelectSingleNode("Фильтр/ОбщийРеквизитДокумента");
			
	Для й = 0 По хмлОбщийРеквизитДокумента.childNodes.length - 1 Цикл
		Если Метаданные
			.ОбщийРеквизитДокумента(хмлОбщийРеквизитДокумента
				.childNodes(й).tagName).Сортировка = 0 Тогда
					Продолжить;
		КонецЕсли;
					
		Текст = Текст + ", ord" + й;
		
		стрПоляПриемника = стрПоляПриемника + ", ord" + й;
			
		стрПоляИсточника = стрПоляИсточника + ", jur.sp" 
			+ MetaDataWork.ИДОбъекта(Метаданные
				.ОбщийРеквизитДокумента(хмлОбщийРеквизитДокумента
					.childNodes(й).tagName));
		
		ИмяРек = хмлОбщийРеквизитДокумента.childNodes(й).tagName;
		
		Тип = Метаданные.ОбщийРеквизитДокумента(ИмяРек).Тип;
		Вид = Метаданные.ОбщийРеквизитДокумента(ИмяРек).Вид;
		Длина = Метаданные.ОбщийРеквизитДокумента(ИмяРек).Длина;
		Точность = Метаданные.ОбщийРеквизитДокумента(ИмяРек).Точность;
			
		Если Тип = "Число" Тогда
			Текст = Текст + " NUMERIC(" 
				+ Длина + "," + Точность + ")";
				
		ИначеЕсли Тип = "Строка" Тогда
			Текст = Текст + " CHAR("+ Длина + ")";
			
		ИначеЕсли Тип = "Дата" Тогда
			Текст = Текст + " DATETIME";
			
		ИначеЕсли Тип = "Неопределенный" Тогда
			Текст = Текст + " CHAR(23)";
			
		Иначе
			
			Текст = Текст + " CHAR(9)";
		КонецЕсли;	
	КонецЦикла;

	хмлГрафаОтбора = хмлФильтр
		.SelectSingleNode("Фильтр/ГрафаОтбора");
	
	Для НомерГрафыОтбора = 0 По 
		хмлГрафаОтбора.childNodes.length - 1 Цикл
			Текст = Текст + ", go" 
				+ НомерГрафыОтбора + " CHAR(23)";

		стрПоляПриемника = стрПоляПриемника 
			+ ", go" + НомерГрафыОтбора;
	
		стрПоляИсточника = стрПоляИсточника 
			+ ", m.val" + НомерГрафыОтбора; 
	КонецЦикла;			

	Текст = Текст + ")" + РазделительСтрок;
	
	КодПоляАвтор = MetaDataWork.ИДОбъекта(Метаданные
		.ОбщийРеквизитДокумента("Автор"));
	
	//Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
	//	"jQuery", "Секция_3") + РазделительСтрок + глмОбщиеФункции
	//		.ВзятьТекстЯчейкиТаблицы(Контекст, "jQuery", "Секция_4") 
	//			+ РазделительСтрок + глмОбщиеФункции
	//				.ВзятьТекстЯчейкиТаблицы(Контекст, "jQuery", 
	//					"Секция_5") + РазделительСтрок;
	//Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
	//	"jQuery", "Секция_28") + РазделительСтрок;
		
	Если Метаданные.Журнал(глмМетаданные
		.Ид2Ссылка(хмлЖурнал.text)).ТипЖурнала = "Общий" Тогда
			Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
				"jQuery", "Секция_31") + РазделительСтрок + глмОбщиеФункции
					.ВзятьТекстЯчейкиТаблицы(Контекст, "jQuery", "Секция_28") 
						+ РазделительСтрок + глмОбщиеФункции
							.ВзятьТекстЯчейкиТаблицы(Контекст, "jQuery", 
								"Секция_29") + РазделительСтрок;
	Иначе		
		Текст = Текст + "JournId = '" + Прав("      " 
			+ _IdToStr(MetaDataWork.ИдОбъекта(Метаданные
				.Журнал(глмМетаданные.Ид2Ссылка(хмлЖурнал.text)))), 4) + "'" 
					+ РазделительСтрок + глмОбщиеФункции
						.ВзятьТекстЯчейкиТаблицы(Контекст, "jQuery", "Секция_32") 
							+ РазделительСтрок + глмОбщиеФункции
								.ВзятьТекстЯчейкиТаблицы(Контекст, "jQuery", 
									"Секция_28") + РазделительСтрок 
										+ глмОбщиеФункции
											.ВзятьТекстЯчейкиТаблицы(Контекст, 
												"jQuery", "Секция_30") 
													+ РазделительСтрок;
	КонецЕсли;
	
	Текст = Текст + глмОбщиеФункции
		.ВзятьТекстЯчейкиТаблицы(Контекст, "jQuery", "Секция_4") 
			+ РазделительСтрок + глмОбщиеФункции
				.ВзятьТекстЯчейкиТаблицы(Контекст, "jQuery", 
					"Секция_5") + РазделительСтрок;
    
	хмлДокумент = хмлФильтр.SelectSingleNode("Фильтр/Документ");
	ИдВидаДокумента = хмлДокумент.text;
	
	ВидДокумента = СокрЛП(глмМетаданные.Ид2Ссылка(ИдВидаДокумента));
	Если ВидДокумента <> "" Тогда
		
		симвПоле = "jur.iddocdef";
		ВыбЗнач = Прав("      " 
			+ _IdToStr(MetaDataWork.ИдОбъекта(Метаданные
				.Документ(ВидДокумента))), 4);
		
		Текст = Текст + глмОбщиеФункции
			.ВзятьТекстЯчейкиТаблицы(Контекст, "jQuery", "Секция_51") 
				+ РазделительСтрок; 
		
	КонецЕсли;	

   	Для й = 0 По хмлОбщийРеквизитДокумента.childNodes.length - 1 Цикл
   		Ид = хмлОбщийРеквизитДокумента.childNodes(й).text;
   		//Если ПустоеЗначение(глмМетаданные.Ид2Ссылка(Ид)) = 0 Тогда
   		//	симвПоле = "ord" + й;
   		//	ВыбЗнач = глмМетаданные.Ид2СтрокаИБ(Ид);
   		//	Текст = Текст + глмОбщиеФункции
   		//		.ВзятьТекстЯчейкиТаблицы(Контекст, 
		//			"jQuery", "Секция_51") 
		//				+ РазделительСтрок;
   		//КонецЕсли;	
    КонецЦикла;
	
	Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
		"jQuery", "Секция_6") + РазделительСтрок; 
	
	Для НомерГрафыОтбора = 0 По
		хмлГрафаОтбора.childNodes.length - 1 Цикл
			Текст = Текст + глмОбщиеФункции
				.ВзятьТекстЯчейкиТаблицы(Контекст, 
					"jQuery", "Секция_15") 
						+ РазделительСтрок;
	КонецЦикла;		
		
	Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
		"jQuery", "Секция_7") + РазделительСтрок; 
	
	ФильтрПустыхЗначений = "";
		
	Для НомерГрафыОтбора = 0 По
	
		хмлГрафаОтбора.childNodes.length - 1 Цикл
			симвКодГрафыОтбора = Прав(_IdToStr(MetaDataWork
				.ИДОбъекта(Метаданные.ГрафаОтбора(хмлГрафаОтбора
					.childNodes(НомерГрафыОтбора).tagName))), 4);
		Текст = Текст + глмОбщиеФункции
			.ВзятьТекстЯчейкиТаблицы(Контекст, 
				"jQuery", "Секция_8") 
					+ РазделительСтрок;
					
   		Ид = хмлГрафаОтбора.childNodes(НомерГрафыОтбора).text;
		Если ПустоеЗначение(глмМетаданные.Ид2Ссылка(Ид)) = 0 Тогда
   			ЗначениеГрафыОтбора = глмМетаданные.Ид2ЗначениеГрафыЖурнала(Ид);
   			//Текст = Текст + глмОбщиеФункции
   			//	.ВзятьТекстЯчейкиТаблицы(Контекст, 
			//		"jQuery", "Секция_9") 
			//			+ РазделительСтрок;
			ФильтрПустыхЗначений = ФильтрПустыхЗначений
				+ глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
					"jQuery", "Секция_18") + РазделительСтрок;
   		КонецЕсли;	
		Текст = Текст + глмОбщиеФункции
			.ВзятьТекстЯчейкиТаблицы(Контекст, 
				"jQuery", "Секция_10") 
					+ РазделительСтрок;
	КонецЦикла;		

	Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
		"jQuery", "Секция_11") + РазделительСтрок 
			+ ФильтрПустыхЗначений + РазделительСтрок 
				+ глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
					"jQuery", "Секция_12");
		
	Текст = Текст + "(" + стрПоляПриемника + "); 
		|VALUES(" + стрПоляИсточника + ")" + РазделительСтрок; 
	
	Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
		"jQuery", "Секция_25");
		
	Если глмМетаданные.Ид2Тип(ИдАвтор) = "Справочник.Подразделения" Тогда
		Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
			"jQuery", "Секция_26");
	КонецЕсли;
		
	Текст = Текст + глмОбщиеФункции.ВзятьТекстЯчейкиТаблицы(Контекст, 
		"jQuery", "Секция_27");
		
	Возврат Текст;
	
КонецФункции

//*******************************************
Функция РазложИнтервал(Интервал)
	
	Рез = СоздатьОбъект("СписокЗначений");
	
	Ост = Интервал / 1000;
	
	Часов = Цел(Ост / 60 / 60);
	
	Ост = Ост - Часов * 60 * 60;
	
	Минут = Цел(Ост / 60);
	
	Ост = Ост - Минут * 60;
	
	Рез.ДобавитьЗначение("" + Часов 
		+ " час. " + Минут + " мин. " 
			+ Окр(Ост) + " сек.", 
				"Значение");
				
	Если Часов > 0 Тогда
		//FireBrick	R	G		B
		Цвет = 		70 +13*256 +13*65536;

	ИначеЕсли Минут > 0 Тогда
		// Gold
		Цвет = 		100+84*256  +0*65536;
		
	Иначе
		// Forest Green
		Цвет = 		13 +55*256 +13*65536;
		
	КонецЕсли;

	Рез.ДобавитьЗначение(Цвет, "Цвет");

	Возврат Рез;	
	
КонецФункции	

//*******************************************
Функция ОбновитьДанные()
    Перем Старт, Финиш;
	
	//РасшФормы.ОбработкаОжидания("ОбновитьДанные", 0); 
	
	Текст = СоздатьОбъект("Текст");
	Текст.Открыть(КаталогИб() + ИмяФайлаЗапроса + ".prg");
	
	тЗапрос = "";
	Для й = 1 По Текст.КоличествоСтрок() Цикл
		тЗапрос = тЗапрос + ?(тЗапрос = "", "", 
			РазделительСтрок) + Текст.ПолучитьСтроку(й);
	КонецЦикла;	
	
	Если хешКод <> глмХеш.Код32_16(тЗапрос, -1, 0) Тогда
		Сообщить("Разрушение конфигурационного файла запроса");
		Возврат 0;
	КонецЕсли;	
	
	// Французов 20180706: оптимизация
	//ТекстЗапроса = "select " + ИмяФайлаЗапроса 
	//	+ "('" + СокрЛП(СеансаPID)
	//		+ "','" + Формат(НачалоИнтервала, "ДГГГГММДД") 
	//			+ "','" + Формат(КонецИнтервала, "ДГГГГММДД") 
	//				+ "') from 1ssystem";
	ТекстЗапроса = ИмяФайлаЗапроса + "('" + СокрЛП(СеансаPID)	
		+ "','" + Формат(НачалоИнтервала, "ДГГГГММДД") + "','" 
		+ Формат(КонецИнтервала, "ДГГГГММДД") + "')";
	//\\				
	Старт = _GetPerformanceCounter();
	
	глмOLEDBQuery.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);
    
	Финиш = _GetPerformanceCounter();
	
	////Сообщить(Финиш - Старт);
	//
	ИнтервалОпросаИБ = Макс(10000, (Финиш - Старт) * 100);
	
	сзИнт = РазложИнтервал(ИнтервалОпросаИБ);
	
	Форма.ИнтервалОпросаИБ.Заголовок(сзИнт.Получить("Значение")); 
	Форма.ИнтервалОпросаИБ.Цвет(сзИнт.Получить("Цвет"));
	
	глмOLEDBQuery.ВыполнитьИнструкцию(
		"DROP TABLE jAU" + СеансаPID, "", 1, 0, 0, 0);

	глмOLEDBQuery.ВыполнитьИнструкцию(
		"DROP TABLE jDE" + СеансаPID, "", 1, 0, 0, 0);
	
	Re_Set = глмOLEDBQuery.ВыполнитьИнструкцию("select * from jDO" 
		+ СокрЛП(СеансаPID), "", 1, 0, 0, 0);
    
	глмOLEDBQuery.ВыполнитьИнструкцию(
		"DROP TABLE jDO" + СеансаPID, "", 1, 0, 0, 0);
	
	Если глмOLEDBQuery.ТекстОшибки(Re_Set) = "Нет данных" Тогда
		Re_Set.Выгрузить(ИсточникДанных); 

	Иначе
		глмОбщиеФункции.ЗадержПрим(3000);
		
		ОбновитьДанные();
	КонецЕсли;	
	
	//РасшФормы.ОбработкаОжидания("ОбновитьДанные", ИнтервалОпросаИБ);
	ВзятьПаузу(ИнтервалОпросаИБ);
	
    Возврат 1;
	
КонецФункции

//*******************************************
Функция ЗначГрОтбора(Стр)
	Перем Рез;
	
	Тип = Лев(Стр, 1);
	
	Если Тип = "N" Тогда
		Рез = Число(Прав(Стр, 22));
		
	ИначеЕсли Тип = "U" Тогда
		Рез = "<>";
		
	ИначеЕсли Тип = "B" Тогда
		Рез = МДВ.ЗначениеИзСтрокиБД(11, 
			_StrToId(Сред(Стр, 3, 4)), 
				Сред(Стр, 7, 9));
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

//*******************************************
Функция ТекстВБуфер(Текст)
	
	Объект = СоздатьОбъект("htmlfile");
	Объект.ParentWindow.ClipboardData.Setdata("Text", Текст);
	
	Возврат Текст;
	
КонецФункции	

//*******************************************
Функция ТекстИзБуфера()
	Перем Текст;
	
	Объект = СоздатьОбъект("htmlfile");
	Возврат Объект.ParentWindow.ClipboardData.GetData("Text");
	
КонецФункции	

//*******************************************
Функция ПровЗаписьЧисла(ВыбСтрока)
	
	Для Й = 1 По СтрДлина(ВыбСтрока) Цикл
		Если Найти("0123456789.-", 
			Сред(ВыбСтрока, Й, 1)) = 0 Тогда
				Возврат 0;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции	

//*******************************************
Функция ОбновитьСумму()
	
	Попытка
		ТекЗнач = ТекстИзБуфера();
	Исключение
		Возврат 0;
	КонецПопытки;	
	
	Форма.Сумма.Заголовок("=" 
		+ Формат(?(ПровЗаписьЧисла(ТекЗнач) 
			= 0,0, ТекЗнач), "Ч015.2, "));
			
	Возврат 1;
	
КонецФункции	

//*******************************************
Функция ТекущееЗначение(Внутр=0)
	
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	
	ТекущийДокумент = МДВ.ЗначениеИзСтрокиБД(12, 
		_StrToId(ТабличноеПоле.ТекущиеДанные.iddocdef), 
			ТабличноеПоле.ТекущиеДанные.iddoc);

	Вид = ТекущийДокумент.Вид();
	
	Если глмОбщиеФункции.ЕстьРеквизитШапки("Сумма", Вид) = 1 Тогда
		Сумма = ТекущийДокумент.Сумма;
		
	ИначеЕсли глмОбщиеФункции.ЕстьРеквизитМнЧ("Сумма", Вид) = 1 Тогда
		Попытка
			Сумма = ТекущийДокумент.Итог("Сумма");
		Исключение
			Сумма = 0;
		КонецПопытки;	
	Иначе
		Сумма = 0;
		
	КонецЕсли;		
	
	нСтр = 0;
	Если тзКолТабПоля.НайтиЗначение(ТабличноеПоле
		.ТекущаяКолонка.Имя, нСтр, "Имя") = 1 Тогда
	
		ШаблонВычисления = тзКолТабПоля
			.ПолучитьЗначение(нСтр, "ШаблонВычисления");
		
		Если СокрЛП(ШаблонВычисления) <> "" Тогда
			ТекЗнач = Шаблон("[" + ?(Внутр=0, ШаблонВычисления, 
				"ЗначениеВСтрокуВнутр(" + ШаблонВычисления 
					+ ")") + "]");
		Иначе
			ТекЗнач = ТабличноеПоле.ТекущиеДанные
				.Получить(тзКолТабПоля.ПолучитьЗначение(нСтр, 
					"Данные"));
    	КонецЕсли;	
	КонецЕсли;
    
	Возврат ТекЗнач;

КонецФункции	

//*******************************************
Процедура СформироватьЗакладки(Ид="")
	Перем ТекСтр;
	
	Форма.ИспользоватьЗакладки(1);
	
	Для й = 1 По Метаданные.Журнал() Цикл

		Если Метаданные.Журнал(й).ДляЖурналаПодчиненныхДокументов = 0 Тогда

			Форма.Закладки.ДобавитьЗначение(Метаданные.Журнал(й).Идентификатор, 
				Метаданные.Журнал(й).Синоним);
			
			Если Ид <> "" Тогда
				Если Ид = Метаданные.Журнал(й).Идентификатор Тогда
					ТекСтр = Форма.Закладки.РазмерСписка();
				КонецЕсли;	
			ИначеЕсли Метаданные.Журнал(й).ТипЖурнала = "Общий" Тогда
				ТекСтр = Форма.Закладки.РазмерСписка();//й - 1;
				
			КонецЕсли;		
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Форма.Закладки.ТекущаяСтрока(ТекСтр);
	
КонецПроцедуры

//*******************************************
Процедура ВычислитьФильтрПоЗакладке(БезОткрытияОкнаВыбора=1)
	Перем хмлПарсер, хмлНаборСхем;
		
	Если глмФильтр.СхемаФильтраЖурнала(хмлПарсер, 
		хмлНаборСхем) = 1 Тогда

			Параметр = СоздатьОбъект("СписокЗначений");
			Параметр.ДобавитьЗначение(хмлПарсер, "хмлСхема");
			Параметр.ДобавитьЗначение(БезОткрытияОкнаВыбора, 
				"БезОткрытияОкнаВыбора");
			
			сзПредопр = СоздатьОбъект("СписокЗначений");
			сзПредопр.ДобавитьЗначение(глПользователь.Подразделение, "Автор");
			сзПредопр.ДобавитьЗначение(Форма.Закладки
				.ПолучитьЗначение(Форма.Закладки.ТекущаяСтрока()), "Журнал");
			сзПредопр.ДобавитьЗначение("<...>", "Основание");
			сзПредопр.ДобавитьЗначение("<...>", "Фирма");
			сзПредопр.ДобавитьЗначение("<...>", "Последовательность"); 
			
			Параметр.ДобавитьЗначение(сзПредопр, "сзПредопр");
		    
		ОткрытьФормуМодально("Обработка.ФильтрЗапроса", Параметр);
		
		хмлФильтрЗапроса = Параметр.Получить("Результат");

	КонецЕсли;	
	
КонецПроцедуры

//*******************************************
Процедура УдалитьВремФайлы()
	
	ФС.УстТекКаталог(КаталогИб());

	ИмяФайла = ФС.НайтиПервыйФайл("j" + СеансаPID + "_*.*");	
		
	Пока ФС.СуществуетФайл(ИмяФайла) = 1 Цикл
		
		Попытка
		
			ФС.УдалитьФайл(ИмяФайла);
			
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
		ИмяФайла = ФС.НайтиСледующийФайл();
		
	КонецЦикла;	
	
КонецПроцедуры

//*******************************************
Процедура СохранитьЗапрос()
	
	УдалитьВремФайлы();
	
	ТекстЗапроса = ЖурЗапрос(хмлФильтрЗапроса);

	хешКод = глмХеш.Код32_16(ТекстЗапроса, -1, 0);
	
	ИмяФайлаЗапроса = "j" + СеансаPID + "_" + хешКод + "_qry";
    
	Текст = СоздатьОбъект("Текст");

	Текст.ДобавитьСтроку(ТекстЗапроса);

	Текст.Записать(КаталогИб() + ИмяФайлаЗапроса + ".prg");

КонецПроцедуры

//*******************************************
Процедура ПрименитьФильтр()
    
	СохранитьЗапрос();
	
	ОбновитьДанные();

	ТабличноеПоле.ОбновитьСтроки();
    ТабличноеПоле.ТекущаяКолонка 
		= ТабличноеПоле.Колонки.Получить(3);
	
КонецПроцедуры	

//*******************************************
Процедура СоздатьКолонки()
	
	ТабличноеПоле.ТаймаутОбновления	= 0;
	
	ТабличноеПоле.Колонки.Очистить();
	
	Для нСтр = 1 По тзКолТабПоля.КоличествоСтрок() Цикл
		
		// новая графа журнала
		Колонка = ТабличноеПоле.Колонки
			.Добавить(тзКолТабПоля.ПолучитьЗначение(нСтр, "Имя"));
        
		// свойства колонки-графы журнала	
		Для нКол = 1 По тзКолТабПоля.КоличествоКолонок() Цикл
			
			имяКол = тзКолТабПоля.ПолучитьПараметрыКолонки(нКол);

			Если (имяКол = "Имя") 
				ИЛИ (имяКол = "ШаблонВычисления") 
					ИЛИ (имяКол = "Стандартный") Тогда
						Продолжить;
			КонецЕсли;
				
			Если ТипЗначенияСтр(тзКолТабПоля
				.ПолучитьЗначение(нСтр, нКол)) = "" Тогда
					Продолжить;
			КонецЕсли;
			
			глИницВнешМодуля("Колонка." + имяКол 
				+ " = тзКолТабПоля.ПолучитьЗначение(" 
					+ нСтр + ", " + нКол + ");", 
						Контекст, "");	
		КонецЦикла;
	КонецЦикла;	
    
	Колонка = ТабличноеПоле.Колонки.Получить(2);
	Картинка = СоздатьОбъект("Картинка");
	Картинка.Загрузить(КаталогИБ() + "\ExtForms\j2.bmp");
	Колонка.УстановитьКартинкиСтрок(Картинка, 15);
	
	Колонка = ТабличноеПоле.Колонки.Получить(3);
	Картинка = СоздатьОбъект("Картинка");
	Картинка.Загрузить(КаталогИБ() + "\ExtForms\j3.bmp");
	Колонка.УстановитьКартинкиСтрок(Картинка, 15);

	Колонка = ТабличноеПоле.Колонки.Получить(4);
	Колонка.УстановитьКартинкиСтрок(Картинка, 15);

	ТабличноеПоле.ПоставщикДанных = ПоставщикДанных;
	ТабличноеПоле.ТаймаутОбновления	= 15;
	ТабличноеПоле.ОбновитьСтроки();

КонецПроцедуры	

//*******************************************
Процедура ПриВыбореЗакладки()
    Перем хмлНастройка;
	
	Каталог = КаталогПользователя();
	ИмяФайла = Форма.Закладки.ПолучитьЗначение(Форма
		.Закладки.ТекущаяСтрока()) + ".xml";

	Если ФС.СуществуетФайл(СокрЛП(Каталог + ИмяФайла)) = 1 Тогда
		Если глмХМЛ
			.ПрочитатьДокументИзФайла(хмлНастройка, 
				"", "", СокрЛП(Каталог + ИмяФайла)) = 1 Тогда

				Таблица = глмОбщиеФункции
					.ЗагрузитьТаблицуИзХМЛ(хмлНастройка);
				Таблица.Выгрузить(тзКолТабПоля);	
		Иначе		
			тзКолТабПоляСтанд.Выгрузить(тзКолТабПоля);	
			
		КонецЕсли;
	Иначе
		тзКолТабПоляСтанд.Выгрузить(тзКолТабПоля);	
		
	КонецЕсли;
	
	СоздатьКолонки();
	
	ВычислитьФильтрПоЗакладке();
 
    ПрименитьФильтр();
	
КонецПроцедуры	

//*******************************************
Процедура ПерерисоватьТабПоле()
	
	аТабПоле = РасшФормы.ПолучитьАтрибут("ТабПоле");

	аТабПоле.УстановитьКоординаты(5, 
		55, РасшФормы.Ширина - 10, РасшФормы.Высота - 128);
		
	// подвал формы:
	аКоммент = РасшФормы.ПолучитьАтрибут("тКоммент");
	аКоммент.УстановитьКоординаты(5, РасшФормы.Высота - 65);
	
	аТекстКоммент = РасшФормы.ПолучитьАтрибут("ТекстКомментария");
	аТекстКоммент.УстановитьКоординаты(, РасшФормы.Высота - 65);

	аИнт = РасшФормы.ПолучитьАтрибут("ИнтервалОпросаИБ");
	аИнт.УстановитьКоординаты(, РасшФормы.Высота - 34);
	
	аТекстИнт = РасшФормы.ПолучитьАтрибут("ТекстИнтервал");
	аТекстИнт.УстановитьКоординаты(, РасшФормы.Высота - 34);
	
	арГруппДействия = РасшФормы.ПолучитьАтрибут("рГруппДействия");
	арГруппДействия.УстановитьКоординаты(, РасшФормы.Высота - 45);
	
	афлГруппДействий = РасшФормы.ПолучитьАтрибут("флГруппДействий");
	афлГруппДействий.УстановитьКоординаты(, РасшФормы.Высота - 32);

	акнПометки = РасшФормы.ПолучитьАтрибут("кнПометки");
	акнПометки.УстановитьКоординаты(, РасшФормы.Высота - 34);

	акнДействия = РасшФормы.ПолучитьАтрибут("кнДействия");
	акнДействия.УстановитьКоординаты(, РасшФормы.Высота - 34);
	
КонецПроцедуры

//*******************************************
Процедура ТабПолеПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки, ТипРегиона)
	
	Если ТабличноеПоле.Колонки.Количество() 
		<> тзКолТабПоля.КоличествоСтрок() Тогда
			Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДанныеСтроки.ДанныеСтроки;
	
	ТекущийДокумент = МДВ.ЗначениеИзСтрокиБД(12, 
		_StrToId(ТекущиеДанные.iddocdef), 
			ТекущиеДанные.iddoc);

	//Автор = МДВ.ЗначениеИзСтрокиБД("Справочник.Пользователи", 
	//	ДанныеСтроки.ДанныеСтроки.author);
	
	Вид = ТекущийДокумент.Вид();
	
	Синоним = Метаданные.Документ(Вид).Синоним;
	Синоним = ?(СокрЛП(Синоним) = "", Вид, Синоним);
	
	//Если глЕстьРеквизитШапки("Сумма", Вид) = 1 Тогда
	//	Сумма = ТекущийДокумент.Сумма;
	//	
	//ИначеЕсли глЕстьРеквизитМнЧ("Сумма", Вид) = 1 Тогда
	//	Попытка
	//		Сумма = ТекущийДокумент.Итог("Сумма");
	//	Исключение
	//		Сумма = 0;
	//	КонецПопытки;	
	//Иначе
	//	Сумма = 0;
	//	
	//КонецЕсли;		
	
	// подпись
	Подписан = 0;

	Если глмОбщиеФункции.ЕстьРеквизитШапки("Подписан", Вид) = 1 Тогда
		Подписан = ТекущийДокумент.Подписан;
	КонецЕсли;

	Подписан = ?(Подписан = 0, 1, Подписан);

	Ячейка = ДанныеСтроки.Ячейки.Get(4);
	Ячейка.ИндексКартинки = Подписан;
	//\\
	
	Для нСтр = 1 По тзКолТабПоля.КоличествоСтрок() Цикл
		
		ШаблонВычисления = тзКолТабПоля
			.ПолучитьЗначение(нСтр, "ШаблонВычисления");
		
		Если СокрЛП(ШаблонВычисления) <> "" Тогда
			ТекЗнач = Шаблон("[" + ШаблонВычисления + "]");
			ТекФорм = тзКолТабПоля.ПолучитьЗначение(нСтр, "Формат");
			Если СокрЛП(ТекФорм) <> "" Тогда
				ТекЗнач = Формат(ТекЗнач, ТекФорм);
			КонецЕсли;	
			Ячейка = ДанныеСтроки.Ячейки.Get(нСтр - 1);
			Ячейка.УстановитьТекст(ТекЗнач);
			Ячейка.ГоризонтальноеВыравнивание = тзКолТабПоля
				.ПолучитьЗначение(нСтр, "ГоризонтальноеВыравнивание");
    	КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

//*******************************************
Процедура ПриОткрытии()

	оФорма = СоздатьОбъект("Форма");
	оФорма.УстановитьФорму(Форма);
	
	РасшФормы = СоздатьОбъект("РасширениеФормы");
	РасшФормы.УстановитьФорму(Форма);
	
	СформироватьЗакладки(?(ТипЗначения(Форма.Параметр)=100, 
		Форма.Параметр.Получить("Журнал"), ""));
	
КонецПроцедуры

//*******************************************
Процедура ПриЗакрытии()
	
	РасшФормы.ОбработкаОжидания("ОбновитьДанные", 0); 
	
	//РасшФормы = "";
	
	//ПоставщикДанных = "";
	
	Если Хендл <> 0 Тогда
		Попытка
			глмБлокировка.Модуль.UnlockFile(Хендл,
				1073741772, 0, 1, 0);
				
			глмБлокировка.Модуль.CloseHandle(Хендл);
			
		Исключение
	
		КонецПопытки;
	КонецЕсли;
	
    УдалитьВремФайлы();
	
КонецПроцедуры	

//*******************************************
Процедура ПослеОткрытия()
    
	ПерерисоватьТабПоле();
	
	ТабличноеПоле = оФорма
		.СоздатьЭлементУправления("ТабличноеПоле", "ТабПоле");

    СоздатьКолонки();
	
	ПриВыбореЗакладки();
	
	Хендл = глмБлокировка.Модуль.CreateFile(стрИмяФайлаБлокировки,
		глмБлокировка.Модуль.GENERIC_READ_WRITE, 
			глмБлокировка.Модуль.FILE_SHARE_READ_WRITE, 0, 
				глмБлокировка.Модуль.OPEN_ALWAYS, глмБлокировка
					.Модуль.FILE_ATTRIBUTE_NORMAL, 0);
	
	глмПланЗаданий.ЗапуститьПланировщик(РасшФормы);				
	//РасшФормы.ОбработкаОжидания("ОбновитьДанные", 60000); 
		
КонецПроцедуры

//*******************************************
Процедура ВернутьСтатусОкна()
	
	РасшФормы.ОбработкаОжидания("ВернутьСтатусОкна", 0);
	
	//РасшФормы.Максимизирована = фМакс;
	Если фМакс = 1 Тогда
		Окна = СоздатьОбъект("Окна");
		Окна.Максимизировать(Форма);
	КонецЕсли;
	
КонецПроцедуры	

//*******************************************
Процедура ПриИзмененииРазмераОкна(ТипСобытия, Ширина, Высота)
	
   	ПерерисоватьТабПоле();
	
КонецПроцедуры

//*******************************************
Процедура Действие_Фильтр()
	
	ВычислитьФильтрПоЗакладке(0);
 	
    ПрименитьФильтр();	
	
КонецПроцедуры

//*******************************************
Процедура Действие_ФильтрПоЗначениюПоля()
	
	//ВычислитьФильтрПоЗакладке(1);
    
	Выборка = хмлФильтрЗапроса.SelectNodes("//"	
		+ СтрЗаменить(ТабличноеПоле
			.ТекущаяКолонка.Имя, " ", "_"));
			
	Если Выборка.length <> 0 Тогда
		Выборка.item(0).text = ТекущееЗначение(1);
	КонецЕсли;	
		
    ПрименитьФильтр();
	
КонецПроцедуры

//*******************************************
Процедура Действие_Новый()
	Перем ВыбТип, Конт;
	
	тзОбъекты = глмМетаданные.ВыбратьОбъекты(глмМетаданные
		.Тип2Ид("Документ"));
	
	сзВидыОб = СоздатьОбъект("СписокЗначений");
		
	тзОбъекты.ВыбратьСтроки();
	Пока тзОбъекты.ПолучитьСтроку() = 1 Цикл
		Если глмМетаданные.ЭтоКаталог(тзОбъекты.Ид) = 0 Тогда
			Об = глмМетаданные.Ид2Ссылка(тзОбъекты.Ид);
			сзВидыОб.ДобавитьЗначение(ТипЗначенияСтр(Об) 
				+ "." + Об.Вид(), Об.Вид());
		КонецЕсли;	
	КонецЦикла;	
	
	Если сзВидыОб.ВыбратьЗначение(ВыбТип, "Выбор типа объекта", , 60) = 1 Тогда
		ОткрытьФорму(ВыбТип, Конт);
		
		// Французов 09.06.17: обобщение корректировки движений
		Попытка
		//
		Конт.Форма.Обновить();
		//
		Исключение
		КонецПопытки;
		//\\
	КонецЕсли;	
	
КонецПроцедуры

//*******************************************
Процедура Действие_Изменить()
	Перем Конт;
	
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	ОткрытьФорму(МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
		ТекущиеДанные.iddoc).ТекущийДокумент(), Конт, 0);
	
	Конт.Форма.Обновить();
	
КонецПроцедуры

//*******************************************
Процедура Действие_Просмотр()
	Перем Конт;
	
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	ОткрытьФорму(МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
		ТекущиеДанные.iddoc).ТекущийДокумент(), Конт, 1);
	
	Конт.Форма.Обновить();
	
КонецПроцедуры

//*******************************************
Процедура Действие_Копировать()	
	Перем хмлПарсер, хмлНаборСхем, хмлКорень;
	Перем Конт;
	
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
		ТекущиеДанные.iddoc).ТекущийДокумент();
		
	// ... а задумка была хорошая...
	//хмлУзел = "";
	//Попытка
	//	Результат = глмХМЛ.СоздатьЭлементДокумента(хмлПарсер, хмлНаборСхем, 
	//		хмлКорень, "ROOT", "windows-1251") * глмХМЛ.СериализоватьОбъект(ТекДок, 
	//			хмлПарсер, хмлНаборСхем, хмлУзел);
	//Исключение
	//	Сообщить(
	//		ОписаниеОшибки());	
	//	Возврат;
	//КонецПопытки;
	//
	//хмлКорень.appendChild(хмлУзел);
	//
	//НовДок = "";
	//
	//глмХМЛ.ПрочитатьОбъект(НовДок, хмлПарсер, хмлНаборСхем, хмлУзел, 0);
	//
	//ОткрытьФормуМодально(НовДок, Конт, 0);

	ОткрытьФорму("Документ." + ТекДок.Вид(), Конт);
	
	Для Й = 1 По Метаданные.Документ(ТекДок.Вид()).РеквизитШапки() Цикл
		ИмяРек = Метаданные.Документ(ТекДок.Вид()).РеквизитШапки(Й);
		Конт.УстановитьАтрибут(ИмяРек, ТекДок.ПолучитьАтрибут(ИмяРек));
	КонецЦикла;	
	
	Если ТекДок.КоличествоСтрок() > 0 Тогда
		ТекДок.ВыбратьСтроки();
		Пока ТекДок.ПолучитьСтроку() = 1 Цикл
			Конт.НоваяСтрока();
			Для Й = 1 По Метаданные.Документ(ТекДок.Вид())
				.РеквизитТабличнойЧасти() Цикл
					ИмяРек = Метаданные.Документ(ТекДок.Вид())
						.РеквизитТабличнойЧасти(Й);
					Конт.УстановитьАтрибут(ИмяРек, 
						ТекДок.ПолучитьАтрибут(ИмяРек));
			КонецЦикла;			
		КонецЦикла;	
	КонецЕсли;	
	
	Конт.Форма.Обновить();
	
КонецПроцедуры

//*******************************************
Процедура Действие_НаОсновании()
	Перем ВыбТип, Конт;
	
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
		ТекущиеДанные.iddoc).ТекущийДокумент();
	
	сзВидыОб = СоздатьОбъект("СписокЗначений");
		
	Для Й = 1 По Метаданные.Документ(ТекДок.Вид())
		.ВводимыеНаОснованииДокументы.Количество() Цикл
			
			Вид = Метаданные.Документ(ТекДок.Вид())
				.ВводимыеНаОснованииДокументы.Получить(Й)
					.Идентификатор;
					
			сзВидыОб.ДобавитьЗначение("Документ." 
				+ Вид, Вид);
	КонецЦикла;		
	
	Если сзВидыОб.ВыбратьЗначение(ВыбТип, "Выбор типа объекта", , 60) = 1 Тогда
		ОткрытьФорму(ВыбТип, Конт, ТекДок);
		
		Конт.Форма.Обновить();
	КонецЕсли;	

КонецПроцедуры

//*******************************************
Процедура Действие_Удалить()

	ТекущаяКолонка = ТабличноеПоле.ТекущаяКолонка;
	
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
		ТекущиеДанные.iddoc).ТекущийДокумент();
	
	Документы = СоздатьОбъект("Документ");
	Документы.НайтиДокумент(ТекДок);
	
    Попытка
		Если Документы.ПометкаУдаления() = 0 Тогда
			Документы.Удалить(0);
		Иначе
			Документы.СнятьПометкуУдаления();
		КонецЕсли;	
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	ПрименитьФильтр();
	
	ТабличноеПоле.ТекущаяКолонка = ТекущаяКолонка;
	
КонецПроцедуры

//*******************************************
Процедура Действие_Найти()
	Перем Конт;
	
	// статус окна для возврата
	фМакс = РасшФормы.Максимизирована;
	
	НомерДокумента = "";
	
	Попытка
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
		ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
			ТекущиеДанные.iddoc).ТекущийДокумент();
		НомерДокумента = ТекДок.НомерДок;	
	Исключение
	
	КонецПопытки;
    
	Параметр = СоздатьОбъект("СписокЗначений");
	Параметр.ДобавитьЗначение(0, "Режим");
	Параметр.ДобавитьЗначение(1, "флИнтервал");
	Параметр.ДобавитьЗначение(НачалоИнтервала, "НачДата");
	Параметр.ДобавитьЗначение(КонецИнтервала, "КонДата");
	Параметр.ДобавитьЗначение(НомерДокумента, "НомерДокумента");
	
	ОткрытьФормуМодально("Обработка.ПоискПоНомеруДокумента", Параметр);
	
КонецПроцедуры	

//*******************************************
Процедура Действие_ВыбратьДокумент(ТекДок) Экспорт
	
	//РасшФормы.Максимизирована = фМакс;
	РасшФормы.ОбработкаОжидания("ВернутьСтатусОкна", 150);
	//\\
	Если ТекДок = "Х" Тогда
		Возврат;
	КонецЕсли;	
	
	Ид = глмМетаданные.Ссылка2Ид(ТекДок);
	
	НС = 0;
	Если ИсточникДанных.НайтиЗначение(глмМетаданные
		.Ид2СтрокаИБ(Ид), НС, "iddoc") = 1 Тогда
			ТабличноеПоле.ТекущаяСтрока = НС;
			ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.Получить(5);
	КонецЕсли;	
	
КонецПроцедуры	

//*******************************************
Процедура Действие_ВыборПериода()
	
	Если ВвестиПериод(НачалоИнтервала, 
		КонецИнтервала, "Период журнала") = 1 Тогда
	    	
			ПрименитьФильтр();
	КонецЕсли;
		
КонецПроцедуры

//*******************************************
Процедура Действие_Провести()
	
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
		ТекущиеДанные.iddoc).ТекущийДокумент();
	
	Документы = СоздатьОбъект("Документ");
	Документы.НайтиДокумент(ТекДок);
	
    Попытка
		Если Документы.ПометкаУдаления() = 0 Тогда
			Документы.Провести(0);
		КонецЕсли;	
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	ПрименитьФильтр();
	
КонецПроцедуры

//*******************************************
Процедура Действие_ОтменитьПроведение()
	
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
		ТекущиеДанные.iddoc).ТекущийДокумент();
	
	Документы = СоздатьОбъект("Документ");
	Документы.НайтиДокумент(ТекДок);
	
    Попытка
		Если Документы.Проведен() = 1 Тогда
			Документы.СделатьНеПроведенным();
		КонецЕсли;	
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	ПрименитьФильтр();
	
КонецПроцедуры

//*******************************************
Процедура Действие_УстановитьВремя()
	Перем Конт;
	
	Попытка
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
		ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
			ТекущиеДанные.iddoc).ТекущийДокумент();
	Исключение
		Сообщить("Необходимо выбрать документ!", "!");	
	    Возврат;
	КонецПопытки;
    
	Если ТекДок.Проведен() = 1 Тогда
		Сообщить("Нельзя менять время проведенного документа!", "!");	
	    Возврат;
	КонецЕсли;	
	
	//ОткрытьФорму("Обработка.ИзмВремяДокумента", Конт);
	//
	//аДок = Конт.Форма.ПолучитьАтрибут("Док");
	//аДок.НазначитьТип("Документ." + ТекДок.Вид());
	//
	//Конт.Док = ТекДок;
	//Конт.ВыбВремя = ТекДок.ПолучитьВремя();
	//Конт.НастроитьДоступность();
	//
	//Конт.Форма.Обновить();
	
	Параметр = СоздатьОбъект("СписокЗначений");
	Параметр.ДобавитьЗначение(ТекДок, "ТекДок");
	
	ОткрытьФормуМодально("Обработка.ИзмВремяДокумента", Параметр);
	
КонецПроцедуры

//*******************************************
Процедура Действие_Запомнить()
    
	ТекстВБуфер(ТекущееЗначение());
	
	ОбновитьСумму();
	
КонецПроцедуры	

//*******************************************
Процедура Действие_Добавить()
    
	ТекЗнач = ТекущееЗначение();
	Если ПровЗаписьЧисла(ТекЗнач) = 0 Тогда
		// выбрали что то не то...
		Возврат;
	КонецЕсли;	
	
	Попытка
		Сумма = ТекстИзБуфера();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ПровЗаписьЧисла(Сумма) = 0 Тогда
		// в буфере мусор какой-то...
		Возврат;
	КонецЕсли;	
	
	ТекстВБуфер(Строка(Число(Сумма) 
		+ Число(ТекЗнач)));
	
	ОбновитьСумму();
	
КонецПроцедуры	

//*******************************************
Процедура Действие_Вычесть()
    
	ТекЗнач = ТекущееЗначение();
	Если ПровЗаписьЧисла(ТекЗнач) = 0 Тогда
		// выбрали что то не то...
		Возврат;
	КонецЕсли;	
	
	Попытка
		Сумма = ТекстИзБуфера();
	Исключение
		Возврат;
	КонецПопытки;

	Если ПровЗаписьЧисла(Сумма) = 0 Тогда
		// в буфере мусор какой-то...
		Возврат;
	КонецЕсли;	
	
	ТекстВБуфер(Строка(Число(Сумма) 
		- Число(ТекЗнач)));
	
	ОбновитьСумму();
	
КонецПроцедуры

//*******************************************
Процедура Действие_ОбновитьСумму()
	
	ОбновитьСумму();
	
КонецПроцедуры

//*******************************************
Процедура Действие_ПриВыбореПометки()
	Перем ВыбЗнач;
	
	Если флГруппДействий = 1 Тогда
		
		сзВыбора = СоздатьОбъект("СписокЗначений");
		сзВыбора.ДобавитьЗначение("Выбрать все"); 
		сзВыбора.ДобавитьЗначение("Очистить");
		сзВыбора.ДобавитьЗначение("Обратить");
	
		Если сзВыбора.ВыбратьЗначение(ВыбЗнач, 
			, , 60, 1) = 1 Тогда
				
				Если ВыбЗнач = "Выбрать все" Тогда
					ИсточникДанных.Заполнить(2, , , "pometka");
				ИначеЕсли ВыбЗнач = "Очистить" Тогда
					ИсточникДанных.Заполнить(1, , , "pometka");
				ИначеЕсли ВыбЗнач = "Обратить" Тогда	
					ИсточникДанных.ВыбратьСтроки();
					Пока ИсточникДанных.ПолучитьСтроку() = 1 Цикл
						ИсточникДанных.pometka 
							= 3 - ИсточникДанных.pometka;
					КонецЦикла;	
				КонецЕсли;
		КонецЕсли;
			
		ТабличноеПоле.ОбновитьСтроки();	
		
	КонецЕсли;	
	
КонецПроцедуры	

//*******************************************
Процедура Действие_ГрупповыеДействия()
	Перем ВыбЗнач;
	
	Если флГруппДействий = 1 Тогда
		
		сзВыбора = СоздатьОбъект("СписокЗначений");
		сзВыбора.ДобавитьЗначение("Пометить на удаление");  
		сзВыбора.ДобавитьЗначение("Снять пометку на удаление"); 
		сзВыбора.ДобавитьЗначение("Провести");  
		сзВыбора.ДобавитьЗначение("Отменить проведение");  
		сзВыбора.ДобавитьЗначение("Подписать"); 
		сзВыбора.ДобавитьЗначение("Напечатать"); 
	    
		Если сзВыбора.ВыбратьЗначение(ВыбЗнач, 
			, , 60, 1) = 1 Тогда
				
				Документы = СоздатьОбъект("Документ");
				
				ИсточникДанных.ВыбратьСтроки();
				Пока ИсточникДанных.ПолучитьСтроку() = 1 Цикл
					Если ИсточникДанных.pometka <> 2 Тогда
						Продолжить;
					КонецЕсли;	
					
					ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ИсточникДанных.iddocdef,
						ИсточникДанных.iddoc).ТекущийДокумент();
					
					Документы.НайтиДокумент(ТекДок);
					
					Попытка
						Если ВыбЗнач = "Пометить на удаление" Тогда
							Документы.Удалить(0);
						ИначеЕсли ВыбЗнач = "Снять пометку на удаление" Тогда
							Документы.СнятьПометкуУдаления();
						ИначеЕсли ВыбЗнач = "Провести" Тогда
							Документы.Провести();
						ИначеЕсли ВыбЗнач = "Отменить проведение" Тогда
							Документы.СделатьНеПроведенным();
						ИначеЕсли ВыбЗнач = "Подписать" Тогда
							Если Документы.Подписан = 0 Тогда
								Документы.Подписан = 2;
							Иначе
								Документы.Подписан = 0;
							КонецЕсли;
							Документы.Записать();
						ИначеЕсли ВыбЗнач = "Напечатать" Тогда		
							Если Документы.Вид() = "РасходнаяНакладная" Тогда
								Парам = СоздатьОбъект("СписокЗначений");
								Парам.ДобавитьЗначение(Документы.ТекущийДокумент(), "Контекст");
								Парам.ДобавитьЗначение(1, "Устройство");
								ОткрытьФорму("Отчет", Парам, 
									КаталогИБ() + "ExtForms\PrnForms\ТОРГ12.ert");
							ИначеЕсли Документы.Вид() = "Счет_фактура" Тогда
								Парам = СоздатьОбъект("СписокЗначений");
								Парам.ДобавитьЗначение(Документы.ТекущийДокумент(), "Контекст");
								Парам.ДобавитьЗначение(1, "Устройство");
								ОткрытьФорму("Отчет", Парам,
									КаталогИБ() + "ExtForms\PrnForms\SF_1137.ert"); 
							Иначе
								ОткрытьФорму(Документы.ТекущийДокумент(), "Печать");
							КонецЕсли;
						КонецЕсли;
					Исключение
						
					КонецПопытки;
					
					ИсточникДанных.pometka = 1;
					
				КонецЦикла;	
				
		КонецЕсли;
		
		ПрименитьФильтр();
		
	КонецЕсли;
	
КонецПроцедуры

//*******************************************
Процедура Действие_ПодчиненныеДокументы()
	
	Попытка
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
		ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
			ТекущиеДанные.iddoc).ТекущийДокумент();
	Исключение
	    Возврат;
	КонецПопытки;

	глмОбщиеФункции.СформироватьДеревоДокументов(ТекДок);
	
КонецПроцедуры

//*******************************************
Процедура Действие_ДвиженияДокумента()
	Перем ФормаПредОбработки, КонтТекДок, Заголовок;	
	
	Попытка
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
		ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
			ТекущиеДанные.iddoc).ТекущийДокумент();
	Исключение
	    Возврат;
	КонецПопытки;
	
	// Французов 09.06.17: теперь можно открыть в форме корректировки
	//СформироватьДвиженияДокумента(ТекДок);
	Сервис = СоздатьОбъект("Сервис");
	СписокВсехОткрытыхОкон = Сервис.СписокВсехОткрытыхОкон();
	Для Индекс = 1 По СписокВсехОткрытыхОкон.РазмерСписка() Цикл
		Конт = СписокВсехОткрытыхОкон.ПолучитьЗначение(Индекс, Заголовок);
		Если Лев(Заголовок, 3) = "КЗР" Тогда
			ФормаПредОбработки = Конт;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Если ПустоеЗначение(ФормаПредОбработки) = 0 Тогда
		ФормаПредОбработки.ОбновитьДанныеОбработки(ТекДок);
	Иначе
		Параметр = СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(ТекДок, "КорректировкаЗаписейРегистров");
		Параметр.ДобавитьЗначение(0, "СпособПолученияДвижений");
		Параметр.ДобавитьЗначение(1, "ОткрытьФорму");
		ОткрытьФорму("Обработка.глмКорректировкаЗаписейРегистров", Параметр);
	КонецЕсли;
	//\\
	
КонецПроцедуры	

//*******************************************
Процедура Действие_Настроить()
	Перем Конт;
	
	// статус окна для возврата
	фМакс = РасшФормы.Максимизирована;
	
	Параметр = СоздатьОбъект("СписокЗначений");
	Параметр.ДобавитьЗначение(тзКолТабПоля, "ТаблицаРеквизитов"); 
	Параметр.ДобавитьЗначение(Форма.Закладки
		.ПолучитьЗначение(Форма.Закладки.ТекущаяСтрока()), 
			"ТекущаяЗакладка");
	
	ОткрытьФорму("Обработка.НастройкаЖурнала", Параметр); 
	
КонецПроцедуры

//*******************************************
Процедура Действие_ЗагрузитьНастройки(Таблица)
	
	//Таблица.Выгрузить(тзКолТабПоля);
	//
	//СоздатьКолонки();
	
	ПриВыбореЗакладки();

КонецПроцедуры

//*******************************************
Процедура ПриИзмГруппДействий()
	
	Колонка = ТабличноеПоле.Колонки.Получить("Пометка");
	
	Если флГруппДействий = 1 Тогда
		Колонка.Видимость = 1;
		РасшФормы.ОбработкаОжидания("ОбновитьДанные", 0); 
	Иначе
		Колонка.Видимость = 0;
		РасшФормы.ОбработкаОжидания("ОбновитьДанные", 60000); 
	КонецЕсли;	
	
КонецПроцедуры	

//*******************************************
Процедура ПриДвойномНажатииЛевойКнопки(сост, х, у)
	
	ВыбАтрибут = РасшФормы.ПолучитьАтрибутПоКоординатам(х, у);
	
    Если ТипЗначенияСтр(ВыбАтрибут) = "АтрибутФормы" Тогда
		Попытка
			глИницВнешМодуля("Действие_" 
				+ ВыбАтрибут.Идентификатор + "();", Контекст, "");	
		Исключение
				
		КонецПопытки;	
    КонецЕсли;
		
КонецПроцедуры

//*******************************************
Процедура ПриНажатииКнопкиКлавиатуры(конт, _а, _ш, _к, символ, фсо)
	
	//Сообщить("" + конт + " " + _а + " " 
	//+ _ш + " " + _к + " " + кодСимв(символ) 
	//+ " " + фсо);
	
	Если (_к = 1) И (кодСимв(символ) = 4) Тогда
		
		Действие_Удалить();
		
	КонецЕсли;	
	
КонецПроцедуры	

//*******************************************
Процедура ТабПолеПриАктивизацииКолонки()
	
	Если ТабличноеПоле.ТекущаяКолонка.Имя = "Состояние" Тогда
		ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.Получить(5);
	КонецЕсли;	
	
КонецПроцедуры

//*******************************************
Процедура ТабПолеВыбор(ВыбСтрока, Колонка, ТипРегиона, ТипОбластиЯчейки)
	
	Если ВыбСтрока.ТекущаяКолонка.Имя = "Пометка" Тогда
		НС = ВыбСтрока.ТекущиеДанные.НомерСтроки;
		ИсточникДанных.УстановитьЗначение(НС, "pometka",
			3-ИсточникДанных.ПолучитьЗначение(НС, "pometka"));
			
		ТабличноеПоле.ОбновитьСтроки();	
	Иначе	
		ОткрытьФорму(МДВ.ЗначениеИзСтрокиБД(12, ВыбСтрока.ТекущиеДанные.iddocdef,
			ВыбСтрока.ТекущиеДанные.iddoc).ТекущийДокумент(), , -1);
	КонецЕсли;
		
КонецПроцедуры

//*******************************************
Процедура ТабПолеПриАктивизацииСтроки(ВыбСтрока)
	
	Попытка
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
		ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
			ТекущиеДанные.iddoc).ТекущийДокумент();
	    Форма.ТекстКомментария.Заголовок(ТекДок.Комментарий);
	Исключение
	    Возврат;
	КонецПопытки;
	
КонецПроцедуры

////*******************************************
//Процедура ТабПолеПриАктивизацииЯчейки(ВыбСтрока)
//	
//КонецПроцедуры

////*******************************************
//Процедура ТабПолеПриКомандеБуфераОбмена(ВыбСтрока, Команда, Текст, ФСО)
//	
//	Сообщить("" + Команда + " " + Текст + " " + ФСО);
//	
//КонецПроцедуры

//*******************************************
Процедура ТабПолеПриКонтекстномМеню(ТекСтрока, ТекКолонка, ТипРегиона, ТипОбластиЯчейки)
	Перем Выб;
	
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	ТекДок = МДВ.ЗначениеИзСтрокиБД(12, ТекущиеДанные.iddocdef,
		ТекущиеДанные.iddoc).ТекущийДокумент();

	ПараметрыРаскраски = СоздатьОбъект("СписокЗначений");
    //ПараметрыРаскраски.Установить("ЦветФонаВыделения", 14871025); 
    //ПараметрыРаскраски.Установить("ЦветШрифтаВыделения", 0);
    //ПараметрыРаскраски.Установить("ЦветРамкиВыделения", 16717824);
    //ПараметрыРаскраски.Установить("ЦветФона", 16777215);
    //ПараметрыРаскраски.Установить("ЦветШрифта", 0);
	
	Сервис = СоздатьОбъект("Сервис");
	Список = СоздатьОбъект("СписокЗначений");
	Список.ДобавитьЗначение(1,"[icon:1]Новый");
	Список.ДобавитьЗначение(2,"[icon:2]Открыть");
	Список.ДобавитьЗначение(3,"[icon:3]Просмотр");
	Список.ДобавитьЗначение(4,"[icon:4]Копировать"); 
	Список.ДобавитьЗначение(5,"[icon:5]Пометить на удаление"); 
	Список.ДобавитьЗначение(6,"[icon:6]Ввести на основании");
	Список.ДобавитьЗначение(7,"-");
	Если ТекДок.Проведен() = 0 Тогда
		Список.ДобавитьЗначение(8,"[icon:15]Провести");
		//Список.Пометка(8, ?(ТекДок.Проведен()=0,0,1));
		Список.ДобавитьЗначение(10,"[icon:17]Изменить время документа..."); 
		//Список.Пометка(10, ?(ТекДок.Проведен()=0,0,1));
	КонецЕсли;
	Если ТекДок.Проведен() = 1 Тогда
		Список.ДобавитьЗначение(9,"[icon:16]Сделать непроведенным");
		//Список.Пометка(9, ?(ТекДок.Проведен()=0,1,0));
		Список.ДобавитьЗначение(11,"[icon:7]Движения документа"); 
		//Список.Пометка(11, ?(ТекДок.Проведен()=0,1,0));
	КонецЕсли;	
	Список.ДобавитьЗначение(12,"[icon:8]Подчиненные документы"); 
	//Список.ДобавитьЗначение(13,"Установить ТА на документ");
	////Список.Пометка(13, 1);
	Список.ДобавитьЗначение(14,"-");
	Список.ДобавитьЗначение(15,"[icon:9]Интервал"); 
	//Список.ДобавитьЗначение(16,"[icon:10]Отобрать по значению");
	////Список.Пометка(16, 1);
	//Список.ДобавитьЗначение(17,"[icon:11]Отобрать по колонке"); 
	////Список.Пометка(17, 1);
	Список.ДобавитьЗначение(18,"-");
	Список.ДобавитьЗначение(19,"[icon:12]Запомнить"); 
	Список.ДобавитьЗначение(20,"[icon:13]Добавить"); 
	Список.ДобавитьЗначение(21,"[icon:14]Вычесть"); 
	
	Если Сервис.ВыбратьЗначение(Список, Выб, "", 0, 2, КонтКартинка, ПараметрыРаскраски) = 1 Тогда
    	Если Выб = 1 Тогда		Действие_Новый();
		ИначеЕсли Выб = 2 Тогда		Действие_Изменить();
		ИначеЕсли Выб = 3 Тогда		Действие_Просмотр();
		ИначеЕсли Выб = 4 Тогда		Действие_Копировать();
		ИначеЕсли Выб = 5 Тогда		Действие_Удалить();
		ИначеЕсли Выб = 6 Тогда		Действие_НаОсновании();
		ИначеЕсли Выб = 8 Тогда		Действие_Провести();
		ИначеЕсли Выб = 9 Тогда		Действие_ОтменитьПроведение();
		ИначеЕсли Выб = 10 Тогда	Действие_УстановитьВремя();
		ИначеЕсли Выб = 11 Тогда    Действие_ДвиженияДокумента();
		ИначеЕсли Выб = 12 Тогда    Действие_ПодчиненныеДокументы();
		ИначеЕсли Выб = 13 Тогда
		ИначеЕсли Выб = 15 Тогда	Действие_ВыборПериода();
		ИначеЕсли Выб = 16 Тогда
		ИначеЕсли Выб = 17 Тогда
		ИначеЕсли Выб = 19 Тогда    Действие_Запомнить();
		ИначеЕсли Выб = 20 Тогда	Действие_Добавить(); 
		ИначеЕсли Выб = 21 Тогда	Действие_Вычесть();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

//*******************************************
МДВ = СоздатьОбъект("MetaDataWork");

СеансаPID = глмОбщиеФункции.ПолучитьPID();

НачалоИнтервала = РабочаяДата();
КонецИнтервала 	= РабочаяДата();

стрИмяФайлаБлокировки = глмПланЗаданий.ВзятьИмяФайлаБлк();

тзСтатистики = глмТаблицаЗаданий.ИнТаблСтат();

тзЗаданий = глмТаблицаЗаданий.ИнТаблЗаданий();

глмТаблицаЗаданий.ПланЗадания(тзЗаданий, 
	"""ОбновитьДанные"",1", 0, 10000, 0);
	
ИсточникДанных 	= СоздатьОбъект("ТаблицаЗначений");

ПоставщикДанных	= СоздатьОбъект("VTProvider");
ПоставщикДанных.ТаблицаЗначений = ИсточникДанных;

КонтКартинка = СоздатьОбъект("Картинка");
КонтКартинка.Загрузить(КаталогИБ() + "ExtForms\context.bmp");

тзКолТабПоля = СоздатьОбъект("ТаблицаЗначений");
тзКолТабПоля.НоваяКолонка("Имя", "Строка");
тзКолТабПоля.НоваяКолонка("Заголовок", "Строка");
тзКолТабПоля.НоваяКолонка("Видимость", "Число");
тзКолТабПоля.НоваяКолонка("Ширина", "Число");
тзКолТабПоля.НоваяКолонка("АвтоШирина");
тзКолТабПоля.НоваяКолонка("ГоризонтальноеВыравнивание", "Число");
тзКолТабПоля.НоваяКолонка("ИзменениеРазмера");
тзКолТабПоля.НоваяКолонка("ЦветТекста");
тзКолТабПоля.НоваяКолонка("ЦветФона");
тзКолТабПоля.НоваяКолонка("Шрифт");
тзКолТабПоля.НоваяКолонка("ШрифтЗаголовка");
тзКолТабПоля.НоваяКолонка("ЦветТекстаЗаголовка");
тзКолТабПоля.НоваяКолонка("ЦветФонаЗаголовка");
тзКолТабПоля.НоваяКолонка("Данные", "Строка");
тзКолТабПоля.НоваяКолонка("ДанныеКартинки");
тзКолТабПоля.НоваяКолонка("ЗнакУпорядочивания");
тзКолТабПоля.НоваяКолонка("ИзменятьВидимость");
тзКолТабПоля.НоваяКолонка("Параметр");
тзКолТабПоля.НоваяКолонка("Положение", "Число");
тзКолТабПоля.НоваяКолонка("ПереноситьПоСловам");
тзКолТабПоля.НоваяКолонка("Формат", "Строка");
тзКолТабПоля.НоваяКолонка("ВыделятьОтрицательные", "Число");
тзКолТабПоля.НоваяКолонка("ПрозрачностьФона");
тзКолТабПоля.НоваяКолонка("ШаблонВычисления", "Строка"); 
тзКолТабПоля.НоваяКолонка("Стандартный");

тзКолТабПоля.НоваяСтрока();
тзКолТабПоля.Имя = "iddoc";
тзКолТабПоля.Видимость = 0;
тзКолТабПоля.Данные = "iddoc";

тзКолТабПоля.НоваяСтрока();
тзКолТабПоля.Имя = "iddocdef";
тзКолТабПоля.Видимость = 0;
тзКолТабПоля.Данные = "iddocdef";

тзКолТабПоля.НоваяСтрока();
тзКолТабПоля.Имя = "Состояние";
тзКолТабПоля.Видимость = 1;
тзКолТабПоля.Ширина = 25; 
тзКолТабПоля.ИзменениеРазмера = 0;
тзКолТабПоля.ДанныеКартинки = "status";
//						R	G		B
тзКолТабПоля.ЦветФона = 194+194*256+189*65536;

тзКолТабПоля.НоваяСтрока();
тзКолТабПоля.Имя = "Пометка";
тзКолТабПоля.Видимость = 0;
тзКолТабПоля.Заголовок = "Х";
тзКолТабПоля.Ширина = 15; 
тзКолТабПоля.ИзменениеРазмера = 0;
тзКолТабПоля.ДанныеКартинки = "pometka";

тзКолТабПоля.НоваяСтрока();
тзКолТабПоля.Имя = "Подписан";
тзКолТабПоля.Видимость = 1;
тзКолТабПоля.Заголовок = "П";
тзКолТабПоля.Ширина = 15; 
тзКолТабПоля.ИзменениеРазмера = 0;
тзКолТабПоля.ДанныеКартинки = "podpisan";

тзКолТабПоля.НоваяСтрока();
тзКолТабПоля.Имя = "Документ";
тзКолТабПоля.Видимость = 1;
тзКолТабПоля.Ширина = 120; 
тзКолТабПоля.ИзменениеРазмера = 0;
тзКолТабПоля.Заголовок = "Документ";
//тзКолТабПоля.Данные = "iddocdef_descr";
тзКолТабПоля.ШаблонВычисления = "Синоним";

тзКолТабПоля.НоваяСтрока();
тзКолТабПоля.Имя = "Номер";
тзКолТабПоля.Видимость = 1;
тзКолТабПоля.Ширина = 120; 
тзКолТабПоля.ИзменениеРазмера = 0;
тзКолТабПоля.Заголовок = "Номер"; 
тзКолТабПоля.Данные = "docno";

тзКолТабПоля.НоваяСтрока();
тзКолТабПоля.Имя = "Дата";
тзКолТабПоля.Видимость = 1;
тзКолТабПоля.Ширина = 55; 
тзКолТабПоля.ИзменениеРазмера = 0;
тзКолТабПоля.Заголовок = "Дата";
тзКолТабПоля.Данные = "date";

тзКолТабПоля.НоваяСтрока();
тзКолТабПоля.Имя = "Время";
тзКолТабПоля.Видимость = 1;
тзКолТабПоля.Ширина = 55; 
тзКолТабПоля.ИзменениеРазмера = 0;
тзКолТабПоля.Заголовок = "Время";
тзКолТабПоля.Данные = "time";

//тзКолТабПоля.НоваяСтрока();
//тзКолТабПоля.Имя = "Сумма";
//тзКолТабПоля.Видимость = 1;
//тзКолТабПоля.Заголовок = "Сумма";
//тзКолТабПоля.ШаблонВычисления = "Сумма";
//тзКолТабПоля.ГоризонтальноеВыравнивание = 2;
//тзКолТабПоля.Формат = "Ч015.2, ";
//тзКолТабПоля.Ширина = 95; 
//тзКолТабПоля.ИзменениеРазмера = 0;

Для й = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
	
	Если Метаданные.ОбщийРеквизитДокумента(й).Сортировка = 1 Тогда
        
		Имя = Метаданные.ОбщийРеквизитДокумента(й).Идентификатор;
		Синоним = Метаданные.ОбщийРеквизитДокумента(й).Синоним;
		
		тзКолТабПоля.НоваяСтрока();
		тзКолТабПоля.Имя = Имя;
		тзКолТабПоля.Видимость = 1;
		тзКолТабПоля.Ширина = 120; 
		тзКолТабПоля.ИзменениеРазмера = 0;
		тзКолТабПоля.Заголовок = ?(Синоним = "", Имя, Синоним);
		тзКолТабПоля.Данные = "ord" + Строка(й-1);
		Если глмМетаданные.мПримитивныеТипы.Принадлежит(Метаданные
			.ОбщийРеквизитДокумента(й).Тип) = 0 Тогда
				тзКолТабПоля.ШаблонВычисления = "МДВ.ЗначениеИзСтрокиБД(""" 
					+ Метаданные.ОбщийРеквизитДокумента(й).Тип + "." 
						+ Метаданные.ОбщийРеквизитДокумента(й).Вид 
							+ """,ТекущиеДанные.ord" 
								+ Строка(й-1) + ")";
		Иначе
		КонецЕсли;				
        Если Имя = "СуммаДокумента" Тогда
			тзКолТабПоля.Формат = "Ч015.2, ";
		КонецЕсли;	
	КонецЕсли;
	
КонецЦикла;

Для й = 1 По Метаданные.ГрафаОтбора() Цикл
	
	Имя = Метаданные.ГрафаОтбора(й).Идентификатор;
	Синоним = Метаданные.ГрафаОтбора(й).Синоним;
	
	тзКолТабПоля.НоваяСтрока();
	тзКолТабПоля.Имя = Имя;
	тзКолТабПоля.Видимость = 1;
	тзКолТабПоля.Ширина = 120; 
	тзКолТабПоля.ИзменениеРазмера = 0;
	тзКолТабПоля.Заголовок = ?(Синоним = "", Имя, Синоним);
	тзКолТабПоля.Данные = "go" + Строка(й-1);
    тзКолТабПоля.ШаблонВычисления = 
		"ЗначГрОтбора(ТекущиеДанные.go" 
			+ Строка(й-1) + ")";
	
КонецЦикла;
    
тзКолТабПоля.Заполнить(1,,,"Стандартный");

тзКолТабПоля.Выгрузить(тзКолТабПоляСтанд);