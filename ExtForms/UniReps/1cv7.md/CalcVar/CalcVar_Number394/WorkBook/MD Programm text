Перем РасшФормы, Хендл, стрИмяФайлаБлокировки,
	тзСтатистики, тзЗаданий Экспорт, ТекущаяСтрока,
		ТекущаяЗакладка;
//*******************************************
//
// Процедуры менеджера заданий 
//
//*******************************************
Процедура СнятьПаузу() 
	
	Попытка
		// маппинг на функцию модуля
		глмПланЗаданий.СнятьПаузу(РасшФормы);
	Исключение
	КонецПопытки;
	
КонецПроцедуры
//*******************************************
Функция ВзятьПаузу(Время = 1000)
	
	Попытка
		// маппинг на функцию модуля
		глмПланЗаданий.ВзятьПаузу(РасшФормы, Время);
	Исключение
	КонецПопытки;
	
КонецФункции	
//*******************************************
Процедура ЗапуститьНаВыполнение(Задание, спПараметры)
    
	Попытка
		// маппинг на функцию модуля
		глмПланЗаданий.ЗапуститьНаВыполнение(Контекст, 
			Задание, спПараметры, тзСтатистики);
	Исключение
	КонецПопытки;
	
КонецПроцедуры
//*******************************************
Процедура Планировщик()
	
	Попытка
		// маппинг на функцию модуля
		глмПланЗаданий.Планировщик(Контекст, Хендл, 
			тзЗаданий, тзСтатистики);
	Исключение
	КонецПопытки;
	
КонецПроцедуры
//*******************************************
Процедура ПланЗадания(тзЗаданий, стрЗадание, чОднократно, чПериод, чЗадержек) Экспорт
	
	глмТаблицаЗаданий.ПланЗадания(тзЗаданий, стрЗадание, 
		чОднократно, чПериод, чЗадержек);
	
КонецПроцедуры
//*******************************************
//
// Процедуры обработки 
//
//*******************************************
Процедура ПриОткрытии()
	
	Параметр = Форма.Параметр;
	
	Если ТипЗначения(Параметр) <> 100 Тогда
		СтатусВозврата(0);
		Возврат;
		
	Иначе
		ТекущаяЗакладка = Параметр.Получить("ТекущаяЗакладка");
		
		Параметр.Получить("ТаблицаРеквизитов")
			.Выгрузить(тзРеквизиты);

	КонецЕсли;	
	
КонецПроцедуры	
//*******************************************
Процедура ПослеОткрытия()

	РасшФормы.УстановитьФорму(Форма);
	
	Хендл = глмБлокировка.Модуль.CreateFile(стрИмяФайлаБлокировки,
		глмБлокировка.Модуль.GENERIC_READ_WRITE, 
			глмБлокировка.Модуль.FILE_SHARE_READ_WRITE, 0, 
				глмБлокировка.Модуль.OPEN_ALWAYS, глмБлокировка
					.Модуль.FILE_ATTRIBUTE_NORMAL, 0);
	
	глмПланЗаданий.ЗапуститьПланировщик(РасшФормы);				
	
КонецПроцедуры
//*******************************************
Процедура ПриЗакрытии()
	
	тзКолТабПоля = СоздатьОбъект("ТаблицаЗначений"); 
	
	тзРеквизиты.Выгрузить(тзКолТабПоля);
	
	ПолныйПуть = КаталогИБ() +  
		"1Cv7.MD\CalcVar\CalcVar_Number6823";
	
   	Сервис = СоздатьОбъект("Сервис");
   	сзОкна = Сервис.СписокВсехОткрытыхОкон();
   	
   	Для Й = 1 По сзОкна.РазмерСписка() Цикл
   		КонтФ = сзОкна.ПолучитьЗначение(Й);
   		// операция взятия расширения формы
   		// доступна только для группового контекста
   		Если ТипЗначенияСтр(КонтФ) <> "ГрупповойКонтекст" Тогда
   			Продолжить;
   		КонецЕсли;	
   		//\\
   		РасшФ = СоздатьОбъект("РасширениеФормы");
   		РасшФ.УстановитьФорму(КонтФ.Форма);
   		//Сообщить(РасшФ.ПолныйПуть());
   		Если СокрЛП(РасшФ.ПолныйПуть()) = ПолныйПуть Тогда
   			//Сообщить("Ок");
   			КонтФ.Действие_ЗагрузитьНастройки(тзКолТабПоля);
   			КонтФ.Форма.Обновить();
   			Прервать;
   		КонецЕсли;	
   	КонецЦикла;
	
КонецПроцедуры	
//*******************************************
Процедура ОбновитьСвойстваРеквизита()
	
	тзСвойстваРеквизита.УдалитьСтроки();
	
	Для НК = 1 По тзРеквизиты.КоличествоКолонок() Цикл
		
		тзСвойстваРеквизита.НоваяСтрока();

		тзСвойстваРеквизита.Свойство = тзРеквизиты
			.ПолучитьПараметрыКолонки(НК);

		тзСвойстваРеквизита.Значение = тзРеквизиты
			.ПолучитьЗначение(ТекущаяСтрока, 
				тзСвойстваРеквизита.Свойство);	
		
	КонецЦикла;	
			
КонецПроцедуры
//*******************************************
Процедура ВвестиСвойствоРеквизита()
	Перем Тип, Значение;
	
	ТекущаяКолонка = тзСвойстваРеквизита.ТекущаяСтрока();
	
	тзРеквизиты.ПолучитьПараметрыКолонки(ТекущаяКолонка, Тип);
	
	Значение = тзРеквизиты
		.ПолучитьЗначение(ТекущаяСтрока, ТекущаяКолонка);
	
	Если (Тип <> "") И ((тзРеквизиты
		.ПолучитьЗначение(ТекущаяСтрока, 
			"Стандартный") <> 1) ИЛИ (тзСвойстваРеквизита
				.ПолучитьЗначение(ТекущаяКолонка, "Свойство") 
					= "Видимость") ИЛИ (тзСвойстваРеквизита
					.ПолучитьЗначение(ТекущаяКолонка, 
						"Свойство") = "Формат")) Тогда
		
		Если ВвестиЗначение(Значение, 
			"Значение свойства:", Тип) = 1 Тогда
				тзРеквизиты.УстановитьЗначение(ТекущаяСтрока, 
					ТекущаяКолонка, Значение);
		КонецЕсли;			
		
		ОбновитьСвойстваРеквизита();
		
		тзСвойстваРеквизита.ТекущаяСтрока(ТекущаяКолонка);
		
	КонецЕсли;	
	
КонецПроцедуры
//*******************************************
Процедура ПереместитьВверх()
	
	НомерСтроки = ТекущаяСтрока;
	
	тзРеквизиты.СдвинутьСтроку(-1, ТекущаяСтрока);
	
	тзРеквизиты.ТекущаяСтрока(НомерСтроки - 1);
	
КонецПроцедуры
//*******************************************
Процедура ПереместитьВниз()
	
	НомерСтроки = ТекущаяСтрока;
	
	тзРеквизиты.СдвинутьСтроку(1, ТекущаяСтрока);
	
	тзРеквизиты.ТекущаяСтрока(НомерСтроки + 1);
	
КонецПроцедуры
//*******************************************
Процедура Сохранить()
	
	Каталог = КаталогПользователя();
	ИмяФайла = ТекущаяЗакладка + ".xml";
	
	Выбор = ФС.ВыбратьФайл(1, ИмяФайла, Каталог,,"(*.xml)|*.xml");
	Если Выбор=1 Тогда
		хмлНастройка = глмОбщиеФункции.ВыгрузитьТаблицуВХМЛ(тзРеквизиты);
		глмХМЛ.ВывестиДокументВФайл(хмлНастройка, 
			СокрЛП(Каталог + ИмяФайла));
	КонецЕсли;
	
КонецПроцедуры
//*******************************************
Процедура Восстановить()
	Перем ИмяФайла, Каталог, хмлНастройка;
	
	Каталог = КаталогПользователя();
	
	Выбор = ФС.ВыбратьФайл(0, ИмяФайла, Каталог,,"(*.xml)|*.xml");
	Если Выбор=1 Тогда
		Если глмХМЛ
			.ПрочитатьДокументИзФайла(хмлНастройка, 
				"", "", СокрЛП(Каталог + ИмяФайла)) = 1 Тогда

				Таблица = глмОбщиеФункции
					.ЗагрузитьТаблицуИзХМЛ(хмлНастройка);
				Таблица.Выгрузить(тзРеквизиты);	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры
//*******************************************
Процедура Новый()
	
	тзРеквизиты.НоваяСтрока();

	тзРеквизиты.Имя = "НоваяКолонка";
	тзРеквизиты.Видимость = 1;
	тзРеквизиты.Ширина = 100; 
	тзРеквизиты.ИзменениеРазмера = 0;
	тзРеквизиты.Заголовок = "НоваяКолонка";  
	тзРеквизиты.Стандартный = 0; 
	
	тзРеквизиты.ТекущаяСтрока(тзРеквизиты.КоличествоСтрок());
	
КонецПроцедуры
//*******************************************
Процедура Удалить()
	
	НомерСтроки = ТекущаяСтрока;
	
	тзРеквизиты.УдалитьСтроку(НомерСтроки);
	
	тзРеквизиты.ТекущаяСтрока(НомерСтроки - 1);
		
КонецПроцедуры
//*******************************************
Функция Обновить()
	
	Окна = СоздатьОбъект("Окна");
	
	Окна.НаПереднийПлан(Форма);
	
	Если ТекущаяСтрока <> тзРеквизиты.ТекущаяСтрока() Тогда
			
		ТекущаяСтрока = тзРеквизиты.ТекущаяСтрока();
        
		ОбновитьСвойстваРеквизита();
		
		Форма.кнУдалить.Доступность(?(тзРеквизиты
			.ПолучитьЗначение(ТекущаяСтрока, 
				"Стандартный") = 1, 0, 1));

		Форма.кнВверх.Доступность(?(ТекущаяСтрока > 7, 1, 0));
		Форма.кнВниз.Доступность( ?(ТекущаяСтрока > 6, 1, 0));
				
	КонецЕсли;
	
	Форма.Обновить();
	
	Возврат 1;
	
КонецФункции
//*******************************************
Процедура ПриИзмененииРазмераОкна(ТипСобытия, Ширина, Высота)
	
	Окна = СоздатьОбъект("Окна");
	Окна.РазмерОкна(Форма, 515, 273);
	Окна.МенюОкна(Форма, 1, 0, 0, 0);
	
КонецПроцедуры
//*******************************************
РасшФормы = СоздатьОбъект("РасширениеФормы");

стрИмяФайлаБлокировки = глмПланЗаданий.ВзятьИмяФайлаБлк();

тзСтатистики = глмТаблицаЗаданий.ИнТаблСтат();

тзЗаданий = глмТаблицаЗаданий.ИнТаблЗаданий();

глмТаблицаЗаданий.ПланЗадания(тзЗаданий, 
	"""Обновить"",1", 0, 1, 0);

тзСвойстваРеквизита.НоваяКолонка("Свойство",,,,, 20); 
тзСвойстваРеквизита.НоваяКолонка("Значение",,,,, 20);