// список уже вызванных в обработке шаблонов ограничения
// данных
Перем ШаблОгрДост Экспорт;
Перем сзКонтрольОстатков;
//*******************************************
// процедура поиска шаблона ограничения данных по 
// описателю объекта доступа сначала в списке  - заметно 
// ускоряет процедуру контроля доступа, потом в 
// конфигурации
Функция ВзятьШаблОгрДост(ОписательОбъекта)
	
	Шабл = ШаблОгрДост.Получить(ОписательОбъекта);
	Если ПустоеЗначение(Шабл) = 1 Тогда
		Шабл = глмУправлениеДоступом.ВзятьШаблОгрДоступа(ОписательОбъекта);
		Шабл = ?(Шабл = "", "[1]", Шабл);
		ШаблОгрДост.ДобавитьЗначение(Шабл, ОписательОбъекта);
	КонецЕсли;
	Возврат Шабл;
	
КонецФункции
//*******************************************
// проверка прав доступа пользователя к заданному 
// значению
Функция ПроверкаПравДоступа(Значение)
	
	ТипЗнач = ТипЗначенияСтр(Значение);
	// определение, если тип - "число", "строка" или "дата"
	Если ПустоеЗначение(Значение) = 1 Тогда
		
	ИначеЕсли глмМетаданные.мПримитивныеТипы
		.Принадлежит(ТипЗнач) = 0 Тогда
		// формирование описателя типа
		ОписательОбъекта = ТипЗнач + "_" 
			+ Значение.Вид() + "_Форма";
		// поиск шаблона ограничения доступа	
		ШаблОгрДоступа = ВзятьШаблОгрДост(ОписательОбъекта);
		// выполнение шаблона
		Конт = Значение;
		Попытка
			РезПровОгрДоступа = Число(Шаблон(ШаблОгрДоступа));
		Исключение
			РезПровОгрДоступа = 0;
		КонецПопытки;
		// анализ результата выполнения шаблона ограничения 
		// доступа
		Если РезПровОгрДоступа = 0 Тогда
			Сообщить("Недостаточно прав доступа к данным типа """ 
				+ ТипЗнач + """ в значении """ + Конт + """");
			Возврат 0;	
		КонецЕсли;	
	КонецЕсли;
	Возврат 1;
	
КонецФункции	
//*******************************************
// запись таблицы движений в таблицу движений регистра
// оперативного учета переданного документа
Функция ДвижениеПоРегистру(КонтДок, ИмяРегистра, ТаблицаДвижений)	
    
	КолСтрок = ТаблицаДвижений.КоличествоСтрок();
	КонтДок.ОчиститьДвижения("Регистр." + ИмяРегистра);
	Если КолСтрок = 0 Тогда
		Возврат 0;
	КонецЕсли;	
	ИдРегистра = глмМетаданные.Тип2Ид("Регистр." + ИмяРегистра);
	ТипРегистра = глмМетаданные.СвойствоОбъекта(ИдРегистра, "ТипРегистра");
	// выборка конфигурационных данных о реквизитах регистра
	РеквРегистра = глмМетаданные.ВыбратьРеквизиты(ИдРегистра, "", "", "");
	// вызов (инстанцирование) объекта "Регистр.Имярегистра"
	// в контексте модуля документа
	мРегистр = глмМетаданные.Ид2НаборДанных(ИдРегистра, КонтДок);
	Если мРегистр = 0 Тогда
		Возврат 1;
	КонецЕсли;
	Для НомерСтроки = 1 По КолСтрок Цикл
		// формирование движения по каждой строке таблицы ...
		мРегистр.ПривязыватьСтроку(НомерСтроки);
		РеквРегистра.ВыбратьСтроки();
		Пока РеквРегистра.ПолучитьСтроку() = 1 Цикл
			Значение = ТаблицаДвижений.ПолучитьЗначение(НомерСтроки, 
				РеквРегистра.Ид);
			//// ... с контролем доступа к записываемым значениям	
			//Если ПроверкаПравДоступа(Значение) = 1 Тогда
				мРегистр.УстановитьАтрибут(РеквРегистра.Ид, Значение);
			//Иначе
			//	Возврат 1;
			//КонецЕсли;
		КонецЦикла;
		// запись движения
		Если ТипРегистра = "Остатки" Тогда
			Если ТаблицаДвижений.ПолучитьЗначение(НомерСтроки, 
				"Приход") = 1 Тогда
					мРегистр.ДвижениеПриходВыполнить();
			Иначе
				мРегистр.ДвижениеРасходВыполнить();
			КонецЕсли;
		Иначе
			мРегистр.ДвижениеВыполнить();
		КонецЕсли;	
	КонецЦикла;
	// контроль остатков
	Если сзКонтрольОстатков.Принадлежит(ИмяРегистра) = 1 Тогда
		// "залепуха" ...
		ПровСвобОст = 0;
		Если ИмяРегистра = "ОстаткиТоваров" Тогда
			// ... для контроля свободного остатка
			ПровСвобОст = 1;
		КонецЕсли;
		//\\
		ТекРег = СоздатьОбъект("Регистр." + ИмяРегистра);
		ТекРег.ВременныйРасчет(1);
		// "залепуха" ...
		Если ПровСвобОст = 1 Тогда
			РегРез = СоздатьОбъект("Регистр.РезервыТоваров");
			РегРез.ВременныйРасчет(1);
		КонецЕсли;
		//\\
		РеквРегистра.ВыбратьСтроки();
		Пока РеквРегистра.ПолучитьСтроку() = 1 Цикл
			Ид = РеквРегистра.Ид;
			ИдКаталога = РеквРегистра.ИдКаталога;
			Если ИдКаталога = "Измерение" Тогда
				Спс = СоздатьОбъект("СписокЗначений");
				ТаблицаДвижений.Выгрузить(Спс, , , Ид);
				ТекРег.УстановитьЗначениеФильтра(Ид, Спс, 2);
				// "залепуха" ...
				Если ПровСвобОст = 1 Тогда
					РегРез.УстановитьЗначениеФильтра(Ид, Спс, 2);
				КонецЕсли;
				//\\
			КонецЕсли;
		КонецЦикла;
        Если КонтДок.СравнитьТА() = -1 Тогда
			РассчитатьРегистрыПо(КонтДок.ТекущийДокумент());
		КонецЕсли;	
		ТекРег.ВыбратьИтоги();
		Пока ТекРег.ПолучитьИтог() = 1 Цикл
			СтрокаСведений = "";
			ЕстьОшибка = 0;
			РеквРегистра.ВыбратьСтроки();
			Пока РеквРегистра.ПолучитьСтроку() = 1 Цикл
				Ид = РеквРегистра.Ид;
				ИдКаталога = РеквРегистра.ИдКаталога;
				Значение = ТекРег.ПолучитьАтрибут(Ид);
				СтрокаСведений = СтрокаСведений + "[" + Ид + "(" 
					+ ИдКаталога + ")=""" + Значение 
						+ ?(ТипЗначения(Значение) = 11, "(" 
							+ Значение.Код + ")", "") + """] ";
				Если ИдКаталога = "Ресурс" Тогда
					// "залепуха" ...
					Если ПровСвобОст = 1 Тогда
						ТекРезервПоТоваруНаСкладе = РегРез
							.СводныйОстаток(ТекРег.Товар, 
								ТекРег.Склад, , "РезервТовара");

						СтрокаСведений = СтрокаСведений + "[Резерв=""" 
							+ ТекРезервПоТоваруНаСкладе + """] ";

						Значение = Значение 
							- ТекРезервПоТоваруНаСкладе;
					КонецЕсли;
					//\\
					Если Значение < 0 Тогда
						ЕстьОшибка = 1;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			Если ЕстьОшибка = 1 Тогда
				Сообщить(СтрокаСведений);
				Сообщить("Недостаточно ресурса для списания", "!");
				Возврат 1;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции	
//*******************************************
// обработка проведения документа "Корректировка записей
// регистров" заменяющая стандартный механизм проведения
Функция Событие_ОбработкаПроведения(Конт, Парам) Экспорт
	Перем ИмяРегистра;
    // флаг отказа в проведении
	Отказ = 0;
	// можно установить интеллектуальную проверку параметров
	Если ПустоеЗначение(Парам) = 1 Тогда
		//Сообщить("передан пустой параметр проведения");
		//Конт.НеПроводитьДокумент();
		Конт.ОбработкаПроведения();
	// случай проведения по регистрам
	ИначеЕсли Конт.ОтклДвижения = 0 Тогда
		Для НомПоз = 1 По Парам.РазмерСписка() Цикл
			ТаблицаДвижений = Парам.ПолучитьЗначение(НомПоз, ИмяРегистра);
			Отказ = ДвижениеПоРегистру(Конт, ИмяРегистра, ТаблицаДвижений);
			Если Отказ = 1 Тогда
			    Прервать;
			КонецЕсли;
		КонецЦикла;	
	// запись движений в хранилище значений	
	Иначе
		// инстанцирование хранилища значений
		ХранилищеЗначения = СоздатьОбъект("Справочник.ХранилищеЗначения");
		ХранилищеЗначения.НайтиЭлемент(Конт.ХранилищеДвижений);
		// формирование xml-файла с описанием набора движений
		Анализатор = СоздатьОбъект("AddIn.XMLParser");
		Документ = Анализатор.СоздатьДокумент();
		Корень = Документ.СоздатьПодчиненныйЭлемент("Движения");
		Для НомПоз = 1 По Парам.РазмерСписка() Цикл
			ТаблицаДвижений = Парам.ПолучитьЗначение(НомПоз, ИмяРегистра);
			узРегистр = Корень.СоздатьПодчиненныйЭлемент(ИмяРегистра);
			Для НомерСтроки = 1 По ТаблицаДвижений.КоличествоСтрок() Цикл
				узСтрока = узРегистр.СоздатьПодчиненныйЭлемент("Стр" + НомерСтроки);
				Для НомерКолонки = 1 По ТаблицаДвижений.КоличествоКолонок() Цикл
					КодКолонки = ТаблицаДвижений.ПолучитьПараметрыКолонки(НомерКолонки);
					узСтрока.УстановитьАтрибут(КодКолонки, ЗначениеВСтрокуВнутр(ТаблицаДвижений
						.ПолучитьЗначение(НомерСтроки, НомерКолонки)));
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		// сохранение xml-файла в хранилище значений
		ХранилищеЗначения.Объект = Документ.ПредставлениеXML;
		ХранилищеЗначения.Записать();
	КонецЕсли;
	// запись события в журнал регистрации
	ЗаписьЖурналаРегистрации(Конт.Основание, "Документы", 
		"Документ записан и проведен задним числом", Конт.ТекущийДокумент(), 2);
	// возврат результат проведения
	Возврат 1 - Отказ;
	
КонецФункции
//*******************************************
ШаблОгрДост = СоздатьОбъект("СписокЗначений");

сзКонтрольОстатков = СоздатьОбъект("СписокЗначений");
сзКонтрольОстатков.ДобавитьЗначение("ОстаткиТоваров"); 
сзКонтрольОстатков.ДобавитьЗначение("РезервыТоваров");