Перем КонтДок Экспорт;
Перем мПримитивныеТипы Экспорт, мАгрегатныеТипы Экспорт;
Перем мОснСвойстваОбъектов, мДопСвойстваОбъектов, мСвойстваКонфигурации, 
	мСвойстваРеквизита, мСвойстваЗначения;
Перем мСтандартныеРеквизитыСправочников, мСтандартныеРеквизитыДокументов;	

//*******************************************
// Идентификатор значения объекта агрегатного типа,
// в том числе и примитивного - его строковое системное
// представление
//*******************************************
Функция ВызовМетода(СтрокаМетода) Далее
Функция ВызовМетодаОбъекта(Ид, СтрокаМетода) Экспорт Далее
Функция ВыбратьОбъекты(ИдКаталога) Экспорт Далее
	
//*******************************************
Функция Тест()
	
	Возврат """глмМетаданные"" - подключен";
	
КонецФункции	

//*******************************************
// Преобразование значения объекта агрегатного типа в 
// строковое системное представление - идентификатор
// 
Функция Ссылка2Ид(Объект) Экспорт
	
	Возврат ЗначениеВСтрокуВнутр(Объект);
	
КонецФункции

//*******************************************
// Обратное преобразование идентификатора - строкового
// системного представления в значение объекта агрегатного
// типа
//
Функция Ид2Ссылка(Ид) Экспорт
	
	Возврат ЗначениеИзСтрокиВнутр(Ид);
	
КонецФункции

//*******************************************
// Возвращает строковое системное представление значения
// неопределенного типа
//
Функция ПолучитьПустойИд() Экспорт
	Перем Объект;
	
	Возврат ЗначениеВСтрокуВнутр(Объект);
	
КонецФункции

//*******************************************
// Строковое системное представление можно представить
// как список значений - адреса хранения объекта в 
// информационной базе данных
//
Функция Ид2Список(Ид) Экспорт
	
	сИд = СоздатьОбъект("СписокЗначений");
	сИд.ИзСтрокиСРазделителями(Сред(Ид, 2, СтрДлина(Ид) - 2));
	
	Возврат сИд;
	
КонецФункции	

//*******************************************
// Обратное преобразование списка значений, полученного 
// из строкового системного представления
//
Функция Список2Ид(Список) Экспорт
	
	Возврат "{" + Список.ВСтрокуСРазделителями() + "}"
	
КонецФункции

//*******************************************
// Получить тип объекта по идентификатору
//
Функция Ид2Тип(Ид) Экспорт
	
	сИд = Ид2Список(Ид);
	
	Если сИд.ПолучитьЗначение(1) = "U" Тогда
		Возврат "" + сИд.ПолучитьЗначение(4) 
			+ ?(сИд.ПолучитьЗначение(7) = "0", 
				"", "." + сИд.ПолучитьЗначение(7));
	Иначе
		// это не работает для каталогов	
		//Возврат ТипЗначенияСтр(Ид2Ссылка(Ид))
		//	+ "." + Ид2Ссылка(Ид).Вид();
		Если (сИд.ПолучитьЗначение(1) = "B") 
			ИЛИ (сИд.ПолучитьЗначение(1) = "O") Тогда
				Возврат ТипЗначенияСтр(Ид2Ссылка(Ид))
					+ ?(Ид2Ссылка(Ид).Вид() = "", "", 
						"." + Ид2Ссылка(Ид).Вид());
		ИначеЕсли сИд.ПолучитьЗначение(1) = "E" Тогда
			Возврат "Перечисление" + ?(сИд.ПолучитьЗначение(4) = "0",
				"", "." + Ид2Ссылка(Ид).Вид()); 
		ИначеЕсли сИд.ПолучитьЗначение(1) = "S" Тогда
			Возврат "Строка";
		ИначеЕсли сИд.ПолучитьЗначение(1) = "N" Тогда
			Возврат "Число";
		ИначеЕсли сИд.ПолучитьЗначение(1) = "D" Тогда
			Возврат "Дата";
		Иначе
			Возврат "Неопределено";
		КонецЕсли;	
		//\\
	КонецЕсли;
	
КонецФункции

//*******************************************
Функция Ид2НаборДанных(Ид, Конт) Экспорт
	КонтДок = Конт;
	
	сИд = Ид2Список(Ид);
	Если сИд.ПолучитьЗначение(4) <> "Регистр" Тогда
		//Возврат 0;
		Возврат СоздатьОбъект(Ид2Тип(Ид));
	КонецЕсли;
	
	Модуль = СоздатьОбъект("Модуль");
	Модуль.Новый();
	Модуль.ПередатьКонтекст(КонтДок);
	Модуль.ПередатьВызовМетода("Результат = Регистр." 
		+ сИд.ПолучитьЗначение(7));
	Если Модуль.Выполнить() = 1 Тогда
		Возврат Модуль.РезультатВыполнения();
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

//*******************************************
Функция Объект2Ид(Объект1С)
	
	Если ТипЗначения(Объект1С) = 11 Тогда
		Возврат Ссылка2Ид(Объект1С.ТекущийЭлемент());
	
	Иначе
		Возврат Ссылка2Ид(Объект1С.ТекущийДокумент());
		
	КонецЕсли;    
		
КонецФункции	

//*******************************************
// Получить идентификатор объекта по типу
//
Функция Тип2Ид(Тип) Экспорт

	Ид = Ссылка2Ид(ПолучитьПустоеЗначение(Тип));
	сИд = Ид2Список(Ид);

	Если сИд.ПолучитьЗначение(1) = "U" Тогда
		тТип = СтрЗаменить(Тип, ".", РазделительСтрок);
		сИд.УстановитьЗначение(4, СтрПолучитьСтроку(тТип, 1));
		сИд.УстановитьЗначение(7, СтрПолучитьСтроку(тТип, 2));
		Возврат Список2Ид(сИд);
	Иначе
		Возврат Ид;
	КонецЕсли;
	
КонецФункции

//*******************************************
// Два строковых системных представления определяют
// значения одного типа, если первые записи, 
// соответствующих им списков совпадают
//
Функция ВИерархии(Ид, ИдКаталога) Экспорт
	
	// если каталог неопределен (пустое множество), тогда он
	// содержит любой объект, переданный по идентификатору
	Если ИдКаталога = ПолучитьПустойИд() Тогда
		Возврат 1
	Иначе
		// пожалуй, самый короткий текст попарной проверки 
		// совпадения типов двух значений
		Возврат ?(Ид2Список(ИдКаталога).ПолучитьЗначение(1)
			= Ид2Список(Ид).ПолучитьЗначение(1), 1, 0);
	КонецЕсли;		
	
КонецФункции

//*******************************************
// Идентификатор каталога объектов имеет нулевое значение
// в 4-й позиции идентификатора (код вида объекта)
//
Функция ИдКаталога(Ид) Экспорт
	
	сИд = Ид2Список(Ид);
	// для виртуальных таблиц и регистров поле, 
	// с инд 4 используется для указания Ид
	// каталога
	Если сИд.ПолучитьЗначение(1) <> "U" Тогда
		сИд.УстановитьЗначение(4, "0");
	КонецЕсли;	
	сИд.УстановитьЗначение(7, "0");
	
	Возврат Список2Ид(сИд);
	
КонецФункции

//*******************************************
// Проверка, является ли идентификатор объекта каталогом
//
Функция ЭтоКаталог(Ид) Экспорт
	
	сИд = Ид2Список(Ид);
	
	Если сИд.ПолучитьЗначение(1) = "U" Тогда
		Возврат ?(сИд.ПолучитьЗначение(7)="0", 1, 0); 
	Иначе
		Возврат ?(сИд.ПолучитьЗначение(4)="0", 1, 0);
	КонецЕсли;	
	
КонецФункции

//*******************************************
// Числовое представление значения в таблице базы
// данных
//
Функция Ид2КодИБ(Ид) Экспорт
	
	сИд = Ид2Список(Ид);
	
	Возврат сИд.ПолучитьЗначение(7);
	
КонецФункции

//*******************************************
// Код вида объекта - номер таблицы базы данных, в которой 
// хранится значение
//
Функция Ид2КодТаблицыИБ(Ид) Экспорт
	
	MetaDataWork = СоздатьОбъект("MetaDataWork");
	
	сИд = Ид2Список(Ид);
	
	Если сИд.ПолучитьЗначение(1) <> "U" Тогда
		Возврат Число(сИд.ПолучитьЗначение(4));
	Иначе
		МетаданныеОбъекта = ВызовМетода(сИд.ПолучитьЗначение(4)
			+ "(""" + сИд.ПолучитьЗначение(7) + """)");
		Возврат MetaDataWork.ИДОбъекта(МетаданныеОбъекта);				
	КонецЕсли;	
	
КонецФункции

//*******************************************
Функция КодИБ2Ид(Тип, Знач КодИБ) Экспорт
	
	КодИб = Лев(КодИб + "         ", 9);
	
	Если Найти("0123456789", Лев(Тип, 1)) = 0 Тогда
//КодИБ = СокрЛП(КодИБ);
//КодИд = Прав("         " + _StrToId(Лев(КодИБ, 3)) 
//	+ ?(СтрДлина(КодИБ)>3, Прав(КодИБ, 3), "   "), 13);

// в типизированных ссылках 9 символов: 6 на сам код и 3 на узел Иб
// видимо, придется писать для типизированных и нетипизированных ссылок отдельно ...
//Код = СокрЛП(Сред(КодИБ,1,10));
//\\
		сИд = Ид2Список(Тип2Ид(Тип));

	Иначе
		
		Объекты = ВыбратьОбъекты(ПолучитьПустойИд());
		
		Объекты.ВыбратьСтроки();
		
		Пока Объекты.ПолучитьСтроку() = 1 Цикл
		
			Если ЭтоКаталог(Объекты.Ид) = 0 Тогда
			
				Если Ид2КодТаблицыИБ(Объекты.Ид) = Число(Тип) Тогда
				
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;

		сИд = Ид2Список(Объекты.Ид);
		
	КонецЕсли;

	Код = СокрЛП(Лев(КодИБ, 6));

	КодУзлаРИБ = Прав(КодИБ,3);

	сИд.УстановитьЗначение(7, Прав("         " 
		+ _StrToId(Код), 10) + КодУзлаРИБ);

	Возврат	Список2Ид(сИд);
	
КонецФункции	

//*******************************************
Функция КодИБ2Ссылка(Тип, КодТаблицы, КодСтроки) Экспорт
	
	МДВ = СоздатьОбъект("MetaDataWork");
    Возврат МДВ.ЗначениеИзСтрокиБД(Тип, _StrToId(КодТаблицы), КодСтроки); 
	
КонецФункции

//*******************************************
Функция Ид2ИдНеопрТипа(Ид)
	
	сИд = Ид2Список(Ид);
	сИд.УстановитьЗначение(7, Прав("          " 
		+ сИд.ПолучитьЗначение(4), 10) + сИд.ПолучитьЗначение(7));
	сИд.УстановитьЗначение(4, "0");	
	Возврат Список2Ид(сИд);
	
КонецФункции

//*******************************************
Функция ИдНеопрТипа2Ид(Ид)
	
	сИд = Ид2Список(Ид);
	сИд.УстановитьЗначение(4, Лев(сИд.ПолучитьЗначение(7), 10));
	сИд.УстановитьЗначение(7, Прав(сИд.ПолучитьЗначение(7), 13));
	Возврат Список2Ид(сИд);
	
КонецФункции

//*******************************************
// Символьное представление значения в таблице базы данных
//
Функция Ид2СтрокаИБ(Ид) Экспорт
	// а есть еще проблема, связанная с тем, что реквизиты
	// формы тип <<Документ>> неопределенного вида имеют 4-м
	// реквизитом в списке Ид - 0, а 7-й реквизит кодируется 
	// 23-х символьным выражением с указанием идентификатора
	// вида документа!
	//
	// неправильно. в РИБ последние 3 символа - служебные и не
	// конвертируются
	//Возврат _IdToStr(Ид2КодИБ(Ид))
	
	//Французов: неопределенного типа
	Если  ЭтоКаталог(Ид) = 1 Тогда
		//
		КодТипа = СокрЛП(Лев(Ид2КодИБ(Ид),10));
		КодИБ = СокрЛП(Сред(Ид2КодИБ(Ид),11,10));
		КодУзлаРИБ = Прав(Ид2КодИБ(Ид),3);
		Возврат Прав(_IdToStr(КодТипа), 4) 
			+ _IdToStr(КодИБ) + КодУзлаРИБ;
	Иначе
		//
		СтрокаИБ = Ид2КодИБ(Ид);
		КодИБ = СокрЛП(Лев(СтрокаИБ,10));
		КодУзлаРИБ = Прав(СтрокаИБ,3);
		Возврат _IdToStr(КодИБ) + КодУзлаРИБ;
		//
	КонецЕсли;
	//\\
КонецФункции

//*******************************************
// Символьное представление значения в таблице базы данных
// с указанием типа данных (13-символьное значение)
//
Функция Ид2ПолнаяСтрокаИб(Ид) Экспорт
	
	Возврат _IdToStr(Ид2КодТаблицыИБ(Ид)) + Ид2СтрокаИБ(Ид)
	
КонецФункции	

//*******************************************
// Символьное представление значения в таблице базы данных
// с указанием вида и типа данных (23-символьное значение
// поля "PARENTVAL" таблицы "1SCRDOC")
//
Функция Ид2ЗначениеГрафыЖурнала(Ид) Экспорт
	
	сИд = Ид2Список(Ид);
	
	Результат = сИд.ПолучитьЗначение(1);
	
	// почему-то так ...
	Если мПримитивныеТипы
		.Принадлежит(Ид2Тип(Ид)) = 1 Тогда
			Возврат Результат 
				+ Прав("                       " 
					+ Ид2Ссылка(Ид), 22);
	КонецЕсли;

	Результат = Результат + "1" 
		+ Прав(_IdToStr(Ид2КодТаблицыИБ(Ид)), 4) 
			+ СокрП(Ид2СтрокаИБ(Ид)); 
	
	Возврат Результат;	
	
КонецФункции	

//*******************************************
// Код колонки в таблице базы данных, определенной для хранения
// значений реквизита
//
Функция Реквизит2КодПоляИБ(Реквизит, Ид) Экспорт
	
	MetaDataWork = СоздатьОбъект("MetaDataWork");
	
	Если Реквизит.НомерСтроки = 0 Тогда
		Возврат 0;
	КонецЕсли;

	МетаданныеРеквизита = ВызовМетодаОбъекта(Ид, Реквизит.ИдКаталога 
		+ "(""" + Реквизит.Ид + """)");
	
	Если ПустоеЗначение(МетаданныеРеквизита) = 0 Тогда
		Возврат MetaDataWork.ИДОбъекта(МетаданныеРеквизита);
	КонецЕсли;	
	
	Возврат 0;
	
КонецФункции

//*******************************************
// Полный идентификатор объекта метаданных - его тип
//
Функция Реквизит2СтрокаПоляИБ(Реквизит, Ид) Экспорт
	Перем СтрокаПоляИБ;
	
	Если Реквизит.НомерСтроки = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	П = мСтандартныеРеквизитыСправочников
		.НайтиЗначение(Реквизит.Ид);
    
	Если П > 0 Тогда	
		мСтандартныеРеквизитыСправочников
			.ПолучитьЗначение(П, СтрокаПоляИБ);
			
		Возврат СтрокаПоляИБ;	
	КонецЕсли;		

	П = мСтандартныеРеквизитыДокументов
		.НайтиЗначение(Реквизит.Ид);
    
	Если П > 0 Тогда	
		мСтандартныеРеквизитыДокументов
			.ПолучитьЗначение(П, СтрокаПоляИБ);
			
		Возврат СтрокаПоляИБ;	
	КонецЕсли;
	
	Возврат "SP" + Реквизит2КодПоляИБ(Реквизит, Ид);
	
КонецФункции

//*******************************************
// Полный идентификатор объекта метаданных - его тип
//
Функция Метаданные2Ид(М) Экспорт
	
	Возврат ?(М.Выбран()=0, ПолучитьПустойИд(),
		Тип2Ид(М.ПолныйИдентификатор()));
	
КонецФункции

//*******************************************
// Вызов к методам и свойствам объекта "Метаданные"
//
Функция ВызовМетода(СтрокаМетода)
	Перем Ответ;
	
	Модуль = СоздатьОбъект("Модуль");
	
	Модуль.Новый();
	Модуль.ПередатьВызовМетода("Попытка Результат = Метаданные." 
		+ СтрокаМетода + " Исключение КонецПопытки;");
	
	// в случае, если метод объекта не обнаружен, будет возвращено
	// пустое значение
	Если Модуль.Выполнить() = 1 Тогда
		Ответ = Модуль.РезультатВыполнения();
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

//*******************************************
// Вызов к методам и свойствам объекта "Метаданные" в контексте
// объекта, заданного идентификатором
//
Функция ВызовМетодаОбъекта(Ид, СтрокаМетода) Экспорт
	Перем Ответ;
	
	тТип = СтрЗаменить(Ид2Тип(Ид), ".", РазделительСтрок);

	Если мАгрегатныеТипы.Принадлежит(СтрПолучитьСтроку(тТип, 1)) = 1 Тогда
		Если Найти(СтрокаМетода, "ОбщийРеквизитДокумента") <> 0 Тогда
			Ответ = ВызовМетода(СтрокаМетода);
		Иначе
			Ответ = ВызовМетода(СтрПолучитьСтроку(тТип, 1) + "(""" 
				+ СтрПолучитьСтроку(тТип, 2) + """)." + СтрокаМетода);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

//*******************************************
// Выборка объектов, реквизитов объекта
//*******************************************
// Выборка идентификаторов объектов метаданных конфигурации
// с возможным фильтром по каталогу, пример:
//
//		ТабЗнач = ВыбратьОбъекты(ПолучитьПустойИд()), или
//		ТабЗнач = ВыбратьОбъекты(Тип2Ид("Справочник"))	
//
Функция ВыбратьОбъекты(ИдКаталога) Экспорт
	
	Выборка = СоздатьОбъект("ТаблицаЗначений");
	Выборка.НоваяКолонка("Ид"); 
	Выборка.НоваяКолонка("ИдКаталога"); 
	
	// выборка примитивных типов
	Для ИндТип = 1 По мПримитивныеТипы.РазмерСписка() Цикл
		Ид = Тип2Ид(мПримитивныеТипы.ПолучитьЗначение(ИндТип));
		Если ВИерархии(Ид, ИдКаталога) = 1 Тогда
			Выборка.НоваяСтрока();
			Выборка.Ид = Ид;
		КонецЕсли;	
	КонецЦикла;
	
	// выборка агрегатных типов
	Для ИндТип = 1 По мАгрегатныеТипы.РазмерСписка() Цикл
		Тип = мАгрегатныеТипы.ПолучитьЗначение(ИндТип);
		Ид = Шаблон("[Метаданные2Ид(Метаданные." + Тип + "(1))]");
		// одновременно проверяется наличие объектов конфигурации 
		// и принадлежность каталогу
		Если (Ид <> ПолучитьПустойИд()) и (ВИерархии(Ид, ИдКаталога) = 1) Тогда
			ИдРодителя = ИдКаталога(Ид);
			Выборка.НоваяСтрока();
			Выборка.Ид = ИдРодителя;
			КолвоОбъектов = Число(Шаблон("[Метаданные." + Тип + "()]"));
			Для ИндВид = 1 По КолвоОбъектов Цикл
				Ид = Шаблон("[Метаданные2Ид(Метаданные." + Тип + "(" + ИндВид + "))]");
				Выборка.НоваяСтрока();
				Выборка.Ид = Ид;
				Выборка.ИдКаталога = ИдРодителя;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
			
	Возврат Выборка;
	
КонецФункции

//*******************************************
// Выборка идентификаторов реквизитов заданного объекта,
// при заданном ИдРеквизита, выполняется поиск реквизита 
// по идентификатору
//
Функция ВыбратьРеквизиты(Ид, Выборка = "", ИдКаталога = "", ИдРеквизита = "") Экспорт
	
	тТип = СтрЗаменить(Ид2Тип(Ид), ".", РазделительСтрок);
		
	Если Выборка = "" Тогда
		Выборка = СоздатьОбъект("ТаблицаЗначений");
		Выборка.НоваяКолонка("Ид");
		Выборка.НоваяКолонка("ИдКаталога"); 
	КонецЕсли;
	
	Если ИдКаталога = "" Тогда
		
		ВыбратьРеквизиты(Ид, Выборка, "РеквизитСтандартный", ИдРеквизита); 
		ВыбратьРеквизиты(Ид, Выборка, "Реквизит", ИдРеквизита); 
		ВыбратьРеквизиты(Ид, Выборка, "РеквизитШапки", ИдРеквизита);
		ВыбратьРеквизиты(Ид, Выборка, "ОбщийРеквизитДокумента", ИдРеквизита);
		ВыбратьРеквизиты(Ид, Выборка, "РеквизитТабличнойЧасти", ИдРеквизита);
		ВыбратьРеквизиты(Ид, Выборка, "Измерение", ИдРеквизита);
		ВыбратьРеквизиты(Ид, Выборка, "Ресурс", ИдРеквизита);
		
	ИначеЕсли ИдКаталога = "РеквизитСтандартный" Тогда
		Если СтрПолучитьСтроку(тТип, 1) = "Справочник" Тогда
			спРеквизитСтандартный = мСтандартныеРеквизитыСправочников;
		ИначеЕсли СтрПолучитьСтроку(тТип, 1) = "Документ" Тогда
			спРеквизитСтандартный = мСтандартныеРеквизитыДокументов;
		Иначе
			Возврат Выборка;
		КонецЕсли;
		Для Индекс = 1 По спРеквизитСтандартный.РазмерСписка() Цикл
			Идентификатор = спРеквизитСтандартный.ПолучитьЗначение(Индекс);
			Если (ИдРеквизита = "") или (Идентификатор = ИдРеквизита) Тогда	
				Выборка.НоваяСтрока();
				Выборка.Ид = Идентификатор;
				Выборка.ИдКаталога = ИдКаталога;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИдКаталога = "ОбщийРеквизитДокумента" Тогда
		Если СтрПолучитьСтроку(тТип, 1) = "Документ" Тогда
			КолвоОбъектов = ВызовМетода("ОбщийРеквизитДокумента()");
			Для Индекс = 1 По КолвоОбъектов Цикл
				Идентификатор = ВызовМетода("ОбщийРеквизитДокумента(" 
					+ Индекс + ").Идентификатор");
				Если (ИдРеквизита = "") или (Идентификатор = ИдРеквизита) Тогда	
					Выборка.НоваяСтрока();
					Выборка.Ид = Идентификатор;
					Выборка.ИдКаталога = "ОбщийРеквизитДокумента";	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	Иначе
		КолвоОбъектов = Число(ВызовМетодаОбъекта(Ид, ИдКаталога + "()"));
		Для Индекс = 1 По КолвоОбъектов Цикл
			Идентификатор = ВызовМетодаОбъекта(Ид, 
				ИдКаталога + "(" + Индекс + ").Идентификатор");
			Если (ИдРеквизита = "") или (Идентификатор = ИдРеквизита) Тогда
				Выборка.НоваяСтрока();
				Выборка.Ид = Идентификатор;
				Выборка.ИдКаталога = ИдКаталога;
				Если ИдРеквизита <> "" Тогда
					Возврат Выборка;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат Выборка;
	
КонецФункции	

//*******************************************
// Выборка идентификаторов значений заданного перечисления
//
Функция ВыбратьЗначения(Ид, ИдЗначения = "") Экспорт
	
	Выборка = СоздатьОбъект("ТаблицаЗначений");
	Выборка.НоваяКолонка("Ид");
	
	КолвоОбъектов = Число(ВызовМетодаОбъекта(Ид, "Значение()"));
	Для Индекс = 1 По КолвоОбъектов Цикл
		Идентификатор = ВызовМетодаОбъекта(Ид, 
			"Значение(" + Индекс + ").Идентификатор");
		Если (ИдЗначения = "") или (Идентификатор = ИдЗначения) Тогда	
			Выборка.НоваяСтрока();
			Выборка.Ид = Идентификатор;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Выборка;
	
КонецФункции	

//*******************************************
// Выборка свойств объектов, реквизитов объекта
//*******************************************
Функция ВыбратьСвойстваКонфигурации() Экспорт
	
	Выборка = СоздатьОбъект("ТаблицаЗначений");
	Выборка.НоваяКолонка("Имя"); 
	Выборка.НоваяКолонка("Значение");
	
	Для Индекс = 1 По мСвойстваКонфигурации.РазмерСписка() Цикл
		
		Выборка.НоваяСтрока();
		Выборка.Имя = мСвойстваКонфигурации.ПолучитьЗначение(Индекс);
		Выборка.Значение = ВызовМетода(Выборка.Имя);
		
	КонецЦикла;	
	
	Возврат Выборка;
	
КонецФункции	

//*******************************************
// Получение свойства метаданных объекта
//
Функция СвойствоОбъекта(Ид, ИмяСвойства) Экспорт
	
	Возврат ВызовМетодаОбъекта(Ид, ИмяСвойства);

КонецФункции

//*******************************************
// Выборка свойств метаданных объекта
//
Функция ВыбратьСвойстваОбъекта(Ид) Экспорт
	
	Выборка = СоздатьОбъект("ТаблицаЗначений");
	Выборка.НоваяКолонка("Имя"); 
	Выборка.НоваяКолонка("Значение");
	
	// основные свойства доступные для всех объектов
	Для Индекс = 1 По мОснСвойстваОбъектов.РазмерСписка() Цикл
		Выборка.НоваяСтрока();
		Выборка.Имя = мОснСвойстваОбъектов.ПолучитьЗначение(Индекс);
		Выборка.Значение = СвойствоОбъекта(Ид, Выборка.Имя);
	КонецЦикла;	
	
	// дополнительные свойства, соответствующие типу объекта
	Для Индекс = 1 По мДопСвойстваОбъектов.РазмерСписка() Цикл
		Имя = мДопСвойстваОбъектов.ПолучитьЗначение(Индекс);
		Значение = СвойствоОбъекта(Ид, Имя);
		Если ПустоеЗначение(Значение) = 0 Тогда
			Выборка.НоваяСтрока();
			Выборка.Имя = Имя;
			Выборка.Значение = Значение;
		КонецЕсли;
	КонецЦикла;

	Возврат Выборка;
	
КонецФункции

//*******************************************
// Получение свойства метаданных реквизита объекта
//
Функция СвойствоРеквизита(Реквизит, ИмяСвойства, Ид) Экспорт
	
	Если Реквизит.НомерСтроки = 0 Тогда
		Возврат ПолучитьПустоеЗначение();
	КонецЕсли;
	
	Возврат ?(Реквизит.ИдКаталога="ОбщийРеквизитДокумента",
		ВызовМетода(Реквизит.ИдКаталога + "(""" + Реквизит.Ид + """)." + ИмяСвойства),	
			ВызовМетодаОбъекта(Ид, Реквизит.ИдКаталога + "(""" + Реквизит.Ид + """)."
				+ ИмяСвойства));	
	
КонецФункции

//*******************************************
// Выборка свойств метаданных реквизита объекта
//
Функция ВыбратьСвойстваРеквизита(Реквизит, Ид) Экспорт
	
	Выборка = СоздатьОбъект("ТаблицаЗначений");
	Выборка.НоваяКолонка("Имя"); 
	Выборка.НоваяКолонка("Значение");
	
	Если Реквизит.НомерСтроки = 0 Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Для Индекс = 1 По мСвойстваРеквизита.РазмерСписка() Цикл
		Выборка.НоваяСтрока();
		Выборка.Имя = мСвойстваРеквизита.ПолучитьЗначение(Индекс);
		Выборка.Значение = СвойствоРеквизита(Реквизит, Выборка.Имя, Ид);
	КонецЦикла;	
	
	Возврат Выборка;
	
КонецФункции

//*******************************************
// Выборка свойств метаданных значения перечисления
//
Функция ВыбратьСвойстваЗначения(Значение, Ид) Экспорт
	
	Выборка = СоздатьОбъект("ТаблицаЗначений");
	Выборка.НоваяКолонка("Имя"); 
	Выборка.НоваяКолонка("Значение");
	
	Если Значение.НомерСтроки = 0 Тогда
		Возврат Выборка;
	КонецЕсли;
		
	Для Индекс = 1 По мСвойстваЗначения.РазмерСписка() Цикл
		Выборка.НоваяСтрока();
		Выборка.Имя = мСвойстваЗначения.ПолучитьЗначение(Индекс);
		Выборка.Значение = ВызовМетодаОбъекта(Ид, "Значение(""" 
			+ Значение.Ид + """)." + Выборка.Имя);
	КонецЦикла;	
	
	Возврат Выборка;
	
КонецФункции

//*******************************************
// Выборка идентификаторов реквизитов заданного объекта,
// имеющих заданный тип. При заданном ИдРеквизита, 
// выполняется поиск реквизита по идентификатору
//*******************************************
Функция ВыбратьРеквизитыПоТипу(Ид, Тип, Выборка = "", ИдКаталога = "", ИдРеквизита = "") Экспорт
	
	Выборка = ВыбратьРеквизиты(Ид, Выборка, ИдКаталога, ИдРеквизита);
	Индекс 	= Выборка.КоличествоСтрок();

	Пока Индекс > 0 Цикл
		Выборка.ПолучитьСтрокуПоНомеру(Индекс);
		
		тТип = СвойствоРеквизита(Выборка, "Тип", Ид) 
			+ ?(СвойствоРеквизита(Выборка, "Вид", Ид)="",
				"", "." + СвойствоРеквизита(Выборка, "Вид", Ид));
			
		Если тТип <> Тип Тогда
			Выборка.УдалитьСтроку(Индекс);
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат Выборка;
	
КонецФункции

//*******************************************
// Осуществляет поиск реквизита объекта (и самого объекта)
// по коду информационной базы. Может применяться, например
// при анализе таблицы 1SCONST реквизита ID, чтобы узнать,
// в какой таблице искать объект, для которого задано 
// периодическое значение
//*******************************************
Функция КодИб2Реквизит(КодИб) Экспорт
	Перем сзРезультат;
	
	Объекты = ВыбратьОбъекты(ПолучитьПустойИд());
	Объекты.ВыбратьСтроки();
	Пока Объекты.ПолучитьСтроку() = 1 Цикл
		Если ЭтоКаталог(Объекты.Ид) = 0 Тогда
			Выборка = ВыбратьРеквизиты(Объекты.Ид);
			Выборка.ВыбратьСтроки();
			Пока Выборка.ПолучитьСтроку() = 1 Цикл
				Если Прав(_IdToStr(Реквизит2КодПоляИБ(Выборка, Объекты.Ид)), 
					СтрДлина(КодИб)) = КодИб Тогда
						сзРезультат = СоздатьОбъект("СписокЗначений");
						сзРезультат.ДобавитьЗначение(Объекты.Ид, "Объект");
						сзРезультат.ДобавитьЗначение(Выборка, "Реквизит");
						Возврат сзРезультат;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
	Возврат сзРезультат;
	
КонецФункции	

//*******************************************
Процедура Сформировать()
	
	//ВыбратьРеквизиты(Тип2Ид("Документ.РасходнаяНакладная")).ВыбратьСтроку();
	//ВыбратьСвойстваКонфигурации().ВыбратьСтроку();
	//ВыбратьСвойстваОбъекта(Тип2Ид("Документ.РасходнаяНакладная")).ВыбратьСтроку(); 
	//ВыбратьСвойстваОбъекта(Тип2Ид("Справочник.Номенклатура")).ВыбратьСтроку();
	//Ид = Тип2Ид("Справочник.Номенклатура"); 
	//Ид = Тип2Ид("Регистр.ВзаиморасчетыПокупателей");
	//ВыбратьРеквизиты(Ид,,, "").ВыбратьСтроку();
	//Сообщить(Реквизит2КодПоляИБ(ВыбратьРеквизиты(Ид,,, "Клиент"),Ид));
	//ВыбратьСвойстваРеквизита(ВыбратьРеквизиты(Ид,,, "К19"), Ид).ВыбратьСтроку();
	//Ид = Тип2Ид("Перечисление.ПрНакладной");
	//ВыбратьЗначения(Ид,"Пересортица").ВыбратьСтроку();
	//ВыбратьСвойстваЗначения(ВыбратьЗначения(Ид,"Пересортица"),Ид).ВыбратьСтроку();
	//ВыбратьОбъекты(ПолучитьПустойИд()).ВыбратьСтроку();
	//ВыбратьРеквизитыПоТипу(Тип2Ид("Документ.РасходнаяНакладная"), "Справочник.Контрагенты").ВыбратьСтроку(); 

	//Выборка = ВыбратьРеквизиты(Тип2Ид("Регистр.ОстаткиТоваров"), , , "Товар");
	//Выборка.ВыбратьСтроку();
	//Сообщить(Реквизит2КодПоляИБ(Выборка, 
	//	Тип2Ид("Регистр.ОстаткиТоваров")));
	
	//Объекты = ВыбратьОбъекты(ПолучитьПустойИд());
	//Объекты.ВыбратьСтроки();
	//Пока Объекты.ПолучитьСтроку() = 1 Цикл
	//	Если ЭтоКаталог(Объекты.Ид) = 0 Тогда
	//		Выборка = ВыбратьРеквизитыПоТипу(Объекты.Ид, "Справочник.Контрагенты");
	//		Если Выборка.КоличествоСтрок() > 0 Тогда
	//			Сообщить(Реквизит2КодПоляИБ(Выборка, Объекты.Ид));
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЦикла;
	
КонецПроцедуры

//*******************************************
Процедура ПриОткрытии()
	//Сформировать()
КонецПроцедуры	

//*******************************************
мПримитивныеТипы = СоздатьОбъект("СписокЗначений");
мПримитивныеТипы.ИзСтрокиСРазделителями("""Строка"",""Число"",""Дата""");

мАгрегатныеТипы = СоздатьОбъект("СписокЗначений");
мАгрегатныеТипы.ИзСтрокиСРазделителями("""Справочник"",""Документ"",""Перечисление"",""Регистр""");

мОснСвойстваОбъектов = СоздатьОбъект("СписокЗначений");
мОснСвойстваОбъектов.ИзСтрокиСРазделителями("""Идентификатор"",""ПолныйИдентификатор()"",""Синоним"",
	|""Комментарий""");

мДопСвойстваОбъектов = СоздатьОбъект("СписокЗначений");
мДопСвойстваОбъектов.ИзСтрокиСРазделителями("""КоличествоУровней"",""ДлинаКода"",
	|""ДлинаНаименования"",""СерииКодов"",""ТипКода"",""ОсновноеПредставление"",
	|""КонтрольУникальности"",""АвтоНумерация"",""ПериодичностьНомера"",""ДлинаНомера"",
	|""ТипНомера"",""ТипРегистра"",""ПериодичностьРегистра"",""БыстраяОбработкаДвижений"",
	|""ОбластьРаспространения"",""РазрешитьПроведение""");

мСвойстваКонфигурации = СоздатьОбъект("СписокЗначений");
мСвойстваКонфигурации.ИзСтрокиСРазделителями("""Идентификатор"",""Синоним"",""Комментарий""");
    
мСвойстваРеквизита = СоздатьОбъект("СписокЗначений");
мСвойстваРеквизита.ИзСтрокиСРазделителями("""Идентификатор"",""ПолныйИдентификатор()"",""Синоним"",
	|""Комментарий"",""Тип"",""Вид"",""Длина"",""Точность"",""Неотрицательный"",""РазделятьТриады"",
	|""Периодический"",""Сортировка"",""Отбор"",""РучноеИзменение"",""ИзменяетсяДокументами"",
	|""Использование""");
    
мСвойстваЗначения = СоздатьОбъект("СписокЗначений");
мСвойстваЗначения.ИзСтрокиСРазделителями("""Идентификатор"",""Комментарий"",""Представление""");

мСтандартныеРеквизитыСправочников = СоздатьОбъект("СписокЗначений");
//мСтандартныеРеквизитыСправочников.ИзСтрокиСРазделителями("""Код"",""Наименование"",""Родитель"",""Владелец""");
мСтандартныеРеквизитыСправочников.ДобавитьЗначение("Код", "CODE"); 
мСтандартныеРеквизитыСправочников.ДобавитьЗначение("Наименование", "DESCR");
мСтандартныеРеквизитыСправочников.ДобавитьЗначение("Родитель", "PARENTID");
мСтандартныеРеквизитыСправочников.ДобавитьЗначение("Владелец", "PARENTEXT");
//\\

мСтандартныеРеквизитыДокументов = СоздатьОбъект("СписокЗначений");
//мСтандартныеРеквизитыДокументов.ИзСтрокиСРазделителями("""НомерДок"",""ДатаДок""");
мСтандартныеРеквизитыДокументов.ДобавитьЗначение("НомерДок", "DOCNO"); 
мСтандартныеРеквизитыДокументов.ДобавитьЗначение("ДатаДок", "DATE");
//\\
