Перем // структура программного модуля
	мРазделПеременных, // раздел объявления переменных (глобальных для данного модуля)
	мРазделОбъявленияПроцедурИФункций, мРазделПроцедурИФункций, // раздел процедур и функций
	мРазделОсновнойПрограммы; // раздел основной программы

Перем мКонтекст, // контекст программного модуля
	мВыпМодуль; // объект "ВыполняемыйМодуль" компоненты 1С++	
//*******************************************
Функция Тест()
	
	Возврат """глмМодули"" - подключен";
	
КонецФункции	
//*******************************************
// Создает новый программный модуль - очищает текст модуля 
//
Процедура НовыйМодуль()
	
	мРазделПеременных = "Перем Результат;" 	// предопределенная переменная - результат 
						// выполнения модуля
		+ РазделительСтрок; 
	мРазделОбъявленияПроцедурИФункций = "";
	мРазделПроцедурИФункций = "";
	мРазделОсновнойПрограммы = "";
	
КонецПроцедуры
//*******************************************
// Определяет в тексте модуля глобальную переменную - переданный
// параметр. Задает значение параметра в разделе основной программы
//
Процедура ПередатьПараметр(Имя, Значение)
	
	// размещение описания в разделе глобальных переменных
	мРазделПеременных = мРазделПеременных + "Перем " + Имя + ";"
		 + РазделительСтрок;
	
	// присвоение значения переменной в разделе основной программы	 
	стрВнут = СтрЗаменить(ЗначениеВСтрокуВнутр(Значение), """", "'");

	мРазделОсновнойПрограммы = мРазделОсновнойПрограммы 
		+ Имя + "=ЗначениеИзСтрокиВнутр(СтрЗаменить(""" + стрВнут 
			+ """, ""'"", """"""""));" + РазделительСтрок;	
	
КонецПроцедуры
//*******************************************
// Размещает предварительное описание процедуры или функции
//
Процедура ПередатьОбъявлениеМетода(стрОбъявление)
	
	// стрОбъявление::= Процедура|Функция <Имя>(<Парам1>,...,<ПарамN>) Далее
	мРазделОбъявленияПроцедурИФункций = мРазделОбъявленияПроцедурИФункций 
		+ РазделительСтрок + стрОбъявление + РазделительСтрок;
		
КонецПроцедуры	
//*******************************************
// Размещает описание процедуры или функции в соответствующем разделе 
//
Процедура ПередатьИсточникМетода(стрИсточник)
	
	// стрИсточник::= Процедура <Имя_проц>([[Знач] <Парам1>[=<ДефЗнач>],
	//	... ,[Знач] <ПарамN>[=<ДефЗнач>]])[Экспорт]	
    	//	 // Объявления локальных переменных;
    	//	 // Операторы;
    	//	...
   	//	[Возврат;]
   	//	 // Операторы;
	//	...
	// КонецПроцедуры
	// ..., если передано описание процедуры или, 
	// если передано описание функции:
	// стрИсточник ::= Функция <Имя_функции>([[Знач] <Парам1>[=<ДефЗнач>], 
	//	... ,[Знач] <ПарамN>[=<ДефЗнач>]])[Экспорт]	
	//   // Объявления локальных переменных;
	//   // Операторы ;
	//   ...
	//   Возврат <ВозвращаемоеЗначение>;
	//   // Операторы ;
	//   ...
	// КонецФункции

	мРазделПроцедурИФункций = мРазделПроцедурИФункций 
		+ РазделительСтрок + стрИсточник + РазделительСтрок;
		
КонецПроцедуры
//*******************************************
// Размещает переданный оператор в разделе основной программы
//
Процедура ПередатьВызовМетода(стрВызов)
	
	мРазделОсновнойПрограммы = мРазделОсновнойПрограммы + стрВызов + ";";
	
КонецПроцедуры
//*******************************************
// Позволяет задать контекст выполняемого модуля
//
Процедура ПередатьКонтекст(Конт)
	
	мКонтекст = Конт;
	
КонецПроцедуры
//*******************************************
// Загружает и компилирует полученный программный модуль
//
Функция Выполнить()
	
	// онтология в действии :)
	ТекстМодуля = мРазделПеременных + мРазделОбъявленияПроцедурИФункций 
		+ мРазделПроцедурИФункций + мРазделОсновнойПрограммы;
	
	мВыпМодуль = СоздатьОбъект("ВыполняемыйМодуль");
	мВыпМодуль.УстановитьМодуль(ТекстМодуля);
	Если ПустоеЗначение(мКонтекст) = 0 Тогда
		мВыпМодуль.НазначитьКонтекст(мКонтекст);
	КонецЕсли;	
	Если мВыпМодуль.КомпилироватьМодуль() = 1 Тогда
		Если мВыпМодуль.ВыполнитьМодуль() = 1 Тогда
			Возврат 1;
		Иначе
			//Сообщить("Не удалось выполнить модуль");
			Возврат 0;
		КонецЕсли;
	Иначе
		Сообщить("Не удалось скомпилировать модуль");
		Возврат 0;
	КонецЕсли;
	
КонецФункции
//*******************************************
// Метод позволяет получить значение глобальной переменной модуля
// по имени. Модуль должен быть скомпилирован и выполнен (функция 
// "Выполнить()")
//
Функция ПолучитьЗначениеПараметра(Имя)
	
	Возврат ЗначениеИзСтрокиВнутр(Шаблон("[ЗначениеВСтрокуВнутр(мВыпМодуль."
		+ Имя + ")]"));
	
КонецФункции
//*******************************************
// С целью избежать конвертации внутреннего значения результата выполнения
// модуля в строку и обратно и, в то же время, сохранить некоторое подобие
// "инкапсуляции методов", введена предопределенная переменная "Результат"
// загружаемого модуля. 
//
Функция РезультатВыполнения()

	Возврат мВыпМодуль.Результат;

КонецФункции
