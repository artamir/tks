Перем мОбъемВыборки;
Перем стрШаблРазвОбъектовВФайлеВыгрузки;
//*******************************************
Функция Тест()
	
	Возврат """глмРИБ"" - подключен";
	
КонецФункции
//*******************************************
Функция НомерВСтроку(НомерСообщения)
	
	Возврат Прав("     " + СтрЗаменить(НомерСообщения, " ", ""), 6);
	
КонецФункции	
//*******************************************
Функция ЗафиксироватьИзменения(УзелРИБ, ОбъемВыборки)
	
	//НомерСообщения = глмВыгрузкаДанных.КодСообщенияСимв(1 
	//	+ глмВыгрузкаДанных.КодСообщения(УзелРИБ.Код));
	УзелРИБ.НомерОтправленного = УзелРИБ.НомерОтправленного + 1;
	
	Попытка
		УзелРИБ.Записать();
	Исключение
	// не удалось записать номер сообщения	
		Возврат 0;
	КонецПопытки;	
	
	НомерСообщения = НомерВСтроку(УзелРИБ.НомерОтправленного); 
	//\\
	ТекстЗапроса = "_UpdExchStat(0, '" + УзелРИБ.Код + "', '" 
		+ НомерСообщения + "', " + ОбъемВыборки + ", '    -1', 0)";

	Возврат глмOLEDBQuery
		.ВыполнитьИнструкцию(ТекстЗапроса, 
			"", 1, 0, 0, 1);
	
КонецФункции	
//*******************************************
Функция ПринятьИзменения(УзелРИБ, НомерСообщения, Ид = "    -1", Все = 0)
	
	ТекстЗапроса = "_UpdExchStat(1, '" 
		+ УзелРИБ.Код + "', '" + НомерВСтроку(НомерСообщения)  
	//\\	
			+ "', 0, '" + Ид + "'," + Все + ")";

	Возврат глмOLEDBQuery
		.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 1);
	
КонецФункции
//*******************************************
Функция ВыбратьИзменения(УзелРИБ, Тип = "", ОбъемВыборки = 0)
	
	ТекстЗапроса = 	"SELECT " + ?(ОбъемВыборки > 0, 
					"TOP " + ОбъемВыборки, "") + " 
					|	typeid, 
					|	objid, 
					|	deleted
					|FROM 
					|	1supdts
					|WHERE 
					|	Val(dwnldid) > 0 AND typeid <> '   0'
					|	AND objid <> '   0' AND dbsign = '" 
					+ УзелРИБ.Код + "'" 
					+ ?(Тип <> "", 
						" AND typeid = '" + Тип + "'", "") + "
					|ORDER BY
					|	dwnldid DESC
					|";

	Возврат глмOLEDBQuery
		.ВыполнитьИнструкцию(ТекстЗапроса, 
			"", 1, 0, 0, 0);
	
КонецФункции
//*******************************************
Функция НаборДанныхОбъекта(Объект, РасшОбъект)
	
	РасшОбъект.ДобавитьЗначение(Объект, "Документ");

	Возврат 1;
	
КонецФункции	
//*******************************************
Функция НаборДанныхГруппыОбъектов(УзелРИБ, Набор)
	Перем РасшОбъект;
	
	Если Метаданные.Обработка("глмРИБ" 
		+ УзелРИБ.Код).Выбран() = 1 Тогда
	// попытка реализации полиморфизма в обработке
	// массива выгружаемых данных
			ТекстШаблона = "[глмРИБ" + УзелРИБ.Код 
				+ ".НаборДанныхОбъекта(Набор.Объект, Набор.РасшОбъект)]";
	Иначе
		ТекстШаблона = "[НаборДанныхОбъекта(Набор.Объект, Набор.РасшОбъект)]";	
	КонецЕсли;		
	
    Набор = ВыбратьИзменения(УзелРИБ, "", мОбъемВыборки);

	Набор.НоваяКолонка("Объект");
	Набор.НоваяКолонка("РасшОбъект");
	
	НС = Набор.КоличествоСтрок();
	Пока НС > 0 Цикл
		Набор.ПолучитьСтрокуПоНомеру(НС);
		НС = НС - 1;
		
		Если (Набор.typeid = '     0   ') 
			ИЛИ (Набор.objid = '     0   ') Тогда
	// иногда, такие записи встречаются (почему?)
				Набор.УдалитьСтроку(НС + 1);
				Продолжить;
		КонецЕсли;	       

		Набор.Объект = глмМетаданные.КодИБ2Ссылка(12, 
			Набор.typeid, Набор.objid);
        
		Попытка
			Вид = Набор.Объект.Вид();
		Исключение
	// словили что-то не то - оставить в таблице 
	// 1supdts на потом для анализа
			Сообщить("Объект """ + Набор.Объект + """ исключен");
			Набор.УдалитьСтроку(Набор.НомерСтроки);
			Продолжить;
		КонецПопытки;	

		Набор.РасшОбъект = СоздатьОбъект("СписокЗначений");
	    
		Если Число(Шаблон(ТекстШаблона)) = 0 Тогда
			Возврат 0;
		КонецЕсли;	
    КонецЦикла;

	Пока Набор.КоличествоКолонок() > 1 Цикл
	// очистка промежуточных расчетных данных	
		Набор.УдалитьКолонку(1);
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции	
//*******************************************
Функция НовыйФайлВыгрузки(хмлПарсер, хмлНаборСхем, стрСхемаДанных, УзелРИБ)
	Перем хмлКорень, хмлСхема;
	
	стрИмяФайлаСхемы = глмОбщиеФункции
		.ВыгрузитьТаблицуВФайл(стрСхемаДанных, "xsd");
	
	Если глмХМЛ.ПрочитатьДокументИзФайла(хмлСхема, 
		"", "", стрИмяФайлаСхемы) = 0 Тогда
	// здесь, используется другой синтаксис...
			Возврат 0;
	КонецЕсли;	
	
	Если глмХМЛ.СоздатьЭлементДокумента(хмлПарсер, 
		хмлНаборСхем, хмлКорень, "ROOT", "windows-1251") 
			* глмХМЛ.ДобавитьСхемуИзФайла(хмлНаборСхем, 
				глмХМЛ.ПолучитьАтрибут(хмлСхема.documentElement, 
					"targetNamespace"),	хмлСхема) = 0 Тогда
	// ... в подключении схемы обмена для того,
	// чтобы иметь возможность прочитать 'tns' 
	// схемы из самого ее описания
			Возврат 0;
	КонецЕсли;	
	
	Возврат 1;
	
КонецФункции
//*******************************************
Функция ПрочитатьШаблонПреобразования(хмлШаблон, УзелРИБ)
	
	ИмяТаблицы = "РИБ" + УзелРИБ.Код;
	
	Таблица = СоздатьОбъект("Таблица");
	
	Таблица.ИсходнаяТаблица(ИмяТаблицы);
	
	Если ПустоеЗначение(Таблица
		.ПолучитьСекцию("Шаблон")) = 1 Тогда
			
			ИмяТаблицы = "РИБ";
	КонецЕсли;	

	ИмяТаблицы = ИмяТаблицы + ";Шаблон";
	
	Возврат глмХМЛ.ПрочитатьДокументИзФайла(хмлШаблон, "", "", 
		глмОбщиеФункции.ВыгрузитьТаблицуВФайл(ИмяТаблицы, "xml"));
	
КонецФункции
//*******************************************
Функция РазвернутьОбъекты(хмлПарсер, хмлНаборСхем, УзелРИБ)
	Перем хмлФункция, хмлРезультат;
	
	стрХСЛ = стрШаблРазвОбъектовВФайлеВыгрузки;
	
	Попытка
		
		глмХМЛ.ПрочитатьДокументИзСтроки(хмлФункция, 
			хмлНаборСхем, , стрХСЛ);
		
		глмХМЛ.ВыполнитьПреобразование(хмлПарсер, 
			хмлНаборСхем, хмлФункция, хмлРезультат);
		
	Исключение
		
	КонецПопытки;
    
	хмлКорень = хмлРезультат.documentElement;
	
	глмХМЛ.ДобавитьАтрибут(хмлРезультат, хмлКорень, 
		"ИнфБаза", "ТорговыйОтдел");
	
	глмХМЛ.ДобавитьАтрибут(хмлРезультат, хмлКорень, 
		"ДатаВыгрузки", глмХМЛ.Дата2Строка(ТекущаяДата(), 
			" " + ТекущееВремя()));
	
	глмХМЛ.ДобавитьАтрибут(хмлРезультат, хмлКорень, 
		"Пользователь", СокрЛП(глПользователь));
	
	глмХМЛ.ДобавитьАтрибут(хмлРезультат, хмлКорень, 
		"НомерОтправленного", СокрЛП(УзелРИБ.НомерОтправленного));

	глмХМЛ.ДобавитьАтрибут(хмлРезультат, хмлКорень, 
		"НомерПринятого", СокрЛП(УзелРИБ.НомерПринятого));

	Возврат хмлРезультат;
	
КонецФункции	
//*******************************************
Функция ВыполнитьЗагрузку(УзелРИБ, ИмяФайла)
	Перем хмлПарсер, хмлНаборСхем, хмлКорень;

	Попытка
		Результат = глмХМЛ.ПрочитатьДокументИзФайла(хмлПарсер, 
			хмлНаборСхем, "", ИмяФайла);

		УзелРИБ.НомерПринятого = глмХМЛ.ПолучитьАтрибут(хмлПарсер
			.documentElement, "НомерОтправленного");

		НомерПринятого = глмХМЛ.ПолучитьАтрибут(хмлПарсер
			.documentElement, "НомерПринятого");
			
		УзелРИБ.Записать();
	Исключение
		Возврат 0;
		
	КонецПопытки;
	
	ТекстШаблона = "[глмРИБ" + УзелРИБ.Код 
		+ ".ЗагрузитьДанные(хмлПарсер)]";
		
	Если Число(Шаблон(ТекстШаблона)) = 0 Тогда
		Возврат 0;
	КонецЕсли;	
	
	// 1sexch
	ИмяТаблицы = КаталогИб() + "1SEXCH.DBF";
	
	ДБФ = СоздатьОбъект("XBASE");	
	
	Если ФС.СуществуетФайл(ИмяТаблицы) = 1 Тогда
		Попытка
			ДБФ.ОткрытьФайл(ИмяТаблицы, "", 0);
		Исключение 
// не удалось получить доступ к файлу
			Возврат 0;
		КонецПопытки;
		Если ДБФ.Открыта() = 0 Тогда
// не удалось открыть файл, при доступе 
// на запись к нему по каким то причинам		
			Возврат 0;
		КонецЕсли;
		ДБФ.ОчиститьФайл();
		ДБФ.Записать();
	Иначе
		ДБФ.ДобавитьПоле("F1", "S", 9, 0);
		Попытка
			ДБФ.СоздатьФайл(ИмяТаблицы, "");
		Исключение
// не удалось записать файл
			Возврат 0;
		КонецПопытки;	
		Если ДБФ.Открыта() = 0 Тогда
// не удалось открыть файл, при доступе 
// на четния к нему по каким то причинам		
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Выборка = хмлПарсер.selectNodes("//РезультатРегистрации/Документ");
  	
  	Для номУзла = 0 По Выборка.length - 1 Цикл
  		
  		хмлУзел = Выборка.item(номУзла);
	    
  		Результат = Число(хмлУзел.SelectSingleNode("Результат").text);
  		
  		Если Результат = 0 Тогда
	// отметить объект данных для снятия отметки регистрации
			ДБФ.Добавить();

			ДБФ.F1 = Прав("         " + глмМетаданные
				.Ид2СтрокаИБ(хмлУзел.SelectSingleNode("Ид").text), 9);

			ДБФ.Записать();
  		КонецЕсли;
	КонецЦикла;	
    
	// закончить запись файла подтвержденных на стороне базы
	// -приемника обработанных объектов 
	ДБФ.ЗакрытьФайл();
  	
	// переместить в конец очереди отправки документы, прошедшие 
	// на удаленном узле РИБ обработку (не обязательно успешно)  
	ПринятьИзменения(УзелРИБ, НомерПринятого, "     1", 0);
	
	Попытка
		ДБФ.ОткрытьФайл(ИмяТаблицы, "", 0);
	Исключение 
// не удалось получить доступ к файлу
		Сообщить("Не удалось файл: 1");
		Возврат 0;
	КонецПопытки;

	Если ДБФ.Открыта() = 0 Тогда
// не удалось открыть файл, при доступе 
// на запись к нему по каким то причинам
		Сообщить("Не удалось файл: 2");
		Возврат 0;
	КонецЕсли;

	ДБФ.ОчиститьФайл();
	ДБФ.Записать();
  	
  	Для номУзла = 0 По Выборка.length - 1 Цикл
  		
  		хмлУзел = Выборка.item(номУзла);
	    
  		Результат = Число(хмлУзел.SelectSingleNode("Результат").text);
  		
  		Если Результат = 1 Тогда
	// отметить объект данных для снятия отметки регистрации
			ДБФ.Добавить();

			ДБФ.F1 = Прав("         " + глмМетаданные
				.Ид2СтрокаИБ(хмлУзел.SelectSingleNode("Ид").text), 9);

			ДБФ.Записать();
  		КонецЕсли;
	КонецЦикла;	
    
	// закончить запись файла подтвержденных на стороне базы
	// -приемника обработанных объектов 
	ДБФ.ЗакрытьФайл();
  	
	// снять отметку регистрации с документов, обработанных успешно
	ПринятьИзменения(УзелРИБ, НомерПринятого);

	Возврат 1;
	
КонецФункции	
//*******************************************
Функция ВыполнитьВыгрузку(УзелРИБ, ИмяФайла)
	Перем хмлПарсер, хмлНаборСхем, хмлШаблон, НаборДанных;
	
	Если ЗафиксироватьИзменения(УзелРИБ, 
		мОбъемВыборки) = 0 Тогда
	// не удалось зафиксировать изменения
	ИначеЕсли НовыйФайлВыгрузки(хмлПарсер, хмлНаборСхем, 
	// выгрузка, преимущественно, в бухгалтерию
		"http://my.org/torg", УзелРИБ) = 0 Тогда
	// не удалось создать файл выгрузки данных 
	// (не подключена компонента msxml)
	ИначеЕсли ПрочитатьШаблонПреобразования(хмлШаблон, 
		УзелРИБ) = 0 Тогда
	// в настройке схемы обмена
	// отсутствует секция описания 
	// шаблона преобразования данных
	ИначеЕсли НаборДанныхГруппыОбъектов(УзелРИБ, 
		НаборДанных) = 0 Тогда 
	// не удалось получить/обработать набор 
	// данных для выгрузки
	Иначе
	// выгрузка/преобразование массива данных
		глмХМЛ.СериализоватьЗначение(НаборДанных, хмлПарсер, 
			хмлПарсер.documentElement, хмлНаборСхем, хмлШаблон, 1);
	
	// сохранение файла обмена			
		глмХМЛ.ВывестиДокументВФайл(РазвернутьОбъекты(хмлПарсер, 
			хмлНаборСхем, УзелРИБ), ИмяФайла);
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции	
//*******************************************
Функция ВыполнитьОбмен(Код)
	
	УзелРИБ = СоздатьОбъект("Справочник.УзлыРИБ");
	
	Если УзелРИБ.НайтиПоКоду(Код, 0) = 0 Тогда
	// неверная настройка фонового задания
		Возврат 0;
	КонецЕсли;	

	Рез = 1;
    
	КаталогОбмена = СокрЛП(УзелРИБ.КаталогОбмена);
	
	ФайлВыгрузки = КаталогОбмена + ?(Прав(КаталогОбмена, 
		1) = "\", "001-", "\001-") + СокрЛП(УзелРИБ.Код) + ".xml";
		
	Если ФС.СуществуетФайл(ФайлВыгрузки) = 1 Тогда
	// файл не обработан на стороне узла-приемника 
	// - нет необходимости готовить новый

	Иначе
	// выгрузка не производилась или была обработана
	
		ФайлЗагрузки = КаталогОбмена + ?(Прав(КаталогОбмена, 
			1) = "\", "", "\") + СокрЛП(УзелРИБ.Код) + "-001.xml";
			
		Если ФС.СуществуетФайл(ФайлЗагрузки) = 1 Тогда

			Рез = ВыполнитьЗагрузку(УзелРИБ, ФайлЗагрузки);
		КонецЕсли;	
	
		Если Рез = 1 Тогда
			
		    Рез = ВыполнитьВыгрузку(УзелРИБ, ФайлВыгрузки);
			
			Если Рез = 1 Тогда
	// отсутствие файла выгрузки на стороне 
	// удаленного узла - сигнал к старту обмена			
				ФС.УдалитьФайл(ФайлЗагрузки);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции
//*******************************************
мОбъемВыборки = 300;

стрШаблРазвОбъектовВФайлеВыгрузки = "<?xml version=""1.0"" encoding=""WINDOWS-1251""?>
									|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
									|	<xsl:output encoding=""WINDOWS-1251"" indent=""yes"" method=""xml""/>
									|	<xsl:template match=""/"">
									|		<ROOT>
									|			<xsl:apply-templates/>
									|		</ROOT>
									|	</xsl:template>
									|	<xsl:template match=""*[name()!='ROOT']"">
									|		<xsl:copy-of select="".""/>
									|	</xsl:template>
									|</xsl:stylesheet>
									|";
