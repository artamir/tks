Перем КодыОшибок, мОсновнойПроизводитель, 
	мПропПустыеСерии, мПропНесинхрКлиентов, мИспСерииПоУмолч;
//*******************************************
Функция Тест()
	
	Возврат """глмСерииНоменклатуры"" - подключен";
	
КонецФункции	

//*******************************************
Функция ОсновнойДокументПоРеализации(ОсновнойДокумент)
	
	СтрокаИБ = глмМетаданные.Ид2СтрокаИБ(глмМетаданные
		.Ссылка2Ид(ОсновнойДокумент));
	
	ТекстЗапроса = 	
	"SELECT 
	|	iddoc AS [Документ $Документ.Рейс]
	|FROM 
	|	$ДокументСтроки.Рейс
	|WHERE 
	|	$ДокументСтроки.Рейс.Заявка = '" + СтрокаИБ + "'
	|";
    
	РодительскиеДокументы = глмOLEDBQuery
		.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);
	
	Если РодительскиеДокументы.КоличествоСтрок() > 0 Тогда
	    
		ОсновнойДокумент = РодительскиеДокументы
			.ПолучитьЗначение(1, 1);
		
	КонецЕсли;
	
	Возврат ОсновнойДокумент;
	
КонецФункции

//*******************************************
Функция ПеремещениеПоРейсу(ОсновнойДокумент)
	
	ДокПерем = ПолучитьПустоеЗначение("Документ.Перемещение");

	СтрокаИБ = глмМетаданные.Ид2СтрокаИБ(глмМетаданные
		.Ссылка2Ид(ОсновнойДокумент));

	ТекстЗапроса = 	
	"SELECT 
	|	iddoc AS [Документ $Документ.Перемещение]
	|FROM 
	|	$Документ.Перемещение
	|WHERE 
	|	$Документ.Перемещение.Рейс = '" + СтрокаИБ + "'
	|";
    
	ДочерниеДокументы = глмOLEDBQuery
		.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);
	
	Если ДочерниеДокументы.КоличествоСтрок() > 0 Тогда
	    
		ДокПерем = ДочерниеДокументы.ПолучитьЗначение(1, 1);
		
	КонецЕсли;
	
	Возврат ДокПерем;
	
КонецФункции

//*******************************************
Функция СформироватьДвиженияПоСертификатам(		// формирование движений по сертификатам и статусам 
												// сертификатов; движения создаются только здесь и могут
												// быть изменены, разве что, только при обмене с основным
												// производителем
												// параметры:
	ТекДок, 									//	расходная накладная - регистратор движений
	ОсновнойДокумент, 							//	рейс, расходная накладаная - документ рейса
	Конт, 										//	контекст обработки (модуль обработки, модуль документа 
												//	расходной накладаной)
	тзИсточникСерий = "")                       //	табличная часть перемещения, для подбора серий 
												//	номенклатуры в расходных накладных рейса
	
	// результат формирования сертификатов документа
	Рез = "";
    
	глмКорректировкаЗаписейРегистров.ОтклДвижения = 0;
	глмКорректировкаЗаписейРегистров.ДатаДок = ТекДок.ДатаДок;
	глмКорректировкаЗаписейРегистров.КорректировкаЗаписейРегистров = ТекДок;
	глмКорректировкаЗаписейРегистров.ЗагрузитьНаборДвижений(ТекДок);
	
	НаборДвижений = глмКорректировкаЗаписейРегистров.НаборДвижений;
    
	тзПродажи = НаборДвижений.Получить("Продажи");

	тзСертификаты = НаборДвижений.Получить("Сертификаты");
    тзСертификаты.УдалитьСтроки();
	
	тзОшибкиСертификатов = НаборДвижений.Получить("ОшибкиСертификатов");
	// Французов: перед удалением информации 
	// об шибках, попробуем узнать, успешна ли
	// была идентификация клиента в прошлый раз
	УспехИдентКл = 0;
	Если тзОшибкиСертификатов.КоличествоСтрок() <> 0 Тогда
	// по документу уже проводилась проверка 
	// правильности заполнения информации ...
		КодОшибки = Лев("4.3:" + глмСерииНоменклатуры
			.КодыОшибок.Получить("10021"), 38);
				
		Если тзОшибкиСертификатов
			.НайтиЗначение(КодОшибки, 
				"", "КодОшибки") = 0 Тогда
	// ... и не было проблем с идентификацией 
	// клиента в этот раз
			УспехИдентКл = 1;
		КонецЕсли;	
	КонецЕсли;	
    //\\
	тзОшибкиСертификатов.УдалитьСтроки();
    
	// такие ситуации лучше отражать в ошибках 
	// (для внедрения на сторонних активах):
	//// фабрика
	//Если (СокрЛП(ТекДок.Фирма1.ИНН) = "2466068008")
	//// отсев второй части (не указан подотчетный объект)
	//	ИЛИ (ПустоеЗначение(ТекДок.ПодотчОбъект) = 0) Тогда   
	Если ТекДок.Фирма1.схФормВСД = 1 Тогда
	//\\
		тзПродажи.ВыбратьСтроки();
		Пока тзПродажи.ПолучитьСтроку() = 1 Цикл
			
			Если тзПродажи.Товар.схТип = 0 Тогда
	// товар не подлежит сертификации (не указаны
	// параметры товара в ИС Меркурий) и не может
	// присутствовать в движении по сертификатам
				Продолжить;
			КонецЕсли;
	
	// подбор серий:
			Если тзИсточникСерий = "" Тогда
	// 		серии товаров уже установлены в движениях 
	// 		по продажам при проведении документа
			Иначе
	// 		подбор (проверка) серий по перемещению
				НомСтр = 0;
				Если тзИсточникСерий.НайтиЗначение(тзПродажи.Товар, 
					НомСтр, "Товар") = 1 Тогда
	                        
					тзПродажи.Серия = тзИсточникСерий
						.ПолучитьЗначение(НомСтр, "Серия");	
				КонецЕсли;	
			КонецЕсли;
	        
			Если ПустоеЗначение(тзПродажи.Серия) = 1 Тогда
				
				Сообщить("Номенклатура: ""(" 
					+ тзПродажи.Товар.Код + ")" 
					+ глмОбщиеФункции.ПолнНаименованиеТовара(тзПродажи.Товар) 
						+ """:");	

				Если мИспСерииПоУмолч = 1 Тогда
					тзПродажи.Серия = тзПродажи
						.Товар.схСерияПоУмолчанию;
					
					глмОбщиеФункции.ОбработатьОшибку("10005", 
						"глмСерииНоменклатуры", Контекст);
				Иначе

					глмОбщиеФункции.ОбработатьОшибку("10003", 
						"глмСерииНоменклатуры", Контекст);
				КонецЕсли;
			КонецЕсли;
			
	// ввод данных по сертификатам
			тзСертификаты.НоваяСтрока();
			тзСертификаты.ОсновнойДокумент = ОсновнойДокумент;
			тзСертификаты.ПодотчОбъект = ТекДок.ПодотчОбъект;
			тзСертификаты.Товар = тзПродажи.Товар;
			тзСертификаты.Серия = тзПродажи.Серия;
			тзСертификаты.Вес = тзПродажи.Вес;
			тзСертификаты.Количество = тзПродажи.Количество;
			тзСертификаты.Клиент = тзПродажи.Клиент;
			тзСертификаты.Операция = Перечисление
				.ВидыОпераций.РеализацияТовара;
			тзСертификаты.Продукт = тзПродажи.Товар.схПродукт;
			тзСертификаты.Производитель = тзПродажи.Производитель;
			тзСертификаты.Страна = тзПродажи.Производитель.Страна;
			тзСертификаты.СубПродукт = тзПродажи.Товар.схСубПродукт;
			тзСертификаты.Тип = тзПродажи.Товар.схТип;
	        
	// ошибки, блокирующие серию товара
			тзОшибкиСертификатов.НоваяСтрока();
			тзОшибкиСертификатов.ОсновнойДокумент = ОсновнойДокумент; 
			тзОшибкиСертификатов.Товар = тзПродажи.Товар;
			тзОшибкиСертификатов.Серия = тзПродажи.Серия;
		
			Если тзСертификаты.Производитель = мОсновнойПроизводитель Тогда
				тзОшибкиСертификатов.КодОшибки = "3.1:" 
					+ КодыОшибок.Получить("00008"); 
			Иначе
				Если тзСертификаты.Производитель.схФормВСД = 0 Тогда
					тзОшибкиСертификатов.КодОшибки = "0.2:"
						+ КодыОшибок.Получить("00009");
				
				//ИначеЕсли (тзСертификаты.Производитель
				//	.схСверткаПоВидуПрод = 0) И (тзСертификаты.Клиент
				//		.схСверткаПоВидуПрод = 0) 
				//			И (ПустоеЗначение(тзСертификаты
				//				.Товар.схГУИД) = 1) Тогда		
				//					
				//	тзОшибкиСертификатов.КодОшибки = "4.1:"
				//		+ КодыОшибок.Получить("10010");
						
				ИначеЕсли ПустоеЗначение(тзПродажи.Серия) = 1 Тогда	
					тзОшибкиСертификатов.КодОшибки = "4.2:"
						+ КодыОшибок.Получить("10011");
				Иначе
					тзОшибкиСертификатов.КодОшибки = "2.1:"
						+ КодыОшибок.Получить("00012");
				КонецЕсли;		
			КонецЕсли;
		КонецЦикла;
		
		Если УспехИдентКл = 0 Тогда
			Если тзСертификаты.КоличествоСтрок() = 0 Тогда
	// нет необходимости проводить идентификацию 
	// клиентов по документам без сертификатов			
				УспехИдентКл = 1;
			КонецЕсли;	
		КонецЕсли;
		
	// ошибки, блокирующие документ
		Если ПустоеЗначение(ТекДок.ПодотчОбъект) = 1 Тогда
			тзОшибкиСертификатов.НоваяСтрока();
			тзОшибкиСертификатов.ОсновнойДокумент = ОсновнойДокумент; 
			тзОшибкиСертификатов.КодОшибки = "4.4:" 
				+ КодыОшибок.Получить("10006"); 
		
		ИначеЕсли ПустоеЗначение(ОсновнойДокумент.Автомобиль) = 1 Тогда
			тзОшибкиСертификатов.НоваяСтрока();
			тзОшибкиСертификатов.ОсновнойДокумент = ОсновнойДокумент; 
			тзОшибкиСертификатов.КодОшибки = "4.5:" 
				+ КодыОшибок.Получить("10019");
				
		ИначеЕсли УспехИдентКл = 0 Тогда
			КодОш = глмМеркурий.ПроверкаИдентификацииКлиента(ТекДок
				.ПодотчОбъект, ТекДок.Клиент);
	
			Если глмОбщиеФункции.ОбработатьОшибку(КодОш, 
				"глмСерииНоменклатуры", Контекст) = 1 Тогда
					
					тзОшибкиСертификатов.НоваяСтрока();
					тзОшибкиСертификатов.ОсновнойДокумент = ОсновнойДокумент; 
					тзОшибкиСертификатов.КодОшибки = 
						?(мПропНесинхрКлиентов = 0, "4.3:", "0.3:") 
							+ КодыОшибок.Получить(КодОш); 
							
					тзОшибкиСертификатов.ДопИнфо = 
						"(" + ТекДок.Клиент.НомерТТ + ") """ 
							+ ТекДок.Клиент.Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	//\\

	НаборДвижений.Установить("ОшибкиСертификатов", тзОшибкиСертификатов);
	НаборДвижений.Установить("Сертификаты", тзСертификаты);
	НаборДвижений.Установить("Продажи", тзПродажи);
    
	Если Рез = "" Тогда
		Если глмКорректировкаЗаписейРегистров
	// необходимо динамически задавать значение 
	// передаваемого параметра: "" - для рейса
	// и "Конт" - для расходной накладной;
	// понять, также, что в результате получилось
	// с проведением в контексте формы документа
			.ЗаписатьНаборДвижений(?(Конт.Вид()="Рейс",
				"", Конт)) = 0 Тогда
	//\\			
					Рез = "10004";

		Иначе
			Состояние("Записаны движения документа: """
				+ ТекДок + """");	

		КонецЕсли;
	Иначе
		Возврат Рез;
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции	

//*******************************************
Функция ЗаписатьДвиженияПоСертификатам(ДанныеОперации, Конт)
	Перем тзИсточникСерий;
    
	ОсновнойДокумент = ДанныеОперации.Получить("ОсновнойДокумент");
	
	ПодчиненныеДокументы = ДанныеОперации
		.Получить("ПодчиненныеДокументы");
	
	Если ТипЗначения(ПодчиненныеДокументы) <> 100 Тогда
		
		Возврат СформироватьДвиженияПоСертификатам(ОсновнойДокумент, 
			ОсновнойДокумент, Конт, "");
	
	Иначе
		
		Перемещение = ПеремещениеПоРейсу(ОсновнойДокумент);
		Перемещение.ВыгрузитьТабличнуюЧасть(тзИсточникСерий);	
	    
		ПодчиненныеДокументы.ВыбратьСтроки();
		Пока ПодчиненныеДокументы.ПолучитьСтроку() = 1 Цикл
			
			Рез = СформироватьДвиженияПоСертификатам(ПодчиненныеДокументы
				.Документ, ОсновнойДокумент, Конт, тзИсточникСерий);
				
			Если Рез <> "" Тогда
				Возврат Рез;
				
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

//*******************************************
Функция ВыбратьДвиженияПоСертификатам(	// выбирает движения документа по регистру 
	ОсновнойДокумент					// "Сертификаты": если ОсновнойДокумент - 
	)									// расходная накладная, тогда выбираются
										// движения по накладной, если рейс - все 
										// движения по этому измерению
    // набор атрибутов регистра
	Ид = глмМетаданные.Тип2Ид("Регистр.Сертификаты");
	РегСерт = СоздатьОбъект(глмМетаданные.Ид2Тип(Ид));
	мРеквизиты = глмМетаданные.ВыбратьРеквизиты(Ид, "", "", "");
    
	// таблица движений
	тзДвижения = СоздатьОбъект("ТаблицаЗначений");
	
	тзДвижения.НоваяКолонка("Регистратор"); 
	
	мРеквизиты.ВыбратьСтроки();
	Пока мРеквизиты.ПолучитьСтроку() = 1 Цикл
		тзДвижения.НоваяКолонка(мРеквизиты.Ид);
	КонецЦикла;	
    
	// фильтр регистра
	Если ОсновнойДокумент
		.ТекущийДокумент().Вид() = "Рейс" Тогда
			РегСерт.УстановитьФильтр(ОсновнойДокумент);
			РегСерт.ВыбратьДвижения(ОсновнойДокумент.ДатаДок);
	Иначе	
			РегСерт.ВыбратьДвиженияДокумента(ОсновнойДокумент);
	КонецЕсли;		
    
	НомСтр = 1;
	Пока РегСерт.ПолучитьДвижение() = 1 Цикл
		
		тзДвижения.НоваяСтрока();
        
		тзДвижения.Регистратор = РегСерт.ТекущийДокумент();
	
		мРеквизиты.ВыбратьСтроки();
		Пока мРеквизиты.ПолучитьСтроку() = 1 Цикл

			тзДвижения.УстановитьЗначение(НомСтр, мРеквизиты.Ид, 
				РегСерт.ПолучитьАтрибут(мРеквизиты.Ид));

		КонецЦикла;
			
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	Возврат тзДвижения;
	
КонецФункции

//*******************************************
Функция ПолучитьРезультатОбработкиОперации(Конт, КодОшибки = "")
	
    // набор атрибутов регистра
	Ид = глмМетаданные.Тип2Ид("Регистр.ОшибкиСертификатов");
	Рег = СоздатьОбъект(глмМетаданные.Ид2Тип(Ид));
	мРеквизиты = глмМетаданные.ВыбратьРеквизиты(Ид, "", "", "");
    
	// таблица движений
	тзДвижения = СоздатьОбъект("ТаблицаЗначений");
	
	тзДвижения.НоваяКолонка("Регистратор");
	
	мРеквизиты.ВыбратьСтроки();
	Пока мРеквизиты.ПолучитьСтроку() = 1 Цикл
		тзДвижения.НоваяКолонка(мРеквизиты.Ид);
	КонецЦикла;	
    
	// фильтр регистра
	Если Конт.ТекущийДокумент().Вид() = "Рейс" Тогда
		Рег.УстановитьФильтр(Конт
			.ТекущийДокумент());
		Рег.ВыбратьДвижения(Конт.ДатаДок);
	Иначе	
		Рег.ВыбратьДвиженияДокумента(Конт
			.ТекущийДокумент());
	КонецЕсли;		
    
	НомСтр = 1;
	Пока Рег.ПолучитьДвижение() = 1 Цикл
		
		Если (КодОшибки = "") 
		ИЛИ (Лев(Рег.КодОшибки, 1) = КодОшибки) Тогда
			тзДвижения.НоваяСтрока();
	        
			тзДвижения.Регистратор = Рег.ТекущийДокумент();
		
			мРеквизиты.ВыбратьСтроки();
			Пока мРеквизиты.ПолучитьСтроку() = 1 Цикл
	
				тзДвижения.УстановитьЗначение(НомСтр, мРеквизиты.Ид, 
					Рег.ПолучитьАтрибут(мРеквизиты.Ид));
	
			КонецЦикла;
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	Возврат тзДвижения;
	
КонецФункции

//*******************************************
Функция ЗаписатьРезультатОбработкиОперации(тзОшибкиСертификатов)
	Перем тзДокументы;
	
	Рез = "";
	тзОшибкиСертификатов.Выгрузить(тзДокументы, , , "Регистратор");
	
	тзДокументы.Свернуть("Регистратор", "");
	
	тзДокументы.ВыбратьСтроки();
	Пока тзДокументы.ПолучитьСтроку() = 1 Цикл

		глмКорректировкаЗаписейРегистров.ОтклДвижения = 0;
		глмКорректировкаЗаписейРегистров.ДатаДок = тзДокументы.Регистратор.ДатаДок;
		глмКорректировкаЗаписейРегистров.КорректировкаЗаписейРегистров = тзДокументы.Регистратор;
		глмКорректировкаЗаписейРегистров.ЗагрузитьНаборДвижений(тзДокументы.Регистратор);
		
		НаборДвижений = глмКорректировкаЗаписейРегистров.НаборДвижений;
		
		тзДвижения = глмТаблицыЗначений.ВыбратьПоЗначению(тзОшибкиСертификатов, 
			"Регистратор", тзДокументы.Регистратор);

		НаборДвижений.Установить("ОшибкиСертификатов", тзДвижения);
    
		Если Рез = "" Тогда
			Если глмКорректировкаЗаписейРегистров
				.ЗаписатьНаборДвижений("") = 0 Тогда
					Рез = "10004";
			Иначе
				Состояние("Записаны движения документа: """
					+ тзДокументы.Регистратор + """");	
			КонецЕсли;
		Иначе
			Возврат Рез;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецФункции

//*******************************************
Процедура ОтправитьНаПовторнуюСертификацию(Конт, КодОшибки = "")
	
	тзОшибкиСертификатов = ПолучитьРезультатОбработкиОперации(Конт, КодОшибки);
    
	тзОшибкиСертификатов.ВыбратьСтроки();
	Пока тзОшибкиСертификатов.ПолучитьСтроку() = 1 Цикл
		
		тКодОшибки = СтрЗаменить(тзОшибкиСертификатов
			.КодОшибки, ":", РазделительСтрок);
		
		КодОшибки = СтрПолучитьСтроку(тКодОшибки, 1);
		
		Если (КодОшибки = "5.1") или (КодОшибки = "5.3") Тогда
			
			тзОшибкиСертификатов.КодОшибки = "2.1:"
				+ КодыОшибок.Получить("00012");
        КонецЕсли;
		
	КонецЦикла;	
	
	ЗаписатьРезультатОбработкиОперации(тзОшибкиСертификатов);
				
КонецПроцедуры

//*******************************************
мОсновнойПроизводитель = Константа.ОсновнойПроизводитель;

мИспСерииПоУмолч = Константа.ИспСерииПоУмолч;

мПропПустыеСерии = Константа.ПропПустыеСерииПриФормСерт;
мПропНесинхрКлиентов = Константа.ПропНесинхрКлиентовПриФормСерт;

КодыОшибок = СоздатьОбъект("СписокЗначений");
КодыОшибок.ДобавитьЗначение("Серия товара не соответствует сертификату", "10001"); 
КодыОшибок.ДобавитьЗначение("Количество товара не соответствует сертификату", "10002");
КодыОшибок.ДобавитьЗначение("Товар отсутствует в перемещении", "10003"); 
КодыОшибок.ДобавитьЗначение("Не удалось записать движения по регистрам", "10004");
КодыОшибок.ДобавитьЗначение("Выбрана серия по умолчанию", "10005"); 
КодыОшибок.ДобавитьЗначение("Не задан подотчетный объект", "10006"); 
КодыОшибок.ДобавитьЗначение("Не задан идентификатор клиента", "10007");
КодыОшибок.ДобавитьЗначение("В ожидании подтверждения от производителя", "00008"); 
КодыОшибок.ДобавитьЗначение("Товар не сертифицируется", "00009");
КодыОшибок.ДобавитьЗначение("Не задан идентификатор товара", "10010"); 
КодыОшибок.ДобавитьЗначение("Не задана серия товара", "10011"); 
КодыОшибок.ДобавитьЗначение("Сведения готовы к передаче в вет. службу", "00012"); 
КодыОшибок.ДобавитьЗначение("Недостаточно товара", "10013");
КодыОшибок.ДобавитьЗначение("Механизм запросов в ВетИС отключен", "00014"); 
КодыОшибок.ДобавитьЗначение("Запрос в ВетИС сформирован, но ответ не получен", "10015"); 
КодыОшибок.ДобавитьЗначение("Выпущен сертификат партии товара", "00016");
КодыОшибок.ДобавитьЗначение("Запрос в ВетИС в процессе обработки", "00017"); 
КодыОшибок.ДобавитьЗначение("Результат запрос в ВетИС получен, но необработан", "10018");
КодыОшибок.ДобавитьЗначение("Не задан автотранспорт", "10019"); 
КодыОшибок.ДобавитьЗначение("Идентификатор клиента обновлен", "00020"); 
КодыОшибок.ДобавитьЗначение("Не удалось обновить идентификатор клиента", "10021");
