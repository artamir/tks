Перем ОбрабатыватьСобытия;

Перем КодыОшибок, тзЗаголовкиСобытий;

Перем КаталогСобытий, тзСтекСобытий;

//*******************************************
Функция ПроверитьНастройки()
	
	Возврат ?(глмСобытия.КаталогСобытий=КаталогИб(), 0, 1);
	
КонецФункции	

//*******************************************
Функция Тест() Экспорт
	
	ОбрабатыватьСобытия = ПроверитьНастройки();
	
	Возврат "Глобальный модуль ""События"" успешно подключен";
	
КонецФункции

//*******************************************
Функция ПараметрыСобытия(			// определение параметров события,
									// исходя из контекста вызова
									// параметры:
	Конт, 							//	контекст вызова
	Сост, 							//	состояние
	Х, 								//	координата позиционирования Х
	У, 								//	--//-- У
	Тип = "",                   	//	тип объекта события
	Вид = "", 						//	полный тип --//--
	Действие = "")					//	описание интерфейсного элемента

	Если ПустоеЗначение(Конт) = 0 Тогда

		ФормаРасш = СоздатьОбъект("РасширениеФормы");
		ФормаРасш.УстановитьФорму(Конт.Форма);

		Тип = ФормаРасш.ТипОбъекта();
		Вид = ?(Тип = "ВнешнийОтчет", "ВнешнийОтчет:" 
			+ Конт.РасположениеФайла(), ФормаРасш.ПолныйТипОбъекта()); 
		Действие = "";

		А = ФормаРасш.ПолучитьАтрибутПоКоординатам(Х, У);
		Если ТипЗначенияСтр(А) = "АтрибутФормы" Тогда
			Если А.Тип = 3 Тогда
				Действие = А.Заголовок + "@" + А.Формула;
	// событие состоит в нажатии кнопки
	// как наиболее частый способ вызова
	// обработки
				Возврат 1;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;

	// событие не идентифицировано, сюда
	// может попасть обработка, вызванная
	// нажатием сочетания клавиш
	Возврат 0;
	
КонецФункции

//*******************************************
Функция ФильтрНаПараметрыСобытия(	// функция фильтрации событий, чтобы 
									// отсечь несущественный "шум"
									// параметры:
	Тип = "",                   	//	тип объекта события
	Вид = "", 						//	полный тип --//--
	Действие = "")					//	описание интерфейсного элемента
	
	// действия пользователя в списке 
	// справочника и документов не несут 
	// существенную нагрузку в системе 
	// и не участвуют в обработке
	Если Тип = "Справочник" Тогда
	ИначеЕсли СокрЛП(Вид) = 
		"Обработка.Журналы.Форма" Тогда
	// ... также, работа в интерфейсных 
	// элементах		
	ИначеЕсли СокрЛП(Действие) = "" Тогда	
	ИначеЕсли СтрЧислоВхождений(Действие, 
		"МногострочнаяЧасть") > 0 Тогда
	ИначеЕсли СтрЧислоВхождений(Действие,		
		"ПриВыбореСтрокиДерева()") > 0 Тогда
    // ... прочие действия пользователя
	Иначе
		Возврат 0;
	КонецЕсли;	
	
	Возврат 1;
	
КонецФункции

//*******************************************
Функция Тип2ПрефИмениФайла(			// определяет префикс файла
									// БД XBase для более точного
									// определения нагрузки на систему
									// параметры:
	Тип = "")                   	//	тип объекта события
	
	Префикс = "e";
	
	Если Тип = "CON" Тогда
	// префикс консолидированного файла 
	// данных о событиях пользователей
		Префикс = Префикс + "C";
	
	Иначе	
	// пока, во всех случаях:	
		Префикс = Префикс + "R";
		
	КонецЕсли;
	
	Возврат Префикс;  
	
КонецФункции

//*******************************************
Функция ИмяФайла(					// определяет имя файла
									// БД XBase 
									// параметры:
	Т1,								//	таймер начала события
	Тип = "")                   	//	тип объекта события
	
	Возврат ?(Тип = "CON",
	// имя консолидированного файла 
	// данных о событиях пользователей
		КаталогИб() + "SYSLOG\eC" + СтрЗаменить(Формат(Т1, 
			"ДДДММГГ"), ".", ""),
	// имя иднивидуального файла данных
	// о событиях текущего пользователя
			КаталогСобытий + Тип2ПрефИмениФайла(Тип) 
				+ Прав(Т1, 6) + ".dbf");
	
КонецФункции

//*******************************************
Функция СоздатьФайлСобытий(ДБФ, ИмяФайла)

	тзЗаголовкиСобытий.ВыбратьСтроки();
	Пока тзЗаголовкиСобытий.ПолучитьСтроку() = 1 Цикл
		
		ДБФ.ДобавитьПоле(тзЗаголовкиСобытий.Имя,
			тзЗаголовкиСобытий.Тип, тзЗаголовкиСобытий.Длина,
				тзЗаголовкиСобытий.Точность);
	КонецЦикла;	
	
	Попытка

		ДБФ.СоздатьФайл(ИмяФайла, "");

	Исключение

		ЗаписьЖурналаРегистрации(КодыОшибок
			.Получить("00001"),"","","", 5);	

	КонецПопытки;	
    
	Возврат ДБФ.Открыта();
	
КонецФункции

//*******************************************
Функция ОткрытьФайлСобытий(ДБФ, ИмяФайла, Чтение=1)
	
	Попытка

		ДБФ.ОткрытьФайл(ИмяФайла, "", Чтение);

	Исключение

		ЗаписьЖурналаРегистрации(КодыОшибок
			.Получить("00002"),"","","", 5);	

	КонецПопытки;	
    
	Возврат ДБФ.Открыта();
	
КонецФункции

//*******************************************
Функция ПроверитьСигнальныйФайл(Знач Каталог)

	Если Прав(Каталог, 1) <> "\" Тогда 
		Каталог = Каталог + "\"; 
	КонецЕсли;
	
	ИмяФайла = Каталог + "eC.sig";
	
	Возврат ФС.СуществуетФайл(ИмяФайла);
	
КонецФункции

//*******************************************
Процедура СоздатьСигнальныйФайл(Знач Каталог)
	
	Если Прав(Каталог, 1) <> "\" Тогда 
		Каталог = Каталог + "\"; 
	КонецЕсли;

	ИмяФайла = Каталог + "eC.sig";
	
	Если ПроверитьСигнальныйФайл(Каталог) = 0 Тогда
		
		Текст = СоздатьОбъект("Текст");
		
		Текст.Записать(ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

//*******************************************
Процедура УдалитьСигнальныйФайл(Знач Каталог)
	
	Если Прав(Каталог, 1) <> "\" Тогда 
		Каталог = Каталог + "\"; 
	КонецЕсли;
	
	ИмяФайла = Каталог + "eC.sig";
	
	ФС.УдалитьФайл(ИмяФайла);
	
КонецПроцедуры

//*******************************************
Процедура ОткрытьЗаписьСобытия(		// принимает данные события, помещает 
									// в стек событий
									// параметры:
	Тип = "",                   	//	тип объекта события
	Вид = "", 						//	полный тип --//--
	Действие = "")					//	описание интерфейсного элемента
	
	тзСтекСобытий.НоваяСтрока();
	тзСтекСобытий.START = _getPerformanceCounter();
	тзСтекСобытий.TYPE 	= Тип;
	тзСтекСобытий.KIND 	= Вид;
	тзСтекСобытий.ACT 	= Действие;
	тзСтекСобытий.USER 	= ИмяПользователя();
	
	Если тзСтекСобытий.КоличествоСтрок() = 1 Тогда
		СоздатьСигнальныйФайл(КаталогСобытий);
	КонецЕсли;
	
КонецПроцедуры

//*******************************************
Процедура ЗакрытьЗаписьСобытия()	// выгружает данные одной
									// записи стека событий в
									// файл на диске
	НС = тзСтекСобытий.КоличествоСтрок();								

	Если НС > 0 Тогда
	
		тзСтекСобытий.УстановитьЗначение(НС, "FIN", 
			_getPerformanceCounter()); 
		
		бдСобытия = СоздатьОбъект("XBASE");
		ИмяФайла = ИмяФайла(тзСтекСобытий
			.ПолучитьЗначение(НС, "START"), тзСтекСобытий
				.ПолучитьЗначение(НС, "TYPE"));
	
		Если СоздатьФайлСобытий(бдСобытия, 
			ИмяФайла) = 1 Тогда
	    
			бдСобытия.Добавить();
			
			тзЗаголовкиСобытий.ВыбратьСтроки();
			Пока тзЗаголовкиСобытий.ПолучитьСтроку() = 1 Цикл
				ИмяРек = тзЗаголовкиСобытий.Имя;
				Попытка
			// перенос данных стека событий
			// в запись таблицы данных событий
					бдСобытия.УстановитьЗначениеПоля(ИмяРек, 
						тзСтекСобытий.ПолучитьЗначение(НС, ИмяРек));
				Исключение
					ЗаписьЖурналаРегистрации(КодыОшибок
						.Получить("00003") + ": '" + ИмяРек 
							+ "'","","","", 5);	
				КонецПопытки;
			КонецЦикла;	
			// при выгрузке последней записи стека,
			// сигнальный файл освобождается для
			// обработки фоновым заданием
			бдСобытия.Записать();
			бдСобытия.ЗакрытьФайл();
		КонецЕсли;
	
		тзСтекСобытий.УдалитьСтроку(НС);
	КонецЕсли;

	Если тзСтекСобытий.КоличествоСтрок() = 0 Тогда
		УдалитьСигнальныйФайл(КаталогСобытий);
	КонецЕсли;

КонецПроцедуры

//*******************************************
Процедура ЗакрытьЗаписьВсехСобытий()// выгружает данные всего
									// стека событий на диск
	Пока тзСтекСобытий.КоличествоСтрок() > 0 Цикл

		ЗакрытьЗаписьСобытия();
		
	КонецЦикла;	
	
КонецПроцедуры

//*******************************************
Функция ПеренестиЗаписьСобытия(ИмяФайла)
	
	дбИсх = СоздатьОбъект("XBASE");
	
	Если ОткрытьФайлСобытий(дбИсх, 
		ИмяФайла) = 0 Тогда
	// файл находится в режиме записи события, 
	// сигнальный файл установлен уже после 
	// добавления каталога в обработку
			Возврат 1;
	КонецЕсли;

	дбРез = СоздатьОбъект("XBASE");
    
	ИмяФайлаРез = ИмяФайла(ТекущаяДата(), "CON");
	
	Если ОткрытьФайлСобытий(дбРез, 
		ИмяФайлаРез, 0) = 0 Тогда
			Если СоздатьФайлСобытий(дбРез, 
				ИмяФайлаРез) = 0 Тогда
	// это уже критическая ошибка, но "спамить"
	// журнал событий, с учетом высокой 
	// интенсивности запуска обработки, не стоит
					Возврат -1;
			КонецЕсли;
	КонецЕсли;	
	
	дбИсх.Первая();
	дбРез.Добавить();
    
	тзЗаголовкиСобытий.ВыбратьСтроки();
	Пока тзЗаголовкиСобытий.ПолучитьСтроку() = 1 Цикл
		ИмяРек = тзЗаголовкиСобытий.Имя;
		Попытка
			дбРез.УстановитьЗначениеПоля(ИмяРек,
				дбИсх.ПолучитьЗначениеПоля(ИмяРек));
		Исключение
	// не удалось перенести значение поля 
	// записи данных события			
			ЗаписьЖурналаРегистрации(КодыОшибок
				.Получить("00003") + ": '" + ИмяРек 
					+ "'","","","", 5);	
		КонецПопытки;	
	КонецЦикла;
	
	дбРез.Записать();
	дбРез.ЗакрытьФайл();
 	
	// исходный файл с данными события 
	// убирается из каталога пользователя
	дбИсх.ЗакрытьФайл();
	ФС.УдалитьФайл(ИмяФайла);
	
КонецФункции	

//*******************************************
Функция ОбработатьЗаписиСобытий(Каталог)
	Перем Атр;
	
	Если Прав(Каталог, 1) <> "\" Тогда 
		Каталог = Каталог + "\"; 
	КонецЕсли;
	
	Нагрузка = 0;
	// просмотр текущего каталога, 
	// сбор списка подкаталогов
	ФС.УстТекКаталог(Каталог);
    
	спКаталогов = СоздатьОбъект("СписокЗначений");
    
	ИмяФайла = ФС.НайтиПервыйФайл("*.*");    
    Пока ПустоеЗначение(ИмяФайла) = 0 Цикл

		ФС.АтрибутыФайла(ИмяФайла, , Атр);
		ПолнИмяФайла = Каталог + ИмяФайла;

		Если Лев(ИмяФайла,1) = "." Тогда 
	// пустое имя файла	
		ИначеЕсли Сред(Атр, 4, 1) = "1" Тогда
	// каталоги		
			Если (ИмяФайла = "ExtForms") ИЛИ (ИмяФайла = "SYSLOG")
				ИЛИ (ИмяФайла = "1SYSLOG") ИЛИ (ИмяФайла = "MobiS") Тогда
	// фильтр системных каталогов			
			ИначеЕсли ПроверитьСигнальныйФайл(ПолнИмяФайла) = 1 Тогда
	// каталог под "нагрузкой"		
				Нагрузка = Нагрузка + 1;
			Иначе
	// вероятно, пользовательский каталог			
       			спКаталогов.ДобавитьЗначение(ПолнИмяФайла);
	   		КонецЕсли;
		ИначеЕсли Каталог = КаталогИб() Тогда
	// фильтр корневого каталога
		Иначе
			Если (Лев(ИмяФайла, 2) = "eR") 
				И (Прав(ИмяФайла, 3) = "DBF") Тогда
	// файл данных события пользователя				
        		Нагрузка = Нагрузка + 
					ПеренестиЗаписьСобытия(ПолнИмяФайла);
			КонецЕсли;
		КонецЕсли;
		ИмяФайла = ФС.НайтиСледующийФайл(); 
    КонецЦикла;
    
	// обработка собранного на этапе 
	// "просмотра" списка подкаталогов
	Для х = 1 по спКаталогов.РазмерСписка() Цикл
	// рекурсия
		Рез = ОбработатьЗаписиСобытий(спКаталогов
			.ПолучитьЗначение(х));
			
		Если Рез = -1 Тогда
	// проверка возможности записи данных
	// события в общий файл
			Возврат Рез;
		КонецЕсли;
	// инкремент нагрузки пользователей на
	// информационную систему	
		Нагрузка = Нагрузка + Рез;
	КонецЦикла;

	Возврат Нагрузка;
	
КонецФункции

//*******************************************
Функция ЗаписатьИндикаторНагрузки(Значение)
	
	ИмяФайла = КаталогИб() + "WORKLOAD.DBF";
	
	ДБФ = СоздатьОбъект("XBASE");	
	
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда
		Попытка
			ДБФ.ОткрытьФайл(ИмяФайла, "", 0);
		Исключение 
// не удалось получить доступ к файлу
			Возврат 0;
		КонецПопытки;
		Если ДБФ.Открыта() = 0 Тогда
// не удалось открыть файл, при доступе 
// на запись к нему по каким то причинам		
			Возврат 0;
		КонецЕсли;
		Если ДБФ.Первая() = 0 Тогда
// таблица не содержит записей - общая 
// ошибка системы определения индикаторов 
// нагрузки	
			Возврат 0;
		КонецЕсли;
	Иначе
		ДБФ.ДобавитьПоле("STAT", "N", 3, 0);
		Попытка
			ДБФ.СоздатьФайл(ИмяФайла, "");
		Исключение
// не удалось записать файл
			Возврат 0;
		КонецПопытки;	
		Если ДБФ.Открыта() = 0 Тогда
// не удалось открыть файл, при доступе 
// на четния к нему по каким то причинам		
			Возврат 0;
		КонецЕсли;
		ДБФ.Добавить();
	КонецЕсли;
	
	ДБФ.STAT = Значение;
	ДБФ.Записать();
	ДБФ.ЗакрытьФайл();
// успешное завершение процедуры
	Возврат 1;	
	
КонецФункции	

//*******************************************
Функция ПрочитатьИндикаторНагрузки(Значение)
	
	ИмяФайла = КаталогИб() + "WORKLOAD.DBF";
	
	Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
// статистика еще не была записана
		Возврат 0;
	Иначе
// попытка открытия файла в режиме чтения		
		ДБФ = СоздатьОбъект("XBASE");	
		Попытка
			ДБФ.ОткрытьФайл(ИмяФайла, "", 0);
		Исключение 
// не удалось получить доступ к файлу
			Возврат 0;
		КонецПопытки;
		Если ДБФ.Открыта() = 0 Тогда
// не удалось открыть файл, при доступе 
// на четния к нему по каким то причинам		
			Возврат 0;
		КонецЕсли;
		Если ДБФ.Первая() = 0 Тогда
// таблица не содержит записей - общая 
// ошибка системы определения индикаторов 
// нагрузки	
			Возврат 0;
		КонецЕсли;
		Значение = ДБФ.STAT;
    КонецЕсли;
// успешное завершение процедуры
	Возврат 1;
	
КонецФункции	

//*******************************************
Функция ФоновоеЗаданиеОбработкиЗаписиСобытий(Каталог)

// выполнение процедуры сжатия событий 
// и записть индикатора нагрузки системы	
	Возврат ЗаписатьИндикаторНагрузки(ОбработатьЗаписиСобытий(Каталог));
	
КонецФункции	

//*******************************************
КаталогСобытий = КаталогПользователя();

бдПервичногоСобытия = СоздатьОбъект("XBASE");

тзЗаголовкиСобытий = СоздатьОбъект("ТаблицаЗначений");

тзЗаголовкиСобытий.НоваяКолонка("Имя");
тзЗаголовкиСобытий.НоваяКолонка("Тип");
тзЗаголовкиСобытий.НоваяКолонка("Длина");
тзЗаголовкиСобытий.НоваяКолонка("Точность");

тзЗаголовкиСобытий.НоваяСтрока();
тзЗаголовкиСобытий.Имя = "START";
тзЗаголовкиСобытий.Тип = "N";
тзЗаголовкиСобытий.Длина = 12;
тзЗаголовкиСобытий.Точность = 0;

тзЗаголовкиСобытий.НоваяСтрока();
тзЗаголовкиСобытий.Имя = "FIN";
тзЗаголовкиСобытий.Тип = "N";
тзЗаголовкиСобытий.Длина = 12;
тзЗаголовкиСобытий.Точность = 0;

тзЗаголовкиСобытий.НоваяСтрока();
тзЗаголовкиСобытий.Имя = "TYPE";
тзЗаголовкиСобытий.Тип = "S";
тзЗаголовкиСобытий.Длина = 50;
тзЗаголовкиСобытий.Точность = 0;

тзЗаголовкиСобытий.НоваяСтрока();
тзЗаголовкиСобытий.Имя = "KIND";
тзЗаголовкиСобытий.Тип = "S";
тзЗаголовкиСобытий.Длина = 100;
тзЗаголовкиСобытий.Точность = 0;

тзЗаголовкиСобытий.НоваяСтрока();
тзЗаголовкиСобытий.Имя = "ACT";
тзЗаголовкиСобытий.Тип = "S";
тзЗаголовкиСобытий.Длина = 30;
тзЗаголовкиСобытий.Точность = 0;

тзЗаголовкиСобытий.НоваяСтрока();
тзЗаголовкиСобытий.Имя = "USER";
тзЗаголовкиСобытий.Тип = "S";
тзЗаголовкиСобытий.Длина = 50;
тзЗаголовкиСобытий.Точность = 0;

тзСтекСобытий = СоздатьОбъект("ТаблицаЗначений");

тзЗаголовкиСобытий.ВыбратьСтроки();
Пока тзЗаголовкиСобытий.ПолучитьСтроку() = 1 Цикл
	тзСтекСобытий.НоваяКолонка(тзЗаголовкиСобытий.Имя);
КонецЦикла;

КодыОшибок = СоздатьОбъект("СписокЗначений");
КодыОшибок.ДобавитьЗначение("Не удалось создать файл для записи события", "00001");
КодыОшибок.ДобавитьЗначение("Не удалось открыть файл для чтения события", "00002");
КодыОшибок.ДобавитьЗначение("Не удалось установить значение поля записи события", "00003");
