Перем КодыОшибок, мДатаНачалаРаботыСВСД,
	мОбъемОперации;
//*******************************************
Функция Тест() Экспорт

	Возврат "Глобальный модуль ""Статусы ВСД"" успешно подключен";

КонецФункции

//*******************************************
Функция ОО(КодОшибки, Конт="")
	
	Возврат глмОбщиеФункции.ОбработатьОшибку(КодОшибки, 
		"глмСтатусыВСД", Конт);
	
КонецФункции

//*******************************************
Функция ВыбратьДанныеОперации(Конт)
	Перем ДанныеОперации;
	
	стрМетода = "ВыбратьДанныеОперации(глмОбщиеФункции.ВыбПарам)"; 

	Если ТипЗначенияСтр(Конт) = "ГрупповойКонтекст" Тогда

		ДанныеОперации = глмОбщиеФункции
			.ВычВырВКонтОткрФормы(Конт, стрМетода, 
				Конт.ТекущийДокумент());

	Иначе

		ДанныеОперации = глмОбщиеФункции
			.ВычВырВКонтФормы(Конт, стрМетода, 
				Конт.ТекущийДокумент());

	КонецЕсли;

	Если ПустоеЗначение(ДанныеОперации) = 1 Тогда		

		ДанныеОперации = СоздатьОбъект("СписокЗначений");
		ДанныеОперации.ДобавитьЗначение(Конт.ТекущийДокумент(), 
			"ОсновнойДокумент");

	КонецЕсли;

	Возврат ДанныеОперации;
	
КонецФункции	

//*******************************************
Функция ПоставитьСтатусОперации(ДанныеОперации, Статус, Режим = 0)
	
	Документы = СоздатьОбъект("Документ");
	
	Основной = ДанныеОперации.Получить("ОсновнойДокумент");
	
	тзПодчиненные = ДанныеОперации.Получить("ПодчиненныеДокументы");
	
	Если ПустоеЗначение(тзПодчиненные) = 0 Тогда

		Если (Статус = Перечисление.СтатусыВСД.Оформлен)
			или (Статус = Перечисление.СтатусыВСД.Подписан) Тогда
	// таблица расходных накладных рейса, 
	// имеющих движения по сертификатам	
			СтрокаИБ = глмМетаданные.Ид2СтрокаИБ(глмМетаданные
				.Ссылка2Ид(Основной));
			
			ТекстЗапроса =
				"SELECT
				|    sp6313 AS [док $Документ.РасходнаяНакладная]
				|FROM
				|    dt6315 as dt
				|    INNER JOIN ra7114 AS ra
				|        ON ra.iddoc = dt.sp6313 AND dt.iddoc = '" 
				+ СтрокаИБ + "'
				|";		
			
			Таблица = глмOLEDBQuery
				.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);
		КонецЕсли;	
			
		тзПодчиненные.ВыбратьСтроки();
		Пока тзПодчиненные.ПолучитьСтроку() = 1 Цикл
			
			Если (Статус = Перечисление.СтатусыВСД.Оформлен)
				или (Статус = Перечисление.СтатусыВСД.Подписан) Тогда
	// проверка - исключение расходных 
	// накладных, не содержащих подотчетной 
	// продукции				
					Если Таблица.НайтиЗначение(тзПодчиненные
						.Документ, "", "док") = 0 Тогда
							Продолжить;
					КонецЕсли;	
			КонецЕсли;
				
			Документы.НайтиДокумент(тзПодчиненные.Документ);
			Документы.СтатусВСД = Статус;
			
			Попытка
				Документы.Записать();

				//Сообщить("Записан документ """ 
				//	+ Документы.ТекущийДокумент() + """");

			Исключение
				Возврат "20005";
	
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;
	
	Если Режим > 0 Тогда
	
		Документы.НайтиДокумент(Основной);
		Документы.СтатусВСД = Статус;
		
		Попытка
			Документы.Записать();
			
	        //Сообщить("Записан документ """ 
			//	+ Документы.ТекущийДокумент() + """");
				
		Исключение
			Возврат "20005";
	
		КонецПопытки;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

//*******************************************
Процедура ПередатьДанныеОперацииНаПодготовкуТранзакции(Конт)
	Перем КодОшибки;

	Если ТипЗначенияСтр(Конт) <> "ГрупповойКонтекст" Тогда
		КодОшибки = "20001";
		
	Иначе
		Если Конт.Модифицированность() = 1 Тогда
			КодОшибки = "20002";
			
		ИначеЕсли Конт.ДатаДок < мДатаНачалаРаботыСВСД Тогда
			КодОшибки = "20008";
			
		ИначеЕсли Конт.СтатусВСД <> Перечисление.СтатусыВСД.Проект Тогда
			КодОшибки = "20003";
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ОО(КодОшибки, Конт) > 0 Тогда
		Возврат;
	КонецЕсли;

    ДанныеОперации = ВыбратьДанныеОперации(Конт);

// основная процедура проверки, что в 
// обработку передан контекст основного 
// документа операции
	Если ОО(ДанныеОперации.Получить("Ошибка"), Конт) > 0 Тогда
		Возврат;
	
// данные операции сформированы верно,
// указаны основной и подчиненные документы
	ИначеЕсли глмОбщиеФункции.ОбработатьОшибку(глмСерииНоменклатуры
		.ЗаписатьДвиженияПоСертификатам(ДанныеОперации, 
			Конт), "глмСерииНоменклатуры", Конт) > 0 Тогда
				Возврат;

// можно устанавливать статус ВСД подчиненных
// документов операции
	ИначеЕсли ОО(ПоставитьСтатусОперации(ДанныеОперации, 
		Перечисление.СтатусыВСД.Оформлен), Конт) > 0 Тогда
			Возврат;
				
	КонецЕсли;
		
// можно устанавливать статус ВСД основного
// документа 
	Конт.УстановитьАтрибут("СтатусВСД", 
		Перечисление.СтатусыВСД.Оформлен);
	
	Конт.Записать();
	
	Конт.Форма.Закрыть(0);
    
КонецПроцедуры

//*******************************************
Процедура ПередатьДанныеОперацииНаУдалениеТранзакции(Конт)
	Перем КодОшибки;

	Если ТипЗначенияСтр(Конт) <> "ГрупповойКонтекст" Тогда
		КодОшибки = "20001";
		
	Иначе
		Если Конт.Модифицированность() = 1 Тогда
			КодОшибки = "20002";
			
		ИначеЕсли Конт.СтатусВСД <> Перечисление.СтатусыВСД.Подписан Тогда
			КодОшибки = "20003";
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ОО(КодОшибки, Конт) > 0 Тогда
		Возврат;
	КонецЕсли;
	
    ДанныеОперации = ВыбратьДанныеОперации(Конт);
	
	Если ОО(ДанныеОперации.Получить("Ошибка"), Конт) > 0 Тогда
		Возврат;
	
	ИначеЕсли ОО(ПоставитьСтатусОперации(ДанныеОперации, 
		Перечисление.СтатусыВСД.Аннулирован), Конт) > 0 Тогда
			Возврат;
			
	КонецЕсли;
	
	Конт.УстановитьАтрибут("СтатусВСД", 
		Перечисление.СтатусыВСД.Аннулирован);
	
	Конт.Записать();
	
	Конт.Форма.Закрыть(0);
    
КонецПроцедуры

//*******************************************
Функция ЕстьГотовыеНаОформлениеДокументы(ДатаДок)
	
	ТекстЗапроса = "_selReadyDoc('" + Формат(ДатаДок, "ДГГГГММДД") + "')";
	
	Ответ = глмOLEDBQuery.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);	
    
    Возврат Ответ.ПолучитьЗначение(1, 1);
	
КонецФункции

//*******************************************
Функция ТекстЗапросаВыборкиДокументов(Тип)
	
	Если Тип = "Документ.РасходнаяНакладная" Тогда
		Возврат 
			"SELECT
			|	Накладная.iddoc AS [doc $Документ.РасходнаяНакладная]
			|FROM
			|	$Документ.РасходнаяНакладная AS Накладная
			|	LEFT JOIN $ДокументСтроки.Рейс AS Рейс
			|		ON $ДокументСтроки.Рейс.Заявка = Накладная.iddoc
			|WHERE
			|	$Документ.РасходнаяНакладная.СтатусВСД = '   5DZ   ' 
			|		AND $Документ.РасходнаяНакладная.Склад <> '    3V   '
			|			AND ISNULL(Рейс.iddoc)
			|ORDER BY
			|	$Документ.РасходнаяНакладная.АвтоподборСерий,
			|	Накладная.iddoc
			|";
		
	Иначе
		Возврат 
			"SELECT
			|	iddoc AS [doc $" + Тип + "]
			|FROM
			|	$" + Тип + "
			|WHERE
			|	$" + Тип + ".СтатусВСД = '   5DZ   '"
			+ ?(Тип = "Документ.Рейс", 
			"ORDER BY
			|	$" + Тип + ".АвтоподборСерий,
			|	iddoc"
			, "");
			
	КонецЕсли;
	
КонецФункции	

//*******************************************
Процедура ОбработкаДокумента(Тип)

	Сообщить("	-обработка: """ + Тип + """");
	
	СчетОпераций = 0;

	Документ = СоздатьОбъект("Документ");
	
	ТекстЗапроса = ТекстЗапросаВыборкиДокументов(Тип);
	Выборка = глмOLEDBQuery.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);	
    
	Выборка.ВыбратьСтроки();
	Пока Выборка.ПолучитьСтроку() = 1 Цикл
    	
		Сообщить("	-документ: """ + Выборка.doc + """");
		
		СчетОпераций = СчетОпераций + 1;
		Если СчетОпераций > мОбъемОперации Тогда
	// дозируем обработку документов на небольшие порции		
			Прервать;
		КонецЕсли;
		
		Документ.НайтиДокумент(Выборка.doc);
		Если Документ.Блокировка(1) = 0 Тогда
	// при безуспешной попытка заблокировать документ,
	// откладываем его обработку 
			Продолжить;
		Иначе
	// по определению статуса блокировки документа,
	// освобождаем его для дальнейшей работы
			Документ.Блокировка(0);
		КонецЕсли;	
				
		ДанныеОперации = ВыбратьДанныеОперации(Выборка.doc);
		
		Если ОО(ДанныеОперации.Получить("Ошибка"), "") > 0 Тогда
	// ошибка выбора данных операции
			Продолжить;

		ИначеЕсли Выборка.doc.ДатаДок < мДатаНачалаРаботыСВСД Тогда
	// сбросить статус операции
			ОО(ПоставитьСтатусОперации(ДанныеОперации, 
				Перечисление.СтатусыВСД.Проект, 1), "");
		Иначе
	// обработка документа в соответствии со статусом сертификатов	
			тзОшибкиСертификатов = глмСерииНоменклатуры
				.ПолучитьРезультатОбработкиОперации(Выборка.doc, "");
				
			тзОшибкиСертификатов.Сортировать("КодОшибки-");
			
			тзОшибкиСертификатов.ВыбратьСтроки();
			Если тзОшибкиСертификатов.ПолучитьСтроку() = 1 Тогда
	// вычисляем код ошибки
				тКодОшибки = СтрЗаменить(тзОшибкиСертификатов
					.КодОшибки, ":", РазделительСтрок);
					
				КодОшибки = СтрПолучитьСтроку(тКодОшибки, 1);
			Иначе
	// документ не содержит записей в ошибках только 
	// в одном случае - нет сертифицируемого товара
				КодОшибки = "0.2";
			КонецЕсли;
            
			ГруппаОшибок = Лев(КодОшибки, 1);
            
			Сообщить("	-группа ошибок=" + ГруппаОшибок);
		
			Если ГруппаОшибок = "5" Тогда
	// 5 - ошибки со стороны ВетИС
	// возможно, заявка была обработана на стороне
	// сервера, нужно внимательно все проверить перед
	// тем, как сбрасывать статус и редактировать заявку
				//ОО(ПоставитьСтатусОперации(ДанныеОперации, 
				//	Перечисление.СтатусыВСД.Проект, 1), "");

			ИначеЕсли ГруппаОшибок = "4" Тогда
    // 4 - необходимо уточнить сведения в торговой программе	 
				ОО(ПоставитьСтатусОперации(ДанныеОперации, 
					Перечисление.СтатусыВСД.Проект, 1), "");

			ИначеЕсли ГруппаОшибок = "3" Тогда
	// 3 - необходимо уточнение сведений в программе производителя
				Если КодОшибки = "3.1" Тогда
	// документ не синхронизирован
				Иначе
	// ошибка синхронизации (подбора серий)
					ОО(ПоставитьСтатусОперации(ДанныеОперации, 
						Перечисление.СтатусыВСД.Проект, 1), "");
				КонецЕсли;		
						
			ИначеЕсли ГруппаОшибок = "2" Тогда
	// 2 - сведения готовы к передаче в ВетИС с изменением статуса в ходе обработки
				глмМеркурий.СоздатьТранзакцию(ДанныеОперации);
				
    		ИначеЕсли ГруппаОшибок = "1" Тогда	
	// 1 - ожидание результата транзакции на сервере ВетИС
				глмМеркурий.ПроверитьСтатусТранзакции(ДанныеОперации);
				
			ИначеЕсли ГруппаОшибок = "0" Тогда	
	// 0 - признак завершение обработки документа
				Если КодОшибки = "0.9" Тогда
	// сертификат выпущен, документ должен быть заблокирован
					ОО(ПоставитьСтатусОперации(ДанныеОперации, 
						Перечисление.СтатусыВСД.Подписан, 1), "");
				Иначе
	// документ не сеодержит сертифицируемых записей по разным причинам
					ОО(ПоставитьСтатусОперации(ДанныеОперации, 
						Перечисление.СтатусыВСД.Проект, 1), "");
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		Сообщить("	-выполнено");
	КонецЦикла;
	
КонецПроцедуры	

//*******************************************
Функция ФоноваяОбработкаДокументовТоварооборота()
	
	ОбработкаДокумента("Документ.Пересортица"); 
	
	ОбработкаДокумента("Документ.Рейс"); 
	
	ОбработкаДокумента("Документ.РасходнаяНакладная"); 
	
	ОбработкаДокумента("Документ.ТранспортнаяНакладная");
	
	Возврат 1;
	
КонецФункции

//*******************************************
мОбъемОперации = 20;

мДатаНачалаРаботыСВСД = Константа.ДатаНачалаРаботыСВСД;

КодыОшибок = СоздатьОбъект("СписокЗначений");
КодыОшибок.ДобавитьЗначение("Переданные данные не являются групповым контекстом", "20001");
КодыОшибок.ДобавитьЗначение("Перед выполнением действия, документ необходимо записать", "20002");
КодыОшибок.ДобавитьЗначение("Неверный статус документа", "20003");
КодыОшибок.ДобавитьЗначение("По операции предоставлено недостаточно данных", "20004");
КодыОшибок.ДобавитьЗначение("Не удалось изменить статус документа", "20005");
КодыОшибок.ДобавитьЗначение("Снятие с проведения документа в данном статусе невозможно", "20006");
КодыОшибок.ДобавитьЗначение("Данные операции содержат непроведенный документ", "20007");
КодыОшибок.ДобавитьЗначение("Дата документа за границами периода работы с эВСД", "20008");
