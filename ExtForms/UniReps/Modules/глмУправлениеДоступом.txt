Перем КодыОшибок, мПолныйТипОбъекта, мБлокироватьИзменениеОбъектовОбработкой;

Функция Тест() Экспорт

	Возврат "Глобальный модуль ""Управление доступом"" успешно подключен";

КонецФункции	

// функция - элемент RLS - системы ограничения доступа
// к данным ИБ. здесь представлена для совместимости 
// с практикуемым решением
Функция ВзятьШаблОгрДоступа(Знач Идент) Экспорт
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ПраваДоступа");
	
	Идент = СтрЗаменить(Идент, ".", "_");
	
	ТекШабл = "";
	Попытка
		Таб.ВывестиСекцию(Идент);
		ТекШабл = Таб.Область(1, 1).Текст;
	Исключение
		// не нашли инд. ограничение 
		//	- используется стандартное
		ТекШабл = "[1]";
	КонецПопытки;
	
	Возврат ТекШабл;	
	
КонецФункции

Процедура ЗапретитьРедактированиеШапкиИПроведение(Конт)
	
	РасшФорма = СоздатьОбъект("РасширениеФормы");
	РасшФорма.УстановитьФорму(Конт.Форма);
	
	Для р = 0 По РасшФорма.КоличествоАтрибутов() - 1 Цикл

		ТекАтр = РасшФорма.ПолучитьАтрибут(р);
		
		Если ТекАтр.Тип = 5 Тогда
		
		ИначеЕсли ТекАтр.Тип = 3 Тогда
			ТекАтр.Доступность = СтрЧислоВхождений(ТекАтр.Заголовок, 
				"Печать") + СтрЧислоВхождений(ТекАтр.Заголовок, 
					"Закрыть") + СтрЧислоВхождений(ТекАтр.Заголовок, 
						"ТО&РГ12") + СтрЧислоВхождений(ТекАтр.Заголовок,  
							"УПД") + СтрЧислоВхождений(ТекАтр.Заголовок, 
								"&ТТН") + ?(ТекАтр.Идентификатор 
									= "кнОтправитьПовторно", 1, 0)
										+ СтрЧислоВхождений(ТекАтр
	// кажется, это уже исправлено тем, что кнопка печати 
	// уже "не запоминает" выбранное пользователем значение
											.Идентификатор, "кнПечать")
											+ ?(ТекАтр.Идентификатор 
												= "кнУдалитьВСД", 1, 0);
		Иначе
			ТекАтр.Доступность = 0;		
		КонецЕсли;			

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапретитьРедактированиеИПроведение(Конт) 
	
    ЗапретитьРедактированиеШапкиИПроведение(Конт);

	Конт.Форма.ТолькоПросмотр(1);
    
КонецПроцедуры    


Функция ЕстьПравоДоступа(ВидПраваДоступа) Экспорт
	
	Если ПустоеЗначение(глПользователь) = 0 Тогда

		ПраваДоступа = СоздатьОбъект("Справочник.ПраваДоступа");
		ПраваДоступа.ИспользоватьВладельца(глПользователь);
		
		Если ПраваДоступа.НайтиПоРеквизиту("ВидПраваДоступа", Перечисление.ВидыПравДоступа
			.ЗначениеПоИдентификатору(ВидПраваДоступа), 0) = 1 Тогда
				
				Возврат ПраваДоступа.Активность;
		КонецЕсли;	
		
	КонецЕсли;	

	Возврат 0;
	
КонецФункции	

Функция ИмяФайлаОбразаОбъекта(Объект)
	
	Ид = глмМетаданные.Ссылка2Ид(Объект);
	
	ИмяФайла = КаталогИБ() + "Syslog\" 
		+ СтрЗаменить(глмМетаданные.Ид2ПолнаяСтрокаИб(Ид), 
			" ", "_") + ".xml";
	
	Возврат ИмяФайла;
	
КонецФункции

Функция СохранитьОбразОбъекта(Объект)
	Перем хмлПарсер, хмлНаборСхем, хмлКорень, хмлУзел;
	
	ИмяФайла = ИмяФайлаОбразаОбъекта(Объект);
	
	Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда

		Попытка
			Результат = глмХМЛ.СоздатьЭлементДокумента(хмлПарсер, хмлНаборСхем, 
				хмлКорень, "ROOT", "windows-1251") * глмХМЛ.СериализоватьОбъект(Объект, 
					хмлПарсер, хмлНаборСхем, хмлУзел, "", "");
		Исключение
			Возврат 0;

		КонецПопытки;
		
		Если Результат = 1 Тогда
			хмлКорень.appendChild(хмлУзел);
			глмХМЛ.ВывестиДокументВФайл(хмлПарсер, ИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции	

Функция ЗагрузитьОбразОбъектаВКонтекст(Конт, ТипОбъекта, Тихо = 0)
	Перем хмлПарсер, хмлНаборСхем, хмлКорень, хмлУзел;
	
	Если ТипОбъекта = 11 Тогда
		Объект = Конт.ТекущийЭлемент();
				
	ИначеЕсли ТипОбъекта = 12 Тогда
		Объект = Конт.ТекущийДокумент();
				
	Иначе
		Возврат 0;
		
	КонецЕсли;		

	ИмяФайла = ИмяФайлаОбразаОбъекта(Объект);

	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда
		
        глмХМЛ.ПрочитатьДокументИзФайла(хмлПарсер, 
			хмлНаборСхем, "", ИмяФайла);
			
		хмлУзел = хмлПарсер.documentElement.childNodes(0);
		
		Если глмХМЛ.УстановитьАтрибутыКонтекста(Конт, 
			хмлУзел, ТипОбъекта) = 1 Тогда
				ФС.УдалитьФайл(ИмяФайла);

// нет возможности ни установить флаг модифицированности 
// значений реквизитов формы, ни записать значение объекта
				Сообщить("Сведения объекта """ + Объект + """
						| ранее были изменены во внешней обработке. 
						| Чтобы сохранить текущие значения реквизитов, 
						| нужно вызвать действие записи объекта в 
						| открытой форме. Если закрыть форму без записи, 
						| будут сохранены новые, измененные значения", "!");

		Иначе
			Если Тихо = 0 Тогда	
				Возврат глмОбщиеФункции.ОбработатьОшибку("20001", 
					"глмУправлениеДоступом", Конт);
			Иначе
				Возврат 2;
			КонецЕсли;	
		КонецЕсли;	

	Иначе
		Если Тихо = 0 Тогда	
			Возврат глмОбщиеФункции.ОбработатьОшибку("20001", 
				"глмУправлениеДоступом", Конт);
		Иначе
			Возврат 2;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПолучитьТипОбъектаАктивногоКонтекста(Конт = "")
	
	Если Конт = "" Тогда
		
		Сервис = СоздатьОбъект("Сервис");
		Если Сервис.АктивныйКонтекст(Конт) = 0 Тогда

// не удалось получить сведения об активном контексте			
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	ФормаРасш.УстановитьФорму(Конт.Форма);

	Возврат ФормаРасш.ТипОбъекта();	
	
КонецФункции

Процедура СохранитьПолныйТипОбъекта(ПолныйТипОбъекта)
	
	мПолныйТипОбъекта = ПолныйТипОбъекта;
	
КонецПроцедуры	

Процедура БлокироватьПолныйТипОбъекта(ПолныйТипОбъекта)
	
	ПолныйТипОбъекта = "Обработка.ОтказДоступа.Форма";
	
КонецПроцедуры	

Процедура ВосстановитьПолныйТипОбъекта(ПолныйТипОбъекта)
	
	ПолныйТипОбъекта = мПолныйТипОбъекта;
	
КонецПроцедуры	

Функция ВычислитьШаблОгрДоступа(Конт, ОписательОбъекта)
	
	ШаблОгрДоступа = ВзятьШаблОгрДоступа(ОписательОбъекта);

// вычисление прав доступа
	Попытка
		РезПровОгрДоступа = Число(Шаблон(ШаблОгрДоступа));
	Исключение
		РезПровОгрДоступа = 0;
	КонецПопытки;
	
	Возврат РезПровОгрДоступа;
	
КонецФункции	

Процедура ПриНачалеБлокировкиОбъекта(Конт)

	Если (ПолучитьТипОбъектаАктивногоКонтекста() = "ВнешнийОтчет")
		И (мБлокироватьИзменениеОбъектовОбработкой = 1)
			И (ТипЗначения(Конт) = 12) Тогда
// обнаружили доступ к документу при помощи внешней обработки

		СохранитьОбразОбъекта(Конт);
	КонецЕсли;

	Если мПолныйТипОбъекта = ТипЗначенияСтр(Конт)
		+ "." + Конт.Вид() + ".Форма" Тогда
// проверка соответствия полного идентификатора открываемой формы и 
// сведений о текущей блокировке объекта (не во всех, но в большинстве 
// случаев, это поможет исключить ложные срабатывания)

	    РезПровОгрДоступа = ВычислитьШаблОгрДоступа(Конт, мПолныйТипОбъекта);
        
		Если РезПровОгрДоступа = 0 Тогда
// запрет на чтение данных объекта			
			БлокироватьПолныйТипОбъекта(мПолныйТипОбъекта);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПослеСозданияФормы(Конт)
    
	ТипОбъекта = ПолучитьТипОбъектаАктивногоКонтекста(Конт); 

	Если ТипОбъекта = "Документ" Тогда
// проконтролировать тип контекста		

		ЗагрузитьОбразОбъектаВКонтекст(Конт, 12, 1);
		
	    РезПровОгрДоступа = ВычислитьШаблОгрДоступа(Конт, мПолныйТипОбъекта);
	
		Если РезПровОгрДоступа = -1 Тогда
			
			ЗапретитьРедактированиеИПроведение(Конт);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

мБлокироватьИзменениеОбъектовОбработкой = Константа.БлокироватьИзменениеОбъектовОбработкой;	
	
КодыОшибок = СоздатьОбъект("СписокЗначений");
КодыОшибок.ДобавитьЗначение("Не удалось восстановить данные документа", "20001");
