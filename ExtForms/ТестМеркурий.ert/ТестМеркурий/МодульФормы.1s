Перем сзПараметры, хмлПарсер, ксКаталогПроекта,
	хмлНаборСхем, сзЗапрос, хмлОтвет;

Перем тзГорода;	

//*******************************************
Процедура ЗаполнитьГеографическийСписок(сзПараметры, Метод, ТэгЗаписи, Список, ТегПредст = "./ikar:view")
	
	Список.УдалитьВсе();
	
	Количество = 100;
	Смещение = 0;
	
	сзПараметры.Установить("Количество", Количество);
	сзПараметры.Установить("Смещение", Смещение);
	
	Пока 1=1 Цикл
		
		Если Число(Шаблон("[глмМеркурий." + Метод 
			+ "(хмлПарсер, хмлНаборСхем, сзПараметры, сзЗапрос)]")) = 1 Тогда
	        
			Если глмМеркурий.ВыполнитьЗапрос(сзЗапрос, хмлОтвет) = 1 Тогда

	           	хмлОтвет.setProperty("SelectionLanguage", "XPath");
				хмлОтвет.setProperty("SelectionNamespaces",
					" xmlns:bs='http://api.vetrf.ru/schema/cdm/base' "
					+	"xmlns:ws='http://api.vetrf.ru/schema/cdm/ikar/ws-definitions' "
				 	+	"xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar' "
				 	+	"xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'");
				
				хмлВыборка = хмлОтвет.SelectNodes(ТэгЗаписи + "List");	
			
				Если хмлВыборка.length > 0 Тогда
				
					хмлЗапись = хмлВыборка.item(0);
					КоличествоВсего = Число(глмХМЛ.ПолучитьАтрибут(хмлЗапись, "total"));
					
				КонецЕсли;	
				 	
				хмлВыборка = хмлОтвет.SelectNodes(ТэгЗаписи);	
				
				Для номЗаписи = 0 По хмлВыборка.length - 1 Цикл

					хмлЗапись = хмлВыборка.item(номЗаписи);

					Список.ДобавитьЗначение(хмлЗапись.SelectNodes("./bs:guid").item(0).text, 
						хмлЗапись.SelectNodes(ТегПредст).item(0).text);

				КонецЦикла;
				
				Смещение = Смещение + Количество;
				
				Если Смещение < КоличествоВсего Тогда

					сзПараметры.Установить("Количество", Количество);
					сзПараметры.Установить("Смещение", Смещение);

				Иначе
					Прервать;
				КонецЕсли;
				
			Иначе
				Сообщить("не удалось выполнить запрос");
				Прервать;	
					
			КонецЕсли;
				
		Иначе
			Сообщить("не удалось сформировать запрос");
			Прервать;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//*******************************************
Процедура ЗаполнитьРегионы()
	
	сзПараметры = СоздатьОбъект("СписокЗначений"); 
	сзПараметры.ДобавитьЗначение(СокрЛП(ЛогинПрокси), "ЛогинПрокси");
	сзПараметры.ДобавитьЗначение(СокрЛП(ПарольПрокси), "ПарольПрокси");
	сзПараметры.ДобавитьЗначение(СокрЛП(ЛогинИСМеркурий), "ЛогинИСМеркурий");
	сзПараметры.ДобавитьЗначение(СокрЛП(КлючПриложения), "КлючПриложения");
	сзПараметры.ДобавитьЗначение(СокрЛП(ГУИдХС), "ГУИдХС");
	сзПараметры.ДобавитьЗначение(СокрЛП(ГУИдРФ), "ГУИдРФ");
    
	ЗаполнитьГеографическийСписок(сзПараметры, 
		"GetRegionListByCountryRequest", "//ikar:region", сзРегионы);
	
	Если сзРегионы.РазмерСписка() > 0 Тогда	

		сзРегионы.ТекущаяСтрока(1);	
		
	КонецЕсли;
	
КонецПроцедуры

//*******************************************
Процедура ЗаполнитьМестности()
	
	сзПараметры.Установить("ГУИдРегион", сзРегионы
		.ПолучитьЗначение(сзРегионы.ТекущаяСтрока()));
	
	ЗаполнитьГеографическийСписок(сзПараметры, 
		"GetLocalityListByRegionRequest", "//ikar:locality", сзМестности);
			
КонецПроцедуры	

//*******************************************
Процедура ЗаполнитьМестностиПоРайону()
	
	сзПараметры.Установить("ГУИдРайон", сзРайоны
		.ПолучитьЗначение(сзРайоны.ТекущаяСтрока()));
	
	ЗаполнитьГеографическийСписок(сзПараметры, 
		"GetLocalityListByDistrictRequest", "//ikar:locality", сзМестности);

	
КонецПроцедуры	

//*******************************************
Процедура ЗаполнитьРайоны()
	
	сзПараметры.Установить("ГУИдРегион", сзРегионы
		.ПолучитьЗначение(сзРегионы.ТекущаяСтрока()));
	
	ЗаполнитьГеографическийСписок(сзПараметры, 
		"GetDistrictListByRegionRequest", "//ikar:district", сзРайоны);
			
КонецПроцедуры
	
//*******************************************
Процедура ЗаполнитьУлицы()
	
	сзПараметры.Установить("ГУИдМестности", сзМестности
		.ПолучитьЗначение(сзМестности.ТекущаяСтрока()));
	
	ЗаполнитьГеографическийСписок(сзПараметры, 
		"GetStreetListByLocalityRequest", "//ikar:street", сзУлицы);
	
КонецПроцедуры

Процедура ЗаполнитьМестностиПоРегиону()
	Перем стрПредстМестности, стрПредстРайона;
	
	тзГорода.УдалитьСтроки();	
	
	ЗаполнитьРайоны();
	
	Для НС = 1 По сзРайоны.РазмерСписка() Цикл
		
		сзРайоны.ТекущаяСтрока(НС);
		
		ИдРайона = сзРайоны.ПолучитьЗначение(НС, 
			стрПредстРайона);
			
		ЗаполнитьМестностиПоРайону();
		
		Для Поз = 1 По сзМестности.РазмерСписка() Цикл
			
			тзГорода.НоваяСтрока();
			
			тзГорода.Район = стрПредстРайона;
            
			ИдМестности = сзМестности.ПолучитьЗначение(Поз, 
				стрПредстМестности);			
			
			тзГорода.Местность = стрПредстМестности;
			
			тзГорода.ИдМестности = ИдМестности;

		КонецЦикла;	
		
	КонецЦикла;	
	
	ЗаполнитьМестности();

	Для Поз = 1 По сзМестности.РазмерСписка() Цикл
		
		ИдМестности = сзМестности.ПолучитьЗначение(Поз, 
			стрПредстМестности);			
		
		тзГорода.НоваяСтрока();
		
		тзГорода.Район = "";
		
		тзГорода.Местность = стрПредстМестности;
		
		тзГорода.ИдМестности = ИдМестности;

	КонецЦикла;
	
	сзРайоны.ТекущаяСтрока(0);
	
КонецПроцедуры

//*******************************************
Процедура ПриВыбореМестности()
	
	ЗаполнитьУлицы();
	
КонецПроцедуры

//*******************************************
Процедура ПриВыбореРегиона()
	
	ЗаполнитьРайоны();
	
	ЗаполнитьМестности();
    
	ЗаполнитьМестностиПоРегиону();
	
КонецПроцедуры

//*******************************************
Процедура ПриВыбореРайона()
	
	ЗаполнитьМестностиПоРайону();
	
КонецПроцедуры
 
Процедура ПриВыбореПредприятия()
	Перем ИмяОбъекта;
	
	П = сзПредприятия.ТекущаяСтрока();

	Если П > 0 Тогда
		ИдПредприятия = сзПредприятия.ПолучитьЗначение(П, ИмяОбъекта);
	КонецЕсли;
	
КонецПроцедуры

//*******************************************
Процедура Сформировать()
	
	сзПараметры.Установить("ГУИдУлицы", сзУлицы
		.ПолучитьЗначение(сзУлицы.ТекущаяСтрока()));
	
	сзПараметры.Установить("НомерДома", Дом);
	
	Если СокрЛП(Строение) = "" Тогда
		сзПараметры.Установить("Строение", Строение);
	КонецЕсли;	
	
	ЗаполнитьГеографическийСписок(сзПараметры, 
		"GetRussianEnterpriseListRequest", "//dt:enterprise", 
			сзПредприятия, "./dt:name");
	
	Поз = сзПредприятия.РазмерСписка();
	
	Если Поз > 10 Тогда
		Если Вопрос("Список предприятий достаточно большой "
			+ "и его проверка займет продолжительное время,"
				+ "продолжить?", "Да+Нет", 60) <> "Да" Тогда
					Возврат;
		КонецЕсли;		
	КонецЕсли;	
	
	Пока Поз > 0 Цикл
		
		ГУИдПредприятия = сзПредприятия.ПолучитьЗначение(Поз);
		сзПараметры.Установить("ГУИдПредприятия", ГУИдПредприятия);
    
		Если глмМеркурий.GetEnterpriseByGuidRequest(хмлПарсер,
			хмлНаборСхем, сзПараметры, сзЗапрос) = 1 Тогда
	
			Если глмМеркурий.ВыполнитьЗапрос(сзЗапрос, хмлОтвет) = 1 Тогда
				
	           	хмлОтвет.setProperty("SelectionLanguage", "XPath");
				хмлОтвет.setProperty("SelectionNamespaces",
					" xmlns:bs='http://api.vetrf.ru/schema/cdm/base' "
					+	"xmlns:ws='http://api.vetrf.ru/schema/cdm/cerberus/enterprise/ws-definitions' "
				 	+	"xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar' "
				 	+ 	"xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'");
    			
					Если хмлОтвет.SelectNodes("//bs:active").item(0).text = "false" Тогда
						сзПредприятия.УдалитьЗначение(Поз);
						Сообщить("ГУИд """ + ГУИдПредприятия + """ устарел - удалено");
					КонецЕсли;	
			Иначе
				Сообщить("Не удалось проверить ГУИд """ + ГУИдПредприятия + """");
				Возврат;
			КонецЕсли;
		Иначе
			Сообщить("Не удалось проверить ГУИд """ + ГУИдПредприятия + """");
			Возврат;
		КонецЕсли;
		
		Поз = Поз - 1;
		
	КонецЦикла;	

КонецПроцедуры

//*******************************************
Процедура ПоказатьИнформацию()
	
	ГУИдПредприятия = сзПредприятия
		.ПолучитьЗначение(сзПредприятия.ТекущаяСтрока());
		
	сзПараметры.Установить("ГУИдПредприятия", ГУИдПредприятия);

	Если глмМеркурий.GetEnterpriseByGuidRequest(хмлПарсер,
		хмлНаборСхем, сзПараметры, сзЗапрос) = 1 Тогда
	
			Если глмМеркурий.ВыполнитьЗапрос(сзЗапрос, хмлОтвет) = 1 Тогда
				
	           	хмлОтвет.setProperty("SelectionLanguage", "XPath");
				хмлОтвет.setProperty("SelectionNamespaces",
					" xmlns:bs='http://api.vetrf.ru/schema/cdm/base' "
		 		    + "xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' " 
		 			+ "xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'");
		 		
				 	
				хмлВыборка = хмлОтвет.SelectNodes("//dt:enterprise");	
				
				Для номЗаписи = 0 По хмлВыборка.length - 1 Цикл           

					хмлЗапись = хмлВыборка.item(номЗаписи);

					Сообщить("ГУИд предприятия: " + хмлЗапись.SelectNodes("./bs:guid").item(0).text);
					Сообщить("Дата создания: " + хмлЗапись.SelectNodes("./bs:createDate").item(0).text);
					Сообщить("Наименование: " + хмлЗапись.SelectNodes("./dt:name").item(0).text);
					Сообщить("Адрес: " + хмлЗапись.SelectNodes("./dt:address/dt:addressView").item(0).text);  
					Сообщить("Статус предприятия в реестре ИС Цербер: " + хмлЗапись.SelectNodes("./dt:registryStatus").item(0).text); 
					Сообщить("Активность: " + хмлЗапись.SelectNodes("./bs:active").item(0).text);
						
				КонецЦикла;	
		
			Иначе
				Сообщить("не удалось выполнить запрос");
					
			КонецЕсли;
	Иначе
		Сообщить("не удалось сформировать запрос");	
	КонецЕсли;
	
КонецПроцедуры

//*******************************************
Процедура ПриОткрытии()
	
	//ЗаполнитьРегионы();
	
КонецПроцедуры

//******************************************* 
Процедура Прогресс(П)
	
	СтрокаПрогресса = "";
	
	Для й = 1 По П * 2 Цикл
		СтрокаПрогресса = СтрокаПрогресса + "|";
	КонецЦикла;	
	
	Форма.Прогресс.Заголовок(СтрокаПрогресса); 
	
	Форма.Процент.Заголовок(П + " %");
	
КонецПроцедуры	

//*******************************************
Процедура ПриВыбореКлиента()
	Перем хмлПарсер, хмлНаборСхем, сзЗапрос, хмлОтвет;
	
	Форма.ИдХС.Заголовок("");
	
	Прогресс(0);
	
	сзПараметры.Установить("ИНН", ВыбКлиент.ИНН);
	Если глмМеркурий.GetBusinessEntityListRequest(хмлПарсер, 
		хмлНаборСхем, сзПараметры, сзЗапрос) = 1 Тогда
			
			глмХМЛ.ВывестиДокументВФайл(сзЗапрос.Получить("ТекстЗапроса"), 
				"d:\testdb\test.xml");
			
			Если глмМеркурий.ВыполнитьЗапрос(сзЗапрос, хмлОтвет) = 1 Тогда

				хмлОтвет.setProperty("SelectionLanguage", "XPath");
				хмлОтвет.setProperty("SelectionNamespaces",
				" xmlns:bs='http://api.vetrf.ru/schema/cdm/base' "
				+	"xmlns:argc='http://api.vetrf.ru/schema/cdm/argus/common' "
			 	+	"xmlns:ent ='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' "
			 	+	"xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production' "
			 	+	"xmlns:ns2 ='http://api.vetrf.ru/schema/cdm/mercury/vet-document' "
			 	+	"xmlns:ns1 ='http://api.vetrf.ru/schema/cdm/mercury/applications'");
		 	
			 	хмлВыборка = хмлОтвет.selectNodes("//ent:businessEntity/bs:guid");
		        
			 	Если хмлВыборка.length > 0 Тогда
			 		
			 		Ид = хмлВыборка.item(0).text;
			 		
			 		Форма.ИдХС.Заголовок(Ид);
			 		
			 	КонецЕсли;
			КонецЕсли;
	КонецЕсли;
	
	Прогресс(20);
	
	АдресТТ = ВыбКлиент.ПочтовыйАдрес;
	
	Форма.АдресТТ.Заголовок(АдресТТ);
	
	сзЧасти = СоздатьОбъект("СписокЗначений");
	
	Искать = 0;
	
	Если глмОбщиеФункции.РазделитьСтроку(сзЧасти, АдресТТ, ",") > 1 Тогда
	
		стрПредстРегиона = сзЧасти.ПолучитьЗначение(3);		
		
		ПозицияВСписке = сзРегионы.НайтиЗначение(сзРегионы
			.Получить(стрПредстРегиона));
		
		Прогресс(40);
		
		Если ПозицияВСписке > 0 Тогда
	// регион найден в списке регионов	    
			Если сзРегионы.ТекущаяСтрока() <> ПозицияВСписке Тогда
	// регион не совпадает с уже выбранным в форме			
				сзРегионы.ТекущаяСтрока(ПозицияВСписке);
	// пересчитать районы и города			
				ПриВыбореРегиона();
				Искать = 1;
			КонецЕсли;
    
	// город/село 
			Город = сзЧасти.ПолучитьЗначение(5);
	// ... или районный центр		
			Если Город = "" Тогда
				Город = сзЧасти.ПолучитьЗначение(6);
			КонецЕсли;	
	
	// перевести в нужное представление		
			Текст = СтрЗаменить(Город, " ", РазделительСтрок);
			стрПредстМестности = СтрПолучитьСтроку(Текст, 2) 
				+ ". " + СтрПолучитьСтроку(Текст, 1);
	
	// поиск села/местности в справочнике по районам			
			НС = 0; Если тзГорода.НайтиЗначение(стрПредстМестности, 
				НС, "Местность") = 1 Тогда
				
					тзГорода.ПолучитьСтрокуПоНомеру(НС);
					
					стрПредстРайона = тзГорода.Район;

                    Если стрПредстРайона <> "" Тогда
	// есть районный центр
						ПозицияВСписке = сзРайоны.НайтиЗначение(сзРайоны
							.Получить(стрПредстРайона));
					Иначе
	// местность - сама районный центр
						ПозицияВСписке = 0;
					КонецЕсли;
					
					Если сзРайоны.ТекущаяСтрока() 
						<> ПозицияВСписке Тогда
	// выбранный на данный момент на 
	// форме район не совпадает с искомым						
							сзРайоны.ТекущаяСтрока(ПозицияВСписке);
							
	// перезаполнить местности 							
							Если ПозицияВСписке <> 0 Тогда
	// по выбранной области							
								тзМестности = глмОбщиеФункции.ВыбратьПоЗначению(тзГорода, 
									"Район", стрПредстРайона)
							Иначе
	// областные центры							
	   							тзМестности = глмОбщиеФункции.ВыбратьПоЗначению(тзГорода, 
	   								"Район", "")
							КонецЕсли;
	   							
	   						сзМестности.УдалитьВсе();
	   						
	   						тзМестности.ВыбратьСтроки();
	   						Пока тзМестности.ПолучитьСтроку() = 1 Цикл
	// перезаполнить список местности района   							
	   							сзМестности.ДобавитьЗначение(тзМестности.ИдМестности, 
	   								тзМестности.Местность);
	   								
	   						КонецЦикла;
	   							
							Искать = 1;
					КонецЕсли;   
	// найти город в списке				
					ПозицияВСписке = сзМестности.НайтиЗначение(сзМестности
						.Получить(стрПредстМестности));
			Иначе		
	// не удалось найти местность в справочнике
				Сообщить("Адрес не найден", "!");

				сзМестности.ТекущаяСтрока(0);
				сзУлицы.ТекущаяСтрока(0);
				Дом = "";
				Строение = "";

				Возврат;
				
			КонецЕсли;
			
			Прогресс(60);
			
			Если ПозицияВСписке > 0 Тогда
                
				Если (Искать = 1) ИЛИ (сзМестности.ТекущаяСтрока() 
					<> ПозицияВСписке) Тогда
					
						сзМестности.ТекущаяСтрока(ПозицияВСписке);

						ПриВыбореМестности();
					    
						Искать = 1;
				КонецЕсли;	
				
				ПозицияВСписке = сзУлицы.НайтиЗначение(сзУлицы
					.Получить(сзЧасти.ПолучитьЗначение(7) + "."));
                
				Прогресс(80);
				
				Если ПозицияВСписке > 0 Тогда

					сзУлицы.ТекущаяСтрока(ПозицияВСписке);
					
					Дом = сзЧасти.ПолучитьЗначение(8);
                    Строение = сзЧасти.ПолучитьЗначение(9);
					
					Сформировать();
						
				Иначе
					Сообщить("Адрес не найден", "!");

					сзУлицы.ТекущаяСтрока(0);
					Дом = "";
					Строение = "";
				КонецЕсли;
			Иначе
				Сообщить("Адрес не найден", "!");
				
				сзМестности.ТекущаяСтрока(0);
				сзУлицы.ТекущаяСтрока(0);
				Дом = "";
				Строение = "";
			КонецЕсли;
		Иначе
			Сообщить("Адрес не найден", "!");
			
			сзРегионы.ТекущаяСтрока(0);
			сзМестности.ТекущаяСтрока(0);
			сзУлицы.ТекущаяСтрока(0);
			Дом = "";
			Строение = "";
		КонецЕсли;
	КонецЕсли;
	
	Прогресс(0);
	
КонецПроцедуры	

//*******************************************
Процедура ЗаписатьДанные()
	Перем ИмяОбъекта;
	
	ИдХС = Форма.ИдХС.Заголовок();
	
	спрКлиенты = СоздатьОбъект("Справочник.Контрагенты");
	спрКлиенты.НайтиЭлемент(ВыбКлиент);

	Если ПустоеЗначение(ИдХС) = 1 Тогда
		Сообщить("Не задан ХС", "!");
	Иначе
		спрКлиенты.схГУИдХС = ИдХС; 

		П = сзПредприятия.ТекущаяСтрока();

		Если П > 0 Тогда
			ИдПредпр = сзПредприятия.ПолучитьЗначение(П, ИмяОбъекта);
			спрКлиенты.схГУИдПредприятия = ИдПредпр;
		Иначе
			Сообщить("Не задано предприятие", "!");
		КонецЕсли;
	КонецЕсли;	
	
	Попытка
		спрКлиенты.Записать();
		Сообщить("Записан """ + ИмяОбъекта + """");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	

КонецПроцедуры	

Процедура НайтиКлиентаПоИд()
	
	ТекстЗапроса = "SELECT 
	|	id AS [Клиент $Справочник.Контрагенты] 
	|FROM 
	|	$Справочник.Контрагенты
	|WHERE
	|	$Справочник.Контрагенты.схГУИдПредприятия = '" + ИдПредприятия + "'
	|";
	
	Таблица = глмOLEDBQuery.ВыполнитьИнструкцию(ТекстЗапроса, "", 1, 0, 0, 0);
	
	Таблица.ВыбратьСтроки();
	Если Таблица.ПолучитьСтроку() = 1 Тогда
		
		ВыбКлиент = Таблица.Клиент;
		
		ПриВыбореКлиента();
		
	КонецЕсли;	
	
КонецПроцедуры

//*******************************************
ксКаталогПроекта = КаталогИБ() + "ExtForms\UniReps\api\"; 
сзСтраны.ДобавитьЗначение("Российская Федерация");
сзСтраны.ТекущаяСтрока(1); 

тзГорода = СоздатьОбъект("ТаблицаЗначений");
тзГорода.НоваяКолонка("Район"); 
тзГорода.НоваяКолонка("Местность");  
тзГорода.НоваяКолонка("ИдМестности"); 

ГУИдРФ = "74a3cbb1-56fa-94f3-ab3f-e8db4940d96b";
