//*******************************************
Функция ОтборКлиентовСДолгамиНаТекущуюДату(тзКлиенты)

// стандартный объект 'запрос'
	Запрос = СоздатьОбъект("Запрос");
	
// текст запроса на выборку клиентов, имеющих актуальный долг	
	ТекстЗапроса = "//{{ЗАПРОС(Сформировать)
	|Без итогов;
	|Клиент = Регистр.ВзаиморасчетыПокупателей.Клиент;
	|Долг = Регистр.ВзаиморасчетыПокупателей.Долг;
	|Функция ДолгКонОст = КонОст(Долг);
	|Группировка Клиент без упорядочивания без групп;
	|"//}}ЗАПРОС
	;

// замер времени выполнения запроса	
	время = _getPerformanceCounter();
	
// процедура выполнения запроса	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		
		Возврат 0;
	КонецЕсли;

// вывод времени, потраченного системой на исполнения запроса	
	Сообщить("Время запроса: "
		+ (_getPerformanceCounter() - время));
	
// замер времени на выгрузку результатов
	время = _getPerformanceCounter();
	
	Запрос.Выгрузить(тзКлиенты);

// вывод времени, потраченного на выгрузку результатов	
	Сообщить("Время выгрузки результатов:" 
		+ (_getPerformanceCounter() - время));
		
// вывод количества результирующих строк запроса
	Сообщить("Строк запроса: " + тзКлиенты.КоличествоСтрок());

	Возврат 1;	
	
КонецФункции

//*******************************************
Процедура ВычислитьДатуНачалаОтсрочкиДолга(тзКлиенты)
	
// новый реквизит таблицы для хранения даты начала периода отсрочки	
	тзКлиенты.НоваяКолонка("ДатаНачала");
	
	тзКлиенты.ВыбратьСтроки();
	
	Пока тзКлиенты.ПолучитьСтроку() = 1 Цикл
		
		Календарь = тзКлиенты.Клиент.КалендарьЗадолженности;
		
		Если Календарь.Выбран() = 1 Тогда

// расчет даты начала периода отсрочки по календарю задолженности			
		     тзКлиенты.ДатаНачала = Календарь.ПолучитьДату(ТекущаяДата(), 
			 	- тзКлиенты.Клиент.Глубина.Получить(ТекущаяДата()) - 1);
			 
		Иначе

// расчет даты начала периода отсрочки от текущей даты			
			 тзКлиенты.ДатаНачала = ТекущаяДата() 
			 	- тзКлиенты.Клиент.Глубина.Получить(ТекущаяДата()) - 1;
			 
		КонецЕсли;

	КонецЦикла;	
	
КонецПроцедуры

//*******************************************
Функция ВыполнитьЗапросПоПросрДолгу(тзКлиенты, ДатаНачала, сзКлиенты)
	
	Если сзКлиенты.РазмерСписка() = 0 Тогда
// передано пустое подмножество таблицы клиентов		
		Возврат 1;
	КонецЕсли;	

// стандартный объект 'запрос'
	Запрос = СоздатьОбъект("Запрос");
	
// текст запроса на вычисление накопленного за период отсрочки долга
	ТекстЗапроса = "//{{ЗАПРОС(Сформировать2)
	|Период с ДатаНачала;
	|Без итогов;
	|Клиент = Регистр.ВзаиморасчетыПокупателей.Клиент;
	|Долг = Регистр.ВзаиморасчетыПокупателей.Долг;
	|Функция ДолгПриход = Приход(Долг);
	|Группировка Клиент без упорядочивания без групп;// все;
	|Условие(Клиент в сзКлиенты);
	|"//}}ЗАПРОС
	;

// замер времени выполнения запроса	
	время = _getPerformanceCounter();
	
// процедура выполнения запроса	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		
		Возврат 0;
	КонецЕсли;

// вывод времени, потраченного системой на исполнения запроса	
	Сообщить("Время запроса: "
		+ (_getPerformanceCounter() - время));

	Пока Запрос.Группировка() = 1 Цикл
		
		НС = 0;
		
		Если тзКлиенты.НайтиЗначение(Запрос.Клиент, НС, "Клиент") = 1 Тогда

// для каждого из результатов запроса корректируем строку в таблице клиентов
			тзКлиенты.УстановитьЗначение(НС, "ПросрДолг", 
				Макс(0, тзКлиенты.ПолучитьЗначение(НС, "ДолгКонОст") 
					- Запрос.ДолгПриход));
				
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат 1;
	
КонецФункции

//*******************************************
Функция ВычислитьПросроченныйДолг(тзКлиенты)
	Перем ДатаНачала;
	
// текущая "порция" клиентов для запроса по просроченному долгу
	сзКлиенты = СоздатьОбъект("СписокЗначений");
	
	тзКлиенты.НоваяКолонка("ПросрДолг");
	
//
	тзКлиенты.ВыбратьСтроки();
	Пока тзКлиенты.ПолучитьСтроку() = 1 Цикл
		
		тзКлиенты.ПросрДолг = Макс(0, тзКлиенты.ДолгКонОст);
		
	КонецЦикла;	
//
	
	тзКлиенты.Сортировать("ДатаНачала");
		
	НС = 1;
	
	Пока 1=1 Цикл
		
		Если НС > тзКлиенты.КоличествоСтрок() Тогда
// запуск процедуры расчета просроченного долга для последней порции клиентов			
			Если ВыполнитьЗапросПоПросрДолгу(тзКлиенты, 
				ДатаНачала, сзКлиенты) = 0 Тогда
					Возврат 0;
			КонецЕсли;		

// выход из цикла и процедуры			
			Возврат 1;
		Иначе
			
			тзКлиенты.ПолучитьСтрокуПоНомеру(НС);
			
			Если ДатаНачала <> тзКлиенты.ДатаНачала Тогда
// нашли начало новой порции данных
				Если ПустоеЗначение(ДатаНачала) = 1 Тогда
// это - первая порция данных
					
				Иначе
// данные для расчетов по предыдущей порции - собраны
					Если ВыполнитьЗапросПоПросрДолгу(тзКлиенты, 
						ДатаНачала, сзКлиенты) = 0 Тогда
							Возврат 0;
					КонецЕсли;		
						
					сзКлиенты.УдалитьВсе();	
				КонецЕсли;

				ДатаНачала = тзКлиенты.ДатаНачала;
			Иначе
// продолжаем собирать данные...

			КонецЕсли;	
			
            сзКлиенты.ДобавитьЗначение(тзКлиенты.Клиент);
						
		КонецЕсли;	

// итератор по строкам таблицы		
		НС = НС + 1;
		
	КонецЦикла;
	
КонецФункции

//*******************************************
Процедура Сформировать()
	Перем тзКлиенты;
	
// замер времени, необходимого для вычислений
	время = _getPerformanceCounter();

// выборка клиентов, имеющих долг на текущую дату	
	Если ОтборКлиентовСДолгамиНаТекущуюДату(тзКлиенты) = 1 Тогда
		
		ВычислитьДатуНачалаОтсрочкиДолга(тзКлиенты); 
		
		Если ВычислитьПросроченныйДолг(тзКлиенты) = 0 Тогда
			
			Сообщить("Не удалось сформировать отчет", "!");
		КонецЕсли;	
	КонецЕсли;	

// оценка временных затрат
	Сообщить("Всего затрачено времени: " 
		+ (_getPerformanceCounter() - время));
    
	тзКлиенты.ВыбратьСтроку();

КонецПроцедуры
